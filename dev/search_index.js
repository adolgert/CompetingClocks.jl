var documenterSearchIndex = {"docs":
[{"location":"hierarchical/","page":"Hierarchical Samplers","title":"Hierarchical Samplers","text":"EditURL = \"hierarchical.jl\"","category":"page"},{"location":"hierarchical/#Hierarchical-Samplers","page":"Hierarchical Samplers","title":"Hierarchical Samplers","text":"","category":"section"},{"location":"hierarchical/#Overview","page":"Hierarchical Samplers","title":"Overview","text":"","category":"section"},{"location":"hierarchical/","page":"Hierarchical Samplers","title":"Hierarchical Samplers","text":"Continuous-time samplers have to process each event separately. As simulations grow in size, samplers use more memory, and they take more time to select the next event. One approach to speed up sampling is to use multiple samplers arranged in a hierarchy.","category":"page"},{"location":"hierarchical/#Why-Hierarchical-Samplers","page":"Hierarchical Samplers","title":"Why Hierarchical Samplers","text":"","category":"section"},{"location":"hierarchical/","page":"Hierarchical Samplers","title":"Hierarchical Samplers","text":"There are two reasons to use hierarchical samplers.","category":"page"},{"location":"hierarchical/","page":"Hierarchical Samplers","title":"Hierarchical Samplers","text":"Some samplers are better for some simulations. If all transitions are Exponentially-distributed, then an optimized Direct sampler can be the fastest. If all of the distributions are of Exponential families, then Anderson's method is faster than the Next Reaction method. You can split the events among samplers according to the sampler that best fits the behavior of those events.","category":"page"},{"location":"hierarchical/","page":"Hierarchical Samplers","title":"Hierarchical Samplers","text":"The other reason to use multiple samplers has to do with the frequency and locality of the events, in the same way we think of the frequency and locality of memory accesses for cache use. If there is a small subset of events that regenerate frequently, it can make sense even to use a FirstReaction sampler for those events. While FirstReaction doesn't use a complicated data structure to optimize, it can be winningly fast for small numbers of events. Or, for a spatial simulation, you could make separate samplers for separate parts of the landscape, so that each event tends to affect a limited number of samplers.","category":"page"},{"location":"hierarchical/#First-Sampler-to-Fire","page":"Hierarchical Samplers","title":"First Sampler to Fire","text":"","category":"section"},{"location":"hierarchical/","page":"Hierarchical Samplers","title":"Hierarchical Samplers","text":"All of the different samplers find the first event to fire. If we set up two samplers, so that each holds mutually distinct enabled event distributions, we can ask each sampler which it thinks will fire next. The first to fire is the first of the two samplers. This generalizes to any number of samplers. We can make a MultiSampler which contains multiple samplers and always returns the soonest of those contained.","category":"page"},{"location":"hierarchical/","page":"Hierarchical Samplers","title":"Hierarchical Samplers","text":"Even further a MultiSampler can contain a MultiSampler if that makes sense.","category":"page"},{"location":"hierarchical/#Multiple-Direct-Samplers","page":"Hierarchical Samplers","title":"Multiple Direct Samplers","text":"","category":"section"},{"location":"hierarchical/","page":"Hierarchical Samplers","title":"Hierarchical Samplers","text":"It's possible to make a Direct-style sampler that is hierarchical, too. A Direct sampler works in two steps. It sums the hazards of all enabled events and then selects a time according to the sum of the hazards. The main algorithm of a Direct sampler is to sum hazards. A hierarchical Direct algorithm sums the sums of the hazards and then selects a time.","category":"page"},{"location":"hierarchical/","page":"Hierarchical Samplers","title":"Hierarchical Samplers","text":"While hierarchical samplers can contain multiple-Direct samplers, multiple-Direct samplers can only contain other multiple-Direct samplers.","category":"page"},{"location":"hierarchical/#How-to-Split-a-Simulation","page":"Hierarchical Samplers","title":"How to Split a Simulation","text":"","category":"section"},{"location":"hierarchical/","page":"Hierarchical Samplers","title":"Hierarchical Samplers","text":"Each time a simulation calls enable! and disable! for an event, it specifies a key for that event. If the sampler is hierarchical, it can use that key, and maybe the type of the distribution, to choose which sampler handles any given event.","category":"page"},{"location":"hierarchical/","page":"Hierarchical Samplers","title":"Hierarchical Samplers","text":"CompetingClocks's approach in the MultiSampler type is to let the user specify a function that takes as input the key and the distribution and returns some ID for the chosen sampler. The MultiSampler then remembers that choice for this event key, from that point on.","category":"page"},{"location":"hierarchical/","page":"Hierarchical Samplers","title":"Hierarchical Samplers","text":"","category":"page"},{"location":"hierarchical/","page":"Hierarchical Samplers","title":"Hierarchical Samplers","text":"This page was generated using Literate.jl.","category":"page"},{"location":"develop/#Design","page":"Design","title":"Design","text":"","category":"section"},{"location":"develop/","page":"Design","title":"Design","text":"The scope of this is that I want to make a continuous-time simulation that is rooted in stochastic processes and as fast as they can be. The state will be the simplest, a vector of integers. Transitions, however, can be non-Exponential distributions. I'd like to exercise all of the top sampling methods. This code asks how to set up a best-practices continuous-time simulation in Julia. The fastest method for sampling is to use a hierarchical setup, where different sets of transitions get the samplers that are most efficient for their distributions.","category":"page"},{"location":"develop/","page":"Design","title":"Design","text":"The main research question is how to hook the state and transitions of the stochastic process to the sampler algorithm. The mathematical work I've seen does sometimes discuss hierarchical sampling, but it doesn't discuss algorithms for how best to connect a transition with its appropriate sampler. How do we specify it that connection? There's nothing in the math about distributions having a name or an indexing key.","category":"page"},{"location":"develop/","page":"Design","title":"Design","text":"While we normally simulate, there are some other ways to use simulation code, and those other ways give a clue about how to separate functions.","category":"page"},{"location":"develop/","page":"Design","title":"Design","text":"Fire transitions in a given order without sampling them. Work through a trace.\nConstruct a state by specifying an initial state and sequence of transitions.\nMeasure likelihood of a state without sampling. This is used for MCMC.","category":"page"},{"location":"develop/#Vector-addition-systems","page":"Design","title":"Vector addition systems","text":"","category":"section"},{"location":"develop/","page":"Design","title":"Design","text":"A vector addition system (VAS) defines the state as a vector of non-negative integers. Transitions are two matrices of shape (transition x state). One indicates how large the state vector has to be for that transition to be enabled. Together, they define values removed and added to the state vector when a transition fires.","category":"page"},{"location":"develop/","page":"Design","title":"Design","text":"In practice, vector addition systems aren't implemented with vectors. The professional versions are defined on bipartite graphs where the state is one node type and transitions are the other node type.","category":"page"},{"location":"develop/#Semi-Markov-Vector-Addition-System","page":"Design","title":"Semi-Markov Vector Addition System","text":"","category":"section"},{"location":"develop/","page":"Design","title":"Design","text":"We'll make one little change to the VAS. Instead of having only exponential distributions, it can have general distribution types. That adds complexity to the sampler, but the samplers will handle that. For the VAS, it adds some state and adds burden to specification. The state now needs to track the time at which each transition was enabled, known as t_e. We'll call the main part of the state its physical state, which is the vector of integers in this case.","category":"page"},{"location":"develop/","page":"Design","title":"Design","text":"In order to specify a Markov VAS, you need to give a rate for each transition. A chemical simulation has a very particular function to determine the rate of transitions. For chemicals, the rate is a function of the number of possible combinations of the chemicals. For a Semi-Markov VAS, which we're making, we'll let the state be any function of the state of the system.","category":"page"},{"location":"develop/","page":"Design","title":"Design","text":"There's one other wrinkle to specifying a Semi-Markov VAS. The Zimmerman simulation book points out that non-Exponential transitions can have memory or be memoryless. He means that, if a transition is enabled and disabled, we need to decide whether that affects its rate the next time it's enabled. If the transition were emptying a bathtub, and we put in the stopper plug, then taking out that plug depends on the previous enabling. It must have memory. If it were the time a robot needs to put a gas cap on an assmebly-line car, it would need to begin from scratch during a restart.","category":"page"},{"location":"develop/#Core-responsibilities","page":"Design","title":"Core responsibilities","text":"","category":"section"},{"location":"develop/","page":"Design","title":"Design","text":"The state of the system is dictated by stochastic processes theory: a. Physical state, which can be a vector of integers for this version. b. Enabling times. This is the time at which each transition was, or wasn't enabled. c. The last time any transition fired.\nSampling depends only on distributions, not any other information about each transition. All optimized samplers keep a cache of the distributions of enabled transitions and modify that cache with each firing.","category":"page"},{"location":"develop/#Sampling","page":"Design","title":"Sampling","text":"","category":"section"},{"location":"develop/","page":"Design","title":"Design","text":"Most samplers optimize their work by tracking what transitions were last enabled. They treat newly-enabled and newly-disabled transitions as a modification to the likelihood of the next sample. Some samplers don't store any state. First-reaction method is this way, as is the original Direct method. These are naive samplers, and I don't think it's worth optimizing for them. I would, instead, assume that all samplers track which transitions were last enabled. I'll add that as a layer on the first-reaction and direct methods.","category":"page"},{"location":"develop/#Sequence","page":"Design","title":"Sequence","text":"","category":"section"},{"location":"develop/","page":"Design","title":"Design","text":"The simulation inner loop is critical for efficient simulation. For continuous-time simulation, it's a game of clock-cycles, so we should get this right. This inner loop can have a lot of different kinds of calculations to do, and those calculations benefit from good cache use, right near the processor on L1. As a consequence, we want to design the parts of the inner loop so that they interleave work that operates on the same data.","category":"page"},{"location":"develop/","page":"Design","title":"Design","text":"If we think of a single transition as a consecutive set of steps, each of which has a different function, then those functions traverse state updates, transitions calculations, and sampling decisions.","category":"page"},{"location":"develop/","page":"Design","title":"Design","text":"Fire a transition.\nModify state.\nCalculate changes to transitions.\nUpdate sampler information.\nSample for next transition.","category":"page"},{"location":"develop/","page":"Design","title":"Design","text":"However, the state and transitions will be stored on a graph for the most efficient simulations. We'd like to make the most efficient simulations possible. When state and transitions are stored on a graph, it helps to perform all operations on graph data while doing a single traversal of the graph.","category":"page"},{"location":"develop/","page":"Design","title":"Design","text":"Fire a transition\nFor each [state changed]\n    Update a single state\n    For each [transition depending on that state]\n        Calculate the hazard rate for that transition.\n        Update the sampler about that updated hazard.","category":"page"},{"location":"develop/","page":"Design","title":"Design","text":"The goal, then, is to make code where firing, finding affected transitions, and sampling those transitions, is all separate, but they get called nicely in order within a single loop.","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"EditURL = \"distributions.jl\"","category":"page"},{"location":"distributions/#Non-exponential-Simulation","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"","category":"section"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"CompetingClocks is a sampler for generalized semi-Markov processes (GSMP). Every event in a generalized semi-Markov process is chosen as the result of a competion among clocks to see which fires next.","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"In a process-oriented simulation (like SimJulia), control flow is based on tasks. Each task performs some action on the state, rolls the dice, and sets a wake-up time. It might wake up as expected and possible execute code, or it might be interrupted by another task's actions. In contrast, an event-oriented simulation using CompetingClocks will create a set of possible next events, assign a probability distribution for when each can happen, and the timing of which happens first determines which next event happens. Let's look at how a probability distribution describes the time for an event to happen and then how they compete in CompetingClocks.","category":"page"},{"location":"distributions/#Distributions-in-Time","page":"Non-exponential Simulation","title":"Distributions in Time","text":"","category":"section"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"Let's say you have a cold. You know you aren't going to recover immediately, but, as days go by, you're more and more sure you'll recover soon. This graph below shows recovery as a hazard rate, which is the probability, per unit time, given that the event has not yet happened.","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"(Image: )","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"This hazard rate starts at zero, meaning there's no way you'll recover when you're first sick. It gets more likely over time that you're at the tail end of being sick. The hazard rate shown is that of a Gamma distribution, commonly used to describe the rate of recovery for a population of individuals who are sick.","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"If, instead, you want to see the number of people who recover on any given day, that is called a probability distribution function (pdf), which is a much more common way to display a distribution in time.","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"(Image: )","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"Where the hazard rate is an instantaneous quantity at a point in time, the probability distribution function (pdf) integrates over all possible future times. If we call the hazard rate lambda(t) and call the pdf f(t), we get this relationship.","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"f(t) = lambda(t) e^-int_0^t lambda(s)ds","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"The graph of the pdf tells us that the most likely time for this event is a little before time 5, in whatever units. You will see graphs of pdfs on Wikipedia because this is how people usually think about the probability an event happens at some time.","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"A simulation, however, has multiple events possible at any one time. One event may happen, and then other events need to restart. Let's ask, if you still have a cold on day 5, what is the probability distribution function for when you will recover?","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"(Image: )","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"The probability distribution function changes now that you know you didn't recover earlier than day 5. On the other hand, the hazard rate for recovery from the cold will be unchanged. Using the same hazard rate, we can recalculate the pdf from the new time t_0=5.","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"f(ttt_0) = lambda(t) e^-int_t_0^t lambda(s)ds","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"The hazard rate describes a flow of probability, whereas the distribution function tells us about ensembles of events.","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"The hazard rate is related to the well known cumulative distribution function (CDF) by an integral. The CDF tells us what is the overall probability the event occured some time in the interval t_0t_1).","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"F(t_0t_1) = 1 - e^-int_t_0^t_1 lambda(s) ds","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"Equally important for simulation is the survival function (sometimes called the complementary cumulative distribution function), which is the probability the event will not occur until after t_1.","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"S(t_1) = 1 - F(t_10) = e^-int_0^t_1 lambda(s) ds","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"(Image: )","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"For our example, survival is the chance the cold lasts longer than the given time.","category":"page"},{"location":"distributions/#Competition","page":"Non-exponential Simulation","title":"Competition","text":"","category":"section"},{"location":"distributions/#Individual-Distributions","page":"Non-exponential Simulation","title":"Individual Distributions","text":"","category":"section"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"Let's think of a moment when there are three possible next events. There is a Gamma distribution for when you recover from a cold, a Weibull distribution for when you decide to take medicine for the cold, and an Exponential distribution for when your Mom calls you. Each one is described by a distribution in time, and we can think of them as three hazard rates.","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"(Image: )","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"The separate hazard rates are what we put into the simulation. Given their competition, the hazard rates will remain unchanged, but the pdfs will change.","category":"page"},{"location":"distributions/#Marginal-Probability","page":"Non-exponential Simulation","title":"Marginal Probability","text":"","category":"section"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"Each of the three clock distributions above corresponds to a unique event E_i, which has a probability that it will be the first to fire. We calculate this probability by marginalizing over the other events, which ends up being an integral over the distribution, multiplied by the survivals of the other events.","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"PE_i = int_0^infty f_i(t) prod_jne i S_j(t) dt","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"That gives the chart on the left, where the sum of all PE_i is one.","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"(Image: )","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"The graph on the right shows the conditional distribution in time for each event, given that it was the one that fired, so it is Pt_i  E_i. In the language of semi-Markov processes, these distributions are called holding times. You can see that these distributions don't match the distributions for the individual events. They are modified by competition.","category":"page"},{"location":"distributions/#Marginal-Time","page":"Non-exponential Simulation","title":"Marginal Time","text":"","category":"section"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"What if we split the marginal and conditional the other way? Instead of marginalizing the probability of which event fires, start with a marginal of the probability for when any event fires. One way to calculate this is to say that the hazard rate for any event to fire is the sum of the hazard rates.","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"lambda_m(t) = sum_ilambda_i(t)","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"From here, we know the pdf for the first firing time.","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"f(t) = lambda_m(t)expleft(-int_0^tlambda_m(s)dsright)","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"From the graph above, if we pick a time, t_1=10, we can read from the graph three hazard rates, (lambda_1(t_1)lambda_2(t_1) lambda_3(t_1)). Each hazard rate is the rate, per unit time, of that event. We know that, if the simulation makes it to t=10 without any event happening, the conditional probability for any one of those events is the ratio of hazard rates.","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"PE_1t=t_1 = fraclambda_1(t_1)lambda_1(t_1)+lambda_2(t_1)+lambda_3(t_1)","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"Now we can plot, on the left, the pdf for who fires first and, on the right, the probability of which event fires, given the firing time.","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"(Image: )","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"On the left of this graph is the pdf for the first event of the three to fire. We can see this as a marginal Pt and then the right-hand graph as the conditional PE_it.","category":"page"},{"location":"distributions/#Specification-of-a-Simulation","page":"Non-exponential Simulation","title":"Specification of a Simulation","text":"","category":"section"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"If we imagine a drug trial, where patients can recover, die, or exit the trial for some other reason, there are three mutually-exclusive events, like the example above. If we pick the recovery event and plot its distribution in time, which of the above plots will we see? This will be a holding time. It won't be the pdf that represents the rate of recovery in the absence of competing events. However, given observations of competing events, it is possible to calculate back to the original hazard rates using survival analysis.","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"Survival analysis uses observations of event times and event cancellations to estimate hazard rates for each event. It helps you tease apart the effects of competition to see the underlying probability per unit time that any event would fire, given that it has not yet fired.","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"Simulation is the opposite of survival analysis. It allows you to take rules for how any event would fire, in the absence of competition, and to place it in a more complicated environment where competition happens. When you specify a continuous-time simulation, it isn't specified with the pdfs of holding times but with the pdfs of rates derived from survival analysis.","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"","category":"page"},{"location":"distributions/","page":"Non-exponential Simulation","title":"Non-exponential Simulation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"EditURL = \"sir.jl\"","category":"page"},{"location":"sir/#Non-Markovian-SIR-Model","page":"SIR Model","title":"Non-Markovian SIR Model","text":"","category":"section"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"using Random\nusing Plots\nusing Distributions\nusing CompetingClocks","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"In this tutorial we demonstrate construction of a SIR (susceptible-infectious-removed) model with non-exponential recovery times. Infection events occur at the points of a Poisson process, which is equivalent to using a single exponential clock whose rate corresponds to the overall rate of infection in the population. The infection rate is beta c S I  N where N is the total population size, making this a frequency-dependent force of infection term rather than pure mass action (although as N does not change in this example, the difference is moot). Clocks for recovery events follow an arbitrary distribution.","category":"page"},{"location":"sir/#Model-structure","page":"SIR Model","title":"Model structure","text":"","category":"section"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"We use a struct that stores the type of the recovery distribution as a type parameter. The model state is stored as a vector of integers, representing S, I, and R. Additionally, because recovery clocks need unique keys, we define the method get_key! which retrives an integer key and increments the stored key counter.","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"The initialize! method uses the initial state to enable the infection clock and recovery clocks for each initial infectious person. Note that the keys are a tuple where the first element is a Symbol giving the event type, and the second element is an integer.","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"mutable struct SIRNonMarkov{T<:Distribution}\n    state::Vector{Int}\n    parameters::Vector{Float64}\n    next_key::Int\n    recovery_distribution::T\n    time::Float64\nend\n\nfunction get_key!(model::SIRNonMarkov)\n    key = model.next_key\n    model.next_key += 1\n    return key\nend\n\nfunction initialize!(model::SIRNonMarkov, sampler, rng)\n    (β, c, γ) = model.parameters\n    # enable the infection clock\n    enable!(\n        sampler,\n        (:infection, get_key!(model)),\n        Exponential(1.0/(β*c*model.state[2]/sum(model.state)*model.state[1])),\n        model.time,\n        model.time,\n        rng\n        )\n    # enable the recovery clocks\n    for _ in 1:model.state[2]\n        enable!(sampler, (:recovery, get_key!(model)), model.recovery_distribution, model.time, model.time, rng)\n    end\nend;","category":"page"},{"location":"sir/#Model-update","page":"SIR Model","title":"Model update","text":"","category":"section"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"In the model update function, we use the first element of the clock key to determine the event type corresponding to the clock that fired, and apply the corresponding logic. Infection events disable and enable the infection event with a new rate, and enable a recovery clock for the newly infectious individual. Recovery events simply disable the clock associated to that event. Both events update the state vector.","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"function step!(model::SIRNonMarkov, sampler::SSA{K,T}, when::T, which::K, rng) where {K,T}\n    (β, c, γ) = model.parameters\n    model.time = when\n    if first(which) == :infection\n        model.state[1] -= 1\n        model.state[2] += 1\n        # disable and reenable the infection clock after accounting for the new rate\n        disable!(sampler, which, model.time)\n        enable!(\n            sampler,\n            which,\n            Exponential(1.0/(β*c*model.state[2]/sum(model.state)*model.state[1])),\n            model.time,\n            model.time,\n            rng\n            )\n        # enable a recovery event for the newly infected person\n        enable!(\n            sampler,\n            (:recovery, get_key!(model)),\n            model.recovery_distribution,\n            model.time,\n            model.time,\n            rng\n            )\n    elseif first(which) == :recovery\n        model.state[2] -= 1\n        model.state[3] += 1\n        disable!(sampler, which, model.time)\n    else\n        error(\"unrecognized clock key: $(which)\")\n    end\nend;","category":"page"},{"location":"sir/#Simulation","page":"SIR Model","title":"Simulation","text":"","category":"section"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"We first set parameters.","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"tmax = 40.0\ninitial_state = [990, 10, 0]\np = [0.05, 10.0, 4.0]\n\nseed = 456959517\nrng = MersenneTwister(seed);","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"Next we generate the model struct and the sampler object. Here we choose the CombinedNextReaction sampler type. We choose to use a Dirac delta distribution to simulate deterministic recovery times.","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"sirmodel = SIRNonMarkov(deepcopy(initial_state), p, 0, Dirac(p[3]), 0.0)\nsampler = CombinedNextReaction{Tuple{Symbol,Int},Float64}();","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"Now we may run the model, using a function run_sir!. We preallocate a matrix to store model output. Note that in the simple SIR model with only infection and recovery events, a maximum of 2S + I events is possible.","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"function run_sir!(model, sampler, tmax, rng)\n\n    output = zeros(2*model.state[1]+model.state[2]+1, 4)\n    nout = 1\n    output[nout,:] = [sirmodel.time; sirmodel.state]\n    nout += 1;\n\n    initialize!(model, sampler, rng)\n\n    (when, which) = next(sampler, model.time, rng)\n\n    while when <= tmax\n        step!(model, sampler, when, which, rng)\n        (when, which) = next(sampler, model.time, rng)\n\n        output[nout,:] .= [model.time; model.state]\n        nout += 1\n    end\n\n    return output, nout\nend\n\n(output, nout) = run_sir!(sirmodel, sampler, tmax, rng);","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"Finally we can plot the sampled trajectory.","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"plot(\n    output[1:nout-1,1],\n    output[1:nout-1,2:end],\n    label=[\"S\" \"I\" \"R\"],\n    xlabel=\"Time\",\n    ylabel=\"Number\"\n)","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip990\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip990)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip991\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip990)\" d=\"M262.551 1423.18 L2352.76 1423.18 L2352.76 47.2441 L262.551 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip992\">\n    <rect x=\"262\" y=\"47\" width=\"2091\" height=\"1377\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"321.708,1423.18 321.708,47.2441 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"831.168,1423.18 831.168,47.2441 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1340.63,1423.18 1340.63,47.2441 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1850.09,1423.18 1850.09,47.2441 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"262.551,1423.18 2352.76,1423.18 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"321.708,1423.18 321.708,1404.28 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"831.168,1423.18 831.168,1404.28 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1340.63,1423.18 1340.63,1404.28 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1850.09,1423.18 1850.09,1404.28 \"/>\n<path clip-path=\"url(#clip990)\" d=\"M321.708 1454.1 Q318.097 1454.1 316.268 1457.66 Q314.463 1461.2 314.463 1468.33 Q314.463 1475.44 316.268 1479.01 Q318.097 1482.55 321.708 1482.55 Q325.342 1482.55 327.148 1479.01 Q328.976 1475.44 328.976 1468.33 Q328.976 1461.2 327.148 1457.66 Q325.342 1454.1 321.708 1454.1 M321.708 1450.39 Q327.518 1450.39 330.574 1455 Q333.652 1459.58 333.652 1468.33 Q333.652 1477.06 330.574 1481.67 Q327.518 1486.25 321.708 1486.25 Q315.898 1486.25 312.819 1481.67 Q309.764 1477.06 309.764 1468.33 Q309.764 1459.58 312.819 1455 Q315.898 1450.39 321.708 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M805.856 1481.64 L813.494 1481.64 L813.494 1455.28 L805.184 1456.95 L805.184 1452.69 L813.448 1451.02 L818.124 1451.02 L818.124 1481.64 L825.763 1481.64 L825.763 1485.58 L805.856 1485.58 L805.856 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M845.207 1454.1 Q841.596 1454.1 839.767 1457.66 Q837.962 1461.2 837.962 1468.33 Q837.962 1475.44 839.767 1479.01 Q841.596 1482.55 845.207 1482.55 Q848.842 1482.55 850.647 1479.01 Q852.476 1475.44 852.476 1468.33 Q852.476 1461.2 850.647 1457.66 Q848.842 1454.1 845.207 1454.1 M845.207 1450.39 Q851.017 1450.39 854.073 1455 Q857.152 1459.58 857.152 1468.33 Q857.152 1477.06 854.073 1481.67 Q851.017 1486.25 845.207 1486.25 Q839.397 1486.25 836.318 1481.67 Q833.263 1477.06 833.263 1468.33 Q833.263 1459.58 836.318 1455 Q839.397 1450.39 845.207 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1319.4 1481.64 L1335.72 1481.64 L1335.72 1485.58 L1313.78 1485.58 L1313.78 1481.64 Q1316.44 1478.89 1321.02 1474.26 Q1325.63 1469.61 1326.81 1468.27 Q1329.05 1465.74 1329.93 1464.01 Q1330.84 1462.25 1330.84 1460.56 Q1330.84 1457.8 1328.89 1456.07 Q1326.97 1454.33 1323.87 1454.33 Q1321.67 1454.33 1319.22 1455.09 Q1316.79 1455.86 1314.01 1457.41 L1314.01 1452.69 Q1316.83 1451.55 1319.29 1450.97 Q1321.74 1450.39 1323.78 1450.39 Q1329.15 1450.39 1332.34 1453.08 Q1335.54 1455.77 1335.54 1460.26 Q1335.54 1462.39 1334.73 1464.31 Q1333.94 1466.2 1331.83 1468.8 Q1331.25 1469.47 1328.15 1472.69 Q1325.05 1475.88 1319.4 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1355.54 1454.1 Q1351.92 1454.1 1350.1 1457.66 Q1348.29 1461.2 1348.29 1468.33 Q1348.29 1475.44 1350.1 1479.01 Q1351.92 1482.55 1355.54 1482.55 Q1359.17 1482.55 1360.98 1479.01 Q1362.8 1475.44 1362.8 1468.33 Q1362.8 1461.2 1360.98 1457.66 Q1359.17 1454.1 1355.54 1454.1 M1355.54 1450.39 Q1361.35 1450.39 1364.4 1455 Q1367.48 1459.58 1367.48 1468.33 Q1367.48 1477.06 1364.4 1481.67 Q1361.35 1486.25 1355.54 1486.25 Q1349.73 1486.25 1346.65 1481.67 Q1343.59 1477.06 1343.59 1468.33 Q1343.59 1459.58 1346.65 1455 Q1349.73 1450.39 1355.54 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1838.93 1466.95 Q1842.29 1467.66 1844.16 1469.93 Q1846.06 1472.2 1846.06 1475.53 Q1846.06 1480.65 1842.54 1483.45 Q1839.02 1486.25 1832.54 1486.25 Q1830.37 1486.25 1828.05 1485.81 Q1825.76 1485.39 1823.31 1484.54 L1823.31 1480.02 Q1825.25 1481.16 1827.57 1481.74 Q1829.88 1482.32 1832.4 1482.32 Q1836.8 1482.32 1839.09 1480.58 Q1841.41 1478.84 1841.41 1475.53 Q1841.41 1472.48 1839.25 1470.77 Q1837.13 1469.03 1833.31 1469.03 L1829.28 1469.03 L1829.28 1465.19 L1833.49 1465.19 Q1836.94 1465.19 1838.77 1463.82 Q1840.6 1462.43 1840.6 1459.84 Q1840.6 1457.18 1838.7 1455.77 Q1836.82 1454.33 1833.31 1454.33 Q1831.38 1454.33 1829.19 1454.75 Q1826.99 1455.16 1824.35 1456.04 L1824.35 1451.88 Q1827.01 1451.14 1829.32 1450.77 Q1831.66 1450.39 1833.72 1450.39 Q1839.05 1450.39 1842.15 1452.83 Q1845.25 1455.23 1845.25 1459.35 Q1845.25 1462.22 1843.61 1464.21 Q1841.96 1466.18 1838.93 1466.95 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1864.93 1454.1 Q1861.31 1454.1 1859.49 1457.66 Q1857.68 1461.2 1857.68 1468.33 Q1857.68 1475.44 1859.49 1479.01 Q1861.31 1482.55 1864.93 1482.55 Q1868.56 1482.55 1870.37 1479.01 Q1872.19 1475.44 1872.19 1468.33 Q1872.19 1461.2 1870.37 1457.66 Q1868.56 1454.1 1864.93 1454.1 M1864.93 1450.39 Q1870.74 1450.39 1873.79 1455 Q1876.87 1459.58 1876.87 1468.33 Q1876.87 1477.06 1873.79 1481.67 Q1870.74 1486.25 1864.93 1486.25 Q1859.12 1486.25 1856.04 1481.67 Q1852.98 1477.06 1852.98 1468.33 Q1852.98 1459.58 1856.04 1455 Q1859.12 1450.39 1864.93 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1229.53 1520.52 L1269.73 1520.52 L1269.73 1525.93 L1252.86 1525.93 L1252.86 1568.04 L1246.4 1568.04 L1246.4 1525.93 L1229.53 1525.93 L1229.53 1520.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1273.68 1532.4 L1279.53 1532.4 L1279.53 1568.04 L1273.68 1568.04 L1273.68 1532.4 M1273.68 1518.52 L1279.53 1518.52 L1279.53 1525.93 L1273.68 1525.93 L1273.68 1518.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1319.54 1539.24 Q1321.74 1535.29 1324.79 1533.41 Q1327.85 1531.54 1331.99 1531.54 Q1337.56 1531.54 1340.58 1535.45 Q1343.6 1539.33 1343.6 1546.53 L1343.6 1568.04 L1337.72 1568.04 L1337.72 1546.72 Q1337.72 1541.59 1335.9 1539.11 Q1334.09 1536.63 1330.36 1536.63 Q1325.81 1536.63 1323.17 1539.65 Q1320.53 1542.68 1320.53 1547.9 L1320.53 1568.04 L1314.64 1568.04 L1314.64 1546.72 Q1314.64 1541.56 1312.83 1539.11 Q1311.01 1536.63 1307.22 1536.63 Q1302.74 1536.63 1300.09 1539.68 Q1297.45 1542.71 1297.45 1547.9 L1297.45 1568.04 L1291.56 1568.04 L1291.56 1532.4 L1297.45 1532.4 L1297.45 1537.93 Q1299.46 1534.66 1302.26 1533.1 Q1305.06 1531.54 1308.91 1531.54 Q1312.79 1531.54 1315.5 1533.51 Q1318.24 1535.48 1319.54 1539.24 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1385.78 1548.76 L1385.78 1551.62 L1358.85 1551.62 Q1359.23 1557.67 1362.48 1560.85 Q1365.76 1564 1371.58 1564 Q1374.95 1564 1378.11 1563.17 Q1381.29 1562.35 1384.41 1560.69 L1384.41 1566.23 Q1381.26 1567.57 1377.95 1568.27 Q1374.64 1568.97 1371.23 1568.97 Q1362.7 1568.97 1357.7 1564 Q1352.74 1559.04 1352.74 1550.57 Q1352.74 1541.82 1357.45 1536.69 Q1362.19 1531.54 1370.21 1531.54 Q1377.41 1531.54 1381.58 1536.18 Q1385.78 1540.8 1385.78 1548.76 M1379.92 1547.04 Q1379.86 1542.23 1377.21 1539.37 Q1374.6 1536.5 1370.28 1536.5 Q1365.37 1536.5 1362.41 1539.27 Q1359.49 1542.04 1359.04 1547.07 L1379.92 1547.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"262.551,1384.24 2352.76,1384.24 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"262.551,1056.45 2352.76,1056.45 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"262.551,728.656 2352.76,728.656 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"262.551,400.865 2352.76,400.865 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"262.551,73.074 2352.76,73.074 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"262.551,1423.18 262.551,47.2441 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"262.551,1384.24 281.449,1384.24 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"262.551,1056.45 281.449,1056.45 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"262.551,728.656 281.449,728.656 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"262.551,400.865 281.449,400.865 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"262.551,73.074 281.449,73.074 \"/>\n<path clip-path=\"url(#clip990)\" d=\"M214.607 1370.04 Q210.996 1370.04 209.167 1373.6 Q207.362 1377.14 207.362 1384.27 Q207.362 1391.38 209.167 1394.94 Q210.996 1398.49 214.607 1398.49 Q218.241 1398.49 220.047 1394.94 Q221.875 1391.38 221.875 1384.27 Q221.875 1377.14 220.047 1373.6 Q218.241 1370.04 214.607 1370.04 M214.607 1366.33 Q220.417 1366.33 223.473 1370.94 Q226.551 1375.52 226.551 1384.27 Q226.551 1393 223.473 1397.61 Q220.417 1402.19 214.607 1402.19 Q208.797 1402.19 205.718 1397.61 Q202.662 1393 202.662 1384.27 Q202.662 1375.52 205.718 1370.94 Q208.797 1366.33 214.607 1366.33 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M148.311 1069.79 L164.63 1069.79 L164.63 1073.73 L142.686 1073.73 L142.686 1069.79 Q145.348 1067.04 149.931 1062.41 Q154.538 1057.76 155.718 1056.41 Q157.964 1053.89 158.843 1052.15 Q159.746 1050.39 159.746 1048.7 Q159.746 1045.95 157.802 1044.21 Q155.88 1042.48 152.778 1042.48 Q150.579 1042.48 148.126 1043.24 Q145.695 1044.01 142.917 1045.56 L142.917 1040.83 Q145.741 1039.7 148.195 1039.12 Q150.649 1038.54 152.686 1038.54 Q158.056 1038.54 161.251 1041.23 Q164.445 1043.91 164.445 1048.4 Q164.445 1050.53 163.635 1052.45 Q162.848 1054.35 160.741 1056.94 Q160.163 1057.62 157.061 1060.83 Q153.959 1064.03 148.311 1069.79 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M174.491 1039.17 L192.848 1039.17 L192.848 1043.1 L178.774 1043.1 L178.774 1051.57 Q179.792 1051.23 180.811 1051.07 Q181.829 1050.88 182.848 1050.88 Q188.635 1050.88 192.014 1054.05 Q195.394 1057.22 195.394 1062.64 Q195.394 1068.22 191.922 1071.32 Q188.45 1074.4 182.13 1074.4 Q179.954 1074.4 177.686 1074.03 Q175.44 1073.66 173.033 1072.92 L173.033 1068.22 Q175.116 1069.35 177.339 1069.91 Q179.561 1070.46 182.038 1070.46 Q186.042 1070.46 188.38 1068.36 Q190.718 1066.25 190.718 1062.64 Q190.718 1059.03 188.38 1056.92 Q186.042 1054.82 182.038 1054.82 Q180.163 1054.82 178.288 1055.23 Q176.436 1055.65 174.491 1056.53 L174.491 1039.17 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M214.607 1042.25 Q210.996 1042.25 209.167 1045.81 Q207.362 1049.35 207.362 1056.48 Q207.362 1063.59 209.167 1067.15 Q210.996 1070.69 214.607 1070.69 Q218.241 1070.69 220.047 1067.15 Q221.875 1063.59 221.875 1056.48 Q221.875 1049.35 220.047 1045.81 Q218.241 1042.25 214.607 1042.25 M214.607 1038.54 Q220.417 1038.54 223.473 1043.15 Q226.551 1047.73 226.551 1056.48 Q226.551 1065.21 223.473 1069.82 Q220.417 1074.4 214.607 1074.4 Q208.797 1074.4 205.718 1069.82 Q202.662 1065.21 202.662 1056.48 Q202.662 1047.73 205.718 1043.15 Q208.797 1038.54 214.607 1038.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M144.329 711.376 L162.686 711.376 L162.686 715.311 L148.612 715.311 L148.612 723.783 Q149.63 723.436 150.649 723.274 Q151.667 723.089 152.686 723.089 Q158.473 723.089 161.852 726.26 Q165.232 729.432 165.232 734.848 Q165.232 740.427 161.76 743.529 Q158.288 746.607 151.968 746.607 Q149.792 746.607 147.524 746.237 Q145.279 745.867 142.871 745.126 L142.871 740.427 Q144.954 741.561 147.177 742.117 Q149.399 742.672 151.876 742.672 Q155.88 742.672 158.218 740.566 Q160.556 738.459 160.556 734.848 Q160.556 731.237 158.218 729.131 Q155.88 727.024 151.876 727.024 Q150.001 727.024 148.126 727.441 Q146.274 727.858 144.329 728.737 L144.329 711.376 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M184.445 714.455 Q180.834 714.455 179.005 718.02 Q177.2 721.561 177.2 728.691 Q177.2 735.797 179.005 739.362 Q180.834 742.904 184.445 742.904 Q188.079 742.904 189.885 739.362 Q191.713 735.797 191.713 728.691 Q191.713 721.561 189.885 718.02 Q188.079 714.455 184.445 714.455 M184.445 710.751 Q190.255 710.751 193.311 715.358 Q196.389 719.941 196.389 728.691 Q196.389 737.418 193.311 742.024 Q190.255 746.607 184.445 746.607 Q178.635 746.607 175.556 742.024 Q172.501 737.418 172.501 728.691 Q172.501 719.941 175.556 715.358 Q178.635 710.751 184.445 710.751 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M214.607 714.455 Q210.996 714.455 209.167 718.02 Q207.362 721.561 207.362 728.691 Q207.362 735.797 209.167 739.362 Q210.996 742.904 214.607 742.904 Q218.241 742.904 220.047 739.362 Q221.875 735.797 221.875 728.691 Q221.875 721.561 220.047 718.02 Q218.241 714.455 214.607 714.455 M214.607 710.751 Q220.417 710.751 223.473 715.358 Q226.551 719.941 226.551 728.691 Q226.551 737.418 223.473 742.024 Q220.417 746.607 214.607 746.607 Q208.797 746.607 205.718 742.024 Q202.662 737.418 202.662 728.691 Q202.662 719.941 205.718 715.358 Q208.797 710.751 214.607 710.751 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M143.103 383.585 L165.325 383.585 L165.325 385.576 L152.778 418.145 L147.894 418.145 L159.7 387.52 L143.103 387.52 L143.103 383.585 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M174.491 383.585 L192.848 383.585 L192.848 387.52 L178.774 387.52 L178.774 395.992 Q179.792 395.645 180.811 395.483 Q181.829 395.298 182.848 395.298 Q188.635 395.298 192.014 398.469 Q195.394 401.641 195.394 407.057 Q195.394 412.636 191.922 415.738 Q188.45 418.816 182.13 418.816 Q179.954 418.816 177.686 418.446 Q175.44 418.076 173.033 417.335 L173.033 412.636 Q175.116 413.77 177.339 414.326 Q179.561 414.881 182.038 414.881 Q186.042 414.881 188.38 412.775 Q190.718 410.668 190.718 407.057 Q190.718 403.446 188.38 401.34 Q186.042 399.233 182.038 399.233 Q180.163 399.233 178.288 399.65 Q176.436 400.066 174.491 400.946 L174.491 383.585 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M214.607 386.664 Q210.996 386.664 209.167 390.229 Q207.362 393.77 207.362 400.9 Q207.362 408.006 209.167 411.571 Q210.996 415.113 214.607 415.113 Q218.241 415.113 220.047 411.571 Q221.875 408.006 221.875 400.9 Q221.875 393.77 220.047 390.229 Q218.241 386.664 214.607 386.664 M214.607 382.96 Q220.417 382.96 223.473 387.567 Q226.551 392.15 226.551 400.9 Q226.551 409.627 223.473 414.233 Q220.417 418.816 214.607 418.816 Q208.797 418.816 205.718 414.233 Q202.662 409.627 202.662 400.9 Q202.662 392.15 205.718 387.567 Q208.797 382.96 214.607 382.96 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M114.931 86.4189 L122.57 86.4189 L122.57 60.0533 L114.26 61.7199 L114.26 57.4607 L122.524 55.794 L127.2 55.794 L127.2 86.4189 L134.839 86.4189 L134.839 90.354 L114.931 90.354 L114.931 86.4189 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M154.283 58.8727 Q150.672 58.8727 148.843 62.4375 Q147.038 65.9792 147.038 73.1088 Q147.038 80.2152 148.843 83.78 Q150.672 87.3216 154.283 87.3216 Q157.917 87.3216 159.723 83.78 Q161.552 80.2152 161.552 73.1088 Q161.552 65.9792 159.723 62.4375 Q157.917 58.8727 154.283 58.8727 M154.283 55.169 Q160.093 55.169 163.149 59.7755 Q166.227 64.3588 166.227 73.1088 Q166.227 81.8356 163.149 86.442 Q160.093 91.0253 154.283 91.0253 Q148.473 91.0253 145.394 86.442 Q142.339 81.8356 142.339 73.1088 Q142.339 64.3588 145.394 59.7755 Q148.473 55.169 154.283 55.169 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M184.445 58.8727 Q180.834 58.8727 179.005 62.4375 Q177.2 65.9792 177.2 73.1088 Q177.2 80.2152 179.005 83.78 Q180.834 87.3216 184.445 87.3216 Q188.079 87.3216 189.885 83.78 Q191.713 80.2152 191.713 73.1088 Q191.713 65.9792 189.885 62.4375 Q188.079 58.8727 184.445 58.8727 M184.445 55.169 Q190.255 55.169 193.311 59.7755 Q196.389 64.3588 196.389 73.1088 Q196.389 81.8356 193.311 86.442 Q190.255 91.0253 184.445 91.0253 Q178.635 91.0253 175.556 86.442 Q172.501 81.8356 172.501 73.1088 Q172.501 64.3588 175.556 59.7755 Q178.635 55.169 184.445 55.169 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M214.607 58.8727 Q210.996 58.8727 209.167 62.4375 Q207.362 65.9792 207.362 73.1088 Q207.362 80.2152 209.167 83.78 Q210.996 87.3216 214.607 87.3216 Q218.241 87.3216 220.047 83.78 Q221.875 80.2152 221.875 73.1088 Q221.875 65.9792 220.047 62.4375 Q218.241 58.8727 214.607 58.8727 M214.607 55.169 Q220.417 55.169 223.473 59.7755 Q226.551 64.3588 226.551 73.1088 Q226.551 81.8356 223.473 86.442 Q220.417 91.0253 214.607 91.0253 Q208.797 91.0253 205.718 86.442 Q202.662 81.8356 202.662 73.1088 Q202.662 64.3588 205.718 59.7755 Q208.797 55.169 214.607 55.169 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M16.4842 862.94 L16.4842 854.283 L56.238 833.212 L16.4842 833.212 L16.4842 826.974 L64.0042 826.974 L64.0042 835.631 L24.2503 856.701 L64.0042 856.701 L64.0042 862.94 L16.4842 862.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M49.9359 815.038 L28.3562 815.038 L28.3562 809.181 L49.7131 809.181 Q54.7739 809.181 57.3202 807.208 Q59.8346 805.235 59.8346 801.288 Q59.8346 796.546 56.8109 793.808 Q53.7872 791.039 48.5673 791.039 L28.3562 791.039 L28.3562 785.183 L64.0042 785.183 L64.0042 791.039 L58.5296 791.039 Q61.7762 793.172 63.3676 796.004 Q64.9272 798.805 64.9272 802.529 Q64.9272 808.672 61.1078 811.855 Q57.2883 815.038 49.9359 815.038 M27.4968 800.301 L27.4968 800.301 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M35.1993 745.365 Q31.2526 743.169 29.3747 740.114 Q27.4968 737.058 27.4968 732.92 Q27.4968 727.35 31.4117 724.327 Q35.2948 721.303 42.4881 721.303 L64.0042 721.303 L64.0042 727.191 L42.679 727.191 Q37.5546 727.191 35.072 729.005 Q32.5894 730.82 32.5894 734.544 Q32.5894 739.095 35.6131 741.737 Q38.6368 744.379 43.8567 744.379 L64.0042 744.379 L64.0042 750.267 L42.679 750.267 Q37.5228 750.267 35.072 752.081 Q32.5894 753.895 32.5894 757.683 Q32.5894 762.171 35.6449 764.813 Q38.6686 767.454 43.8567 767.454 L64.0042 767.454 L64.0042 773.343 L28.3562 773.343 L28.3562 767.454 L33.8944 767.454 Q30.616 765.449 29.0564 762.648 Q27.4968 759.847 27.4968 755.996 Q27.4968 752.113 29.4702 749.407 Q31.4436 746.67 35.1993 745.365 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M46.212 684.032 Q39.7508 684.032 36.0905 686.705 Q32.3984 689.347 32.3984 693.994 Q32.3984 698.641 36.0905 701.315 Q39.7508 703.956 46.212 703.956 Q52.6732 703.956 56.3653 701.315 Q60.0256 698.641 60.0256 693.994 Q60.0256 689.347 56.3653 686.705 Q52.6732 684.032 46.212 684.032 M33.7671 703.956 Q30.5842 702.11 29.0564 699.309 Q27.4968 696.477 27.4968 692.562 Q27.4968 686.069 32.6531 682.026 Q37.8093 677.952 46.212 677.952 Q54.6147 677.952 59.771 682.026 Q64.9272 686.069 64.9272 692.562 Q64.9272 696.477 63.3994 699.309 Q61.8398 702.11 58.657 703.956 L64.0042 703.956 L64.0042 709.845 L14.479 709.845 L14.479 703.956 L33.7671 703.956 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M44.7161 637.753 L47.5806 637.753 L47.5806 664.68 Q53.6281 664.298 56.8109 661.051 Q59.9619 657.773 59.9619 651.949 Q59.9619 648.575 59.1344 645.424 Q58.3069 642.241 56.6518 639.122 L62.1899 639.122 Q63.5267 642.273 64.227 645.583 Q64.9272 648.893 64.9272 652.299 Q64.9272 660.829 59.9619 665.826 Q54.9967 670.791 46.5303 670.791 Q37.7774 670.791 32.6531 666.08 Q27.4968 661.338 27.4968 653.317 Q27.4968 646.124 32.1438 641.954 Q36.7589 637.753 44.7161 637.753 M42.9973 643.609 Q38.1912 643.673 35.3266 646.315 Q32.4621 648.925 32.4621 653.253 Q32.4621 658.155 35.2312 661.115 Q38.0002 664.043 43.0292 664.489 L42.9973 643.609 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M33.8307 607.484 Q33.2578 608.471 33.0032 609.648 Q32.7167 610.794 32.7167 612.195 Q32.7167 617.16 35.9632 619.834 Q39.1779 622.475 45.2253 622.475 L64.0042 622.475 L64.0042 628.364 L28.3562 628.364 L28.3562 622.475 L33.8944 622.475 Q30.6479 620.629 29.0883 617.669 Q27.4968 614.709 27.4968 610.476 Q27.4968 609.871 27.5923 609.139 Q27.656 608.407 27.8151 607.516 L33.8307 607.484 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip992)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"321.708,86.1857 329.543,87.4968 349.634,88.808 370.073,90.1192 382.782,91.4303 388.254,92.7415 390.309,94.0527 390.863,95.3638 396.321,96.675 396.575,97.9862 398.541,99.2973 408.368,100.608 417.49,101.92 428.869,103.231 430.29,104.542 432.263,105.853 439.115,107.164 439.622,108.475 442.048,109.787 444.379,111.098 444.492,112.409 447.515,113.72 448.568,115.031 449.997,116.342 452.765,117.654 455.407,118.965 456.511,120.276 456.653,121.587 458.93,122.898 459.223,124.209 461.428,125.521 465.032,126.832 465.099,128.143 469.529,129.454 473.446,130.765 474.545,132.076 482.283,133.388 482.747,134.699 485.149,136.01 485.268,137.321 485.939,138.632 489.345,139.943 489.407,141.255 497.118,142.566 497.287,143.877 497.588,145.188 498.012,146.499 498.644,147.81 499.772,149.122 500.705,150.433 501.022,151.744 503.306,153.055 503.922,154.366 504.062,155.677 506.69,156.989 507.368,158.3 507.513,159.611 509.421,160.922 509.661,162.233 511.054,163.544 513.743,164.856 513.939,166.167 516.034,167.478 516.59,168.789 518.327,170.1 520.111,171.411 522.449,172.723 523.395,174.034 523.75,175.345 525.492,175.345 526.373,176.656 527.108,177.967 530.576,179.278 533.001,180.589 533.327,180.589 534.649,181.901 538.953,183.212 541.132,184.523 542.851,185.834 546.593,187.145 549.126,188.456 550.427,189.768 553.418,189.768 560.538,191.079 560.917,192.39 561.293,193.701 561.47,195.012 563.196,196.323 564.538,197.635 564.967,198.946 565.817,200.257 566.496,201.568 566.667,202.879 566.783,204.19 567.215,205.502 573.857,205.502 574.412,206.813 576.56,208.124 577.28,209.435 578.785,210.746 578.881,212.057 580.022,213.369 580.843,214.68 581.447,215.991 582.309,217.302 583.456,218.613 586.566,218.613 586.614,219.924 587.33,221.236 588.927,222.547 590.299,223.858 592.038,223.858 592.251,225.169 594.093,225.169 594.647,225.169 594.915,226.48 597.147,227.791 598.425,229.103 598.584,230.414 600.105,230.414 600.359,230.414 601.135,231.725 602.325,231.725 604.369,233.036 605.299,234.347 605.47,235.658 608.956,236.97 610.25,238.281 610.627,239.592 610.956,240.903 612.152,240.903 613.358,242.214 613.692,243.525 614.523,244.837 614.814,246.148 615.94,247.459 617.154,248.77 617.869,250.081 618.297,251.392 618.78,252.704 620.132,254.015 620.532,255.326 620.775,256.637 621.274,256.637 622.908,257.948 624.384,259.259 627.854,260.571 628.714,261.882 629.54,263.193 630.399,264.504 630.832,265.815 631.215,267.126 632.179,268.438 632.653,268.438 632.727,269.749 634.074,269.749 635.72,271.06 636.019,272.371 636.047,272.371 636.276,273.682 637.579,274.993 638.284,276.304 638.629,277.616 639.491,278.927 639.59,280.238 640.015,281.549 641.121,282.86 642.73,284.171 642.899,284.171 643.403,285.483 643.406,285.483 643.773,286.794 645.832,286.794 646.363,288.105 647.313,289.416 648.163,289.416 648.276,289.416 648.296,290.727 649.912,292.038 649.926,293.35 650.109,294.661 651.299,294.661 652.128,295.972 652.352,295.972 653.781,295.972 653.947,297.283 655.729,298.594 656.549,298.594 657.008,299.905 657.648,301.217 658.2,302.528 658.208,303.839 658.595,305.15 658.822,306.461 658.888,307.772 658.892,309.084 659.092,310.395 659.191,310.395 660.295,310.395 660.438,310.395 660.757,311.706 661.864,313.017 662.714,313.017 663.007,313.017 665.212,313.017 666.305,314.328 667.672,315.639 668.051,316.951 668.203,318.262 668.57,319.573 668.816,319.573 668.883,319.573 669.789,320.884 669.824,322.195 670.603,323.506 670.957,324.818 671.147,326.129 672.239,327.44 672.663,328.751 673.026,330.062 673.228,331.373 673.313,331.373 673.417,332.685 676.755,333.996 677.23,333.996 677.629,335.307 678.016,336.618 678.329,336.618 679.153,337.929 679.626,339.24 680.497,340.552 680.861,341.863 681.083,343.174 682.578,344.485 682.648,345.796 682.911,347.107 684.687,348.419 684.963,349.73 685.344,351.041 685.362,352.352 685.452,353.663 685.602,354.974 686.067,354.974 686.495,356.286 686.531,356.286 687.368,357.597 688.186,358.908 688.806,360.219 688.933,360.219 689.052,360.219 689.723,360.219 690.577,361.53 690.865,362.841 691.587,364.152 691.667,365.464 691.933,366.775 692.939,368.086 693.129,368.086 693.191,368.086 693.334,369.397 693.352,370.708 694.707,372.019 696.92,373.331 700.902,373.331 701.071,373.331 701.372,373.331 701.796,373.331 702.28,374.642 702.428,374.642 702.564,375.953 702.793,377.264 703.556,377.264 703.911,378.575 704.489,378.575 704.806,378.575 704.987,379.886 705.602,381.198 706.202,382.509 707.09,382.509 707.476,383.82 707.706,383.82 707.846,383.82 708.347,385.131 708.476,386.442 708.91,387.753 709.578,389.065 709.674,390.376 710.175,391.687 710.474,391.687 710.729,392.998 711.152,392.998 711.297,392.998 711.595,394.309 712.871,395.62 713.205,395.62 713.446,395.62 714.53,396.932 714.601,398.243 714.838,398.243 717.489,399.554 717.527,399.554 717.528,400.865 717.723,400.865 718.527,402.176 718.58,403.487 719.125,404.799 719.279,406.11 719.818,406.11 720.374,406.11 721.427,407.421 722.111,407.421 723.53,408.732 723.895,408.732 724.181,410.043 726.233,410.043 726.403,411.354 727.179,411.354 727.41,412.666 727.534,412.666 729.953,413.977 730.157,413.977 730.678,415.288 730.892,415.288 731.052,416.599 731.142,417.91 731.3,419.221 731.467,420.533 732.35,421.844 733.144,423.155 733.376,424.466 733.455,425.777 734.36,425.777 734.378,427.088 735.922,428.4 736.437,429.711 736.643,431.022 736.719,432.333 736.785,432.333 737.324,433.644 737.712,434.955 738.183,436.267 738.433,436.267 739.608,437.578 740.17,438.889 741.104,440.2 741.267,441.511 742.371,442.822 742.737,442.822 743.403,444.134 743.584,445.445 744.534,446.756 744.916,446.756 745.118,448.067 745.141,449.378 745.848,450.689 745.933,452 745.988,453.312 746.05,454.623 746.635,454.623 747.007,455.934 747.44,457.245 749.624,458.556 750.377,458.556 750.958,459.867 752.027,461.179 752.138,462.49 752.385,463.801 752.403,465.112 752.91,465.112 752.937,466.423 752.973,467.734 754.211,467.734 754.494,469.046 755.268,470.357 756.249,471.668 756.451,472.979 756.675,474.29 757.111,475.601 757.361,476.913 758.208,478.224 759.42,479.535 759.948,480.846 760.317,482.157 760.598,483.468 760.947,484.78 761.418,486.091 761.775,487.402 763.882,488.713 764.195,490.024 764.322,490.024 764.34,491.335 764.701,491.335 765.077,491.335 765.254,491.335 765.319,492.647 765.482,493.958 766.98,493.958 767.677,495.269 767.926,496.58 767.98,497.891 768.322,497.891 768.751,497.891 768.988,499.202 769.368,500.514 769.601,500.514 769.944,501.825 770.28,501.825 770.451,501.825 770.567,501.825 770.999,501.825 771.177,503.136 772.613,504.447 773.197,505.758 773.201,507.069 773.48,508.381 773.894,509.692 774.021,511.003 775.955,512.314 776.297,513.625 776.538,514.936 777.495,516.248 778.196,516.248 779.721,517.559 780.12,518.87 780.344,518.87 780.867,520.181 781.064,520.181 781.522,521.492 781.542,522.803 782.249,524.115 782.569,524.115 782.665,524.115 783.806,524.115 784.23,525.426 784.335,526.737 784.545,528.048 784.627,528.048 785.231,528.048 785.455,529.359 785.47,530.67 786.093,530.67 786.127,531.982 787.241,531.982 788.349,533.293 790.398,533.293 790.6,534.604 791.114,534.604 791.552,535.915 792.711,535.915 792.808,537.226 792.876,538.537 793.328,539.848 793.382,541.16 794.083,541.16 794.318,542.471 795.597,543.782 796.001,545.093 796.036,545.093 796.849,546.404 797.244,547.715 797.88,549.027 798.083,550.338 798.23,551.649 798.699,551.649 799.226,552.96 800.145,554.271 800.931,554.271 801.328,555.582 801.501,556.894 801.612,558.205 801.95,559.516 802.209,559.516 802.368,559.516 802.946,560.827 803.037,562.138 803.474,563.449 804.427,564.761 804.919,564.761 804.949,566.072 804.975,567.383 804.99,568.694 805.256,570.005 805.283,571.316 805.683,572.628 808.153,572.628 808.585,573.939 809.083,573.939 809.254,573.939 809.489,575.25 810.325,576.561 810.361,577.872 810.958,579.183 811.052,580.495 811.42,581.806 811.906,583.117 812.74,583.117 814.034,583.117 814.208,584.428 814.389,585.739 814.411,585.739 814.74,585.739 814.862,587.05 815.001,588.362 815.249,589.673 816.669,590.984 817.142,590.984 817.476,590.984 818.307,590.984 818.598,590.984 819.117,592.295 819.587,593.606 819.724,593.606 819.995,594.917 820.129,596.229 820.464,597.54 820.648,598.851 820.75,600.162 820.938,600.162 821.653,600.162 822.081,600.162 822.564,600.162 822.98,601.473 823.916,601.473 823.927,602.784 824.134,604.096 824.316,604.096 824.559,604.096 824.603,605.407 825.167,606.718 826.692,606.718 826.896,608.029 827.369,609.34 828.168,609.34 828.451,610.651 828.517,611.963 828.741,613.274 829.036,614.585 831.261,615.896 831.478,617.207 831.638,617.207 831.697,618.518 831.839,619.83 832.498,619.83 832.827,621.141 833.324,621.141 833.42,622.452 834.183,622.452 834.616,622.452 834.999,622.452 835.963,622.452 836.149,623.763 836.511,623.763 837.043,625.074 837.838,626.385 838.343,627.697 838.457,629.008 838.966,630.319 839.131,631.63 839.504,631.63 839.803,631.63 840.06,631.63 840.708,632.941 840.928,634.252 841.104,635.563 841.319,636.875 841.363,636.875 841.783,638.186 842.068,638.186 842.413,638.186 842.628,639.497 842.861,640.808 843.275,640.808 843.374,640.808 843.799,640.808 844.905,640.808 845.013,642.119 845.649,643.43 846.514,643.43 847.187,643.43 847.557,643.43 847.745,644.742 848.139,646.053 848.176,647.364 848.719,648.675 850.147,648.675 850.284,649.986 851.097,649.986 851.128,651.297 852.08,651.297 852.55,652.609 852.691,653.92 852.917,655.231 853.696,655.231 853.71,655.231 853.893,655.231 853.919,656.542 854.35,657.853 854.434,659.164 854.796,660.476 855.185,661.787 855.691,663.098 855.912,663.098 855.951,664.409 855.984,665.72 856.646,667.031 856.808,668.343 857.731,668.343 857.984,669.654 858.451,670.965 859.202,672.276 859.337,673.587 859.513,673.587 860.792,673.587 861.055,674.898 861.102,676.21 861.16,677.521 861.432,677.521 861.984,677.521 861.992,677.521 862.304,678.832 862.379,678.832 862.606,678.832 862.672,678.832 862.676,678.832 862.776,680.143 862.876,680.143 863.044,681.454 863.165,682.765 863.172,684.077 863.734,685.388 863.863,686.699 863.979,688.01 864.46,689.321 864.541,689.321 864.64,690.632 864.756,691.944 865.4,693.255 865.411,694.566 865.648,694.566 866.421,695.877 866.806,697.188 866.999,698.499 867.28,699.811 868.344,701.122 870.089,701.122 870.634,702.433 870.754,703.744 871.124,705.055 871.158,706.366 871.456,706.366 871.835,706.366 871.987,706.366 872.354,706.366 873.573,706.366 873.608,706.366 873.983,707.678 874.387,707.678 874.722,708.989 874.741,708.989 874.931,708.989 875.379,710.3 876.023,710.3 876.235,711.611 876.447,711.611 876.81,711.611 877.012,711.611 877.201,711.611 877.295,712.922 877.81,714.233 878.432,715.545 880.539,715.545 881.413,715.545 881.8,715.545 882.937,715.545 882.939,716.856 883.034,718.167 883.41,718.167 884.281,718.167 884.645,718.167 884.695,719.478 884.867,719.478 885.177,720.789 885.189,722.1 886.362,722.1 886.432,722.1 886.695,722.1 886.849,723.411 887.356,724.723 887.626,726.034 888.025,727.345 888.471,727.345 888.599,728.656 888.747,728.656 889.128,728.656 889.146,728.656 889.237,728.656 889.386,728.656 889.652,729.967 889.999,731.278 890.024,732.59 890.279,732.59 890.595,733.901 891.152,733.901 891.97,733.901 892.178,735.212 892.59,735.212 893.28,736.523 894.361,736.523 894.649,736.523 895.371,736.523 895.451,736.523 895.717,736.523 896.24,737.834 896.561,739.145 896.723,739.145 897.118,739.145 897.136,739.145 897.159,740.457 897.211,741.768 897.961,743.079 898.491,743.079 899.036,744.39 899.502,745.701 899.701,747.012 900.704,747.012 900.777,748.324 902.068,749.635 902.222,750.946 902.359,752.257 903.547,753.568 903.954,754.879 904.284,756.191 904.763,757.502 906.064,757.502 906.349,757.502 906.357,758.813 906.397,760.124 906.577,760.124 907.695,760.124 907.771,761.435 908.771,761.435 909.386,761.435 909.986,761.435 910.694,762.746 911.26,762.746 912.131,762.746 912.26,762.746 912.694,762.746 913.308,764.058 913.362,764.058 913.458,764.058 913.474,765.369 913.959,765.369 914.25,766.68 914.513,766.68 914.527,767.991 915.379,767.991 915.769,769.302 916.58,770.613 916.655,770.613 917.634,771.925 917.941,773.236 918.314,773.236 918.385,773.236 919.558,774.547 919.947,775.858 920.025,777.169 920.452,778.48 920.541,779.792 921.273,779.792 921.312,779.792 921.632,781.103 921.952,782.414 922.184,783.725 922.311,783.725 922.331,785.036 922.364,785.036 922.909,785.036 923.063,785.036 923.922,786.347 924.078,787.659 925.211,787.659 925.562,788.97 925.684,790.281 926.515,791.592 926.844,792.903 927.314,792.903 927.965,792.903 930.187,792.903 931.194,792.903 931.552,794.214 932.339,795.526 933.568,796.837 933.737,796.837 934.462,796.837 934.836,796.837 934.926,796.837 935.084,796.837 935.251,796.837 936.134,796.837 936.928,796.837 937.16,796.837 937.239,796.837 937.318,798.148 937.883,799.459 937.889,800.77 938.162,800.77 939.706,800.77 940.086,802.081 940.221,802.081 940.427,802.081 940.503,802.081 940.521,803.393 941.108,803.393 941.496,803.393 941.967,803.393 942.542,804.704 942.686,806.015 943.275,807.326 943.384,808.637 943.392,808.637 943.656,809.948 943.954,809.948 944.888,809.948 945.051,809.948 946.087,811.259 946.155,811.259 946.58,812.571 946.745,813.882 947.007,815.193 947.187,815.193 947.368,815.193 947.608,816.504 948.318,816.504 948.587,817.815 948.902,817.815 948.925,817.815 948.993,819.126 949.632,819.126 949.717,819.126 949.772,819.126 949.834,819.126 949.895,820.438 950.791,820.438 951.224,820.438 951.396,821.749 952.104,823.06 952.521,824.371 952.735,825.682 953.408,825.682 954.11,826.993 954.259,828.305 954.742,828.305 955.811,828.305 955.922,828.305 955.949,829.616 956.169,829.616 956.187,829.616 956.721,829.616 956.757,829.616 956.823,830.927 957.966,832.238 958.041,833.549 958.278,833.549 958.56,834.86 959.052,834.86 959.688,836.172 959.859,837.483 960.033,837.483 960.235,837.483 960.459,837.483 960.522,838.794 960.895,838.794 961.145,838.794 961.992,838.794 963.204,838.794 963.732,838.794 964.101,838.794 964.382,838.794 964.731,838.794 965.202,838.794 965.559,838.794 966.302,840.105 966.974,841.416 967.666,841.416 967.979,841.416 968.124,841.416 969.053,842.727 969.103,842.727 969.266,842.727 969.741,844.039 969.831,845.35 971.461,845.35 971.71,845.35 971.753,846.661 971.764,846.661 972.772,846.661 973.152,846.661 973.728,846.661 974.364,847.972 974.732,849.283 974.961,849.283 975.32,850.594 975.386,851.906 975.962,853.217 976.397,853.217 976.967,854.528 976.981,854.528 976.985,854.528 977.264,854.528 977.537,855.839 977.678,855.839 977.805,855.839 978.82,857.15 979.233,858.461 979.739,858.461 979.793,859.773 980.081,859.773 980.216,861.084 980.322,861.084 981.279,861.084 982.269,862.395 982.702,863.706 982.798,865.017 982.985,866.328 983.506,866.328 983.904,866.328 984.651,866.328 985.045,867.64 985.306,867.64 985.326,867.64 985.499,868.951 986.033,868.951 986.849,870.262 988.014,870.262 988.119,870.262 988.329,870.262 989.239,870.262 989.254,870.262 989.911,870.262 991.341,871.573 991.567,872.884 992.133,872.884 993.744,874.195 994.384,874.195 995.336,874.195 996.592,874.195 996.616,875.507 996.66,875.507 997.112,875.507 997.166,875.507 997.792,876.818 998.017,878.129 998.102,878.129 998.115,879.44 998.49,880.751 998.672,882.062 999.078,883.374 999.125,884.685 999.381,884.685 999.427,885.996 999.721,887.307 999.785,887.307 1000.09,888.618 1000.63,888.618 1001.03,888.618 1001.66,888.618 1001.87,888.618 1002.01,888.618 1003.01,888.618 1003.93,888.618 1005.11,888.618 1005.28,888.618 1005.4,888.618 1005.73,888.618 1006.22,889.929 1006.52,891.241 1006.73,891.241 1006.82,891.241 1007.2,892.552 1007.26,892.552 1008.21,892.552 1008.73,892.552 1008.76,892.552 1008.77,892.552 1009.04,892.552 1009.07,892.552 1009.28,893.863 1009.47,893.863 1011.97,895.174 1012.37,895.174 1013.27,895.174 1014.11,895.174 1014.15,895.174 1014.74,895.174 1014.84,895.174 1015.2,895.174 1015.69,895.174 1015.99,896.485 1017.99,896.485 1018.17,896.485 1018.65,896.485 1018.78,896.485 1019.03,896.485 1020.06,897.796 1020.45,897.796 1020.49,899.107 1021.7,900.419 1022.9,900.419 1023.35,901.73 1023.37,901.73 1023.78,901.73 1023.91,901.73 1024.25,901.73 1024.43,901.73 1024.48,903.041 1024.53,903.041 1024.89,904.352 1026.76,904.352 1027.71,904.352 1027.92,904.352 1028.39,904.352 1028.95,904.352 1028.95,905.663 1029,906.974 1030.46,908.286 1030.68,908.286 1031.15,908.286 1032.23,908.286 1032.3,908.286 1032.53,908.286 1032.82,908.286 1033.46,909.597 1035.04,909.597 1035.26,909.597 1035.29,910.908 1035.48,910.908 1035.62,910.908 1036.61,910.908 1036.98,912.219 1037.2,912.219 1039.93,912.219 1040.83,912.219 1041.62,912.219 1041.97,913.53 1042.13,913.53 1042.24,913.53 1042.75,913.53 1042.92,913.53 1043.09,914.841 1044.49,914.841 1044.71,914.841 1044.89,914.841 1045.09,916.153 1045.1,916.153 1045.57,916.153 1045.76,917.464 1046.41,917.464 1046.64,917.464 1047.94,918.775 1048.8,918.775 1049.09,920.086 1049.1,921.397 1049.43,921.397 1050.07,922.708 1051.52,924.02 1051.53,924.02 1051.92,924.02 1051.96,924.02 1052.5,924.02 1054.07,924.02 1054.26,925.331 1054.62,926.642 1054.91,926.642 1056.33,926.642 1056.48,926.642 1056.63,927.953 1056.7,927.953 1057.7,927.953 1058.13,927.953 1058.22,927.953 1058.58,927.953 1058.97,927.953 1059.47,927.953 1059.73,927.953 1059.77,927.953 1059.77,929.264 1060.13,930.575 1060.43,930.575 1060.59,930.575 1060.87,931.887 1061.47,933.198 1061.77,933.198 1062.24,933.198 1062.99,933.198 1063.12,933.198 1064.16,934.509 1064.38,935.82 1064.64,937.131 1064.84,937.131 1064.89,937.131 1064.94,937.131 1066.09,937.131 1066.16,938.442 1066.56,938.442 1066.83,938.442 1066.95,938.442 1066.96,938.442 1067.44,939.754 1067.52,939.754 1067.65,939.754 1067.76,939.754 1068.24,939.754 1068.42,939.754 1068.54,939.754 1069.18,939.754 1069.19,939.754 1069.58,941.065 1069.67,942.376 1070.21,942.376 1070.59,942.376 1070.71,943.687 1070.78,943.687 1071.06,943.687 1072.13,943.687 1074.42,943.687 1074.54,943.687 1074.64,944.998 1074.91,944.998 1074.94,944.998 1074.97,946.309 1075.38,947.621 1077.4,948.932 1077.77,948.932 1078.51,948.932 1079.16,948.932 1079.87,950.243 1080.02,950.243 1080.96,951.554 1081.07,952.865 1081.08,952.865 1081.14,954.176 1081.51,955.488 1081.59,955.488 1082.22,955.488 1086.03,956.799 1086.47,958.11 1086.58,959.421 1086.72,959.421 1086.82,959.421 1088.07,960.732 1088.48,960.732 1088.96,960.732 1088.97,960.732 1090.63,960.732 1091.14,960.732 1091.41,960.732 1091.81,960.732 1092.38,960.732 1093.44,960.732 1093.78,960.732 1093.81,960.732 1094.38,960.732 1095.56,962.043 1095.66,963.355 1095.96,963.355 1097.06,963.355 1097.4,964.666 1100.02,964.666 1100.35,964.666 1100.94,964.666 1101,964.666 1101.75,964.666 1102.82,964.666 1102.88,965.977 1103.29,965.977 1103.49,965.977 1104.56,965.977 1104.57,967.288 1105.04,968.599 1105.85,968.599 1106.01,968.599 1106.14,968.599 1107.33,968.599 1107.74,968.599 1108.07,968.599 1108.55,968.599 1109.11,969.91 1110.14,969.91 1110.18,969.91 1111.56,969.91 1114.48,969.91 1117.09,969.91 1117.26,969.91 1118.01,971.222 1118.03,971.222 1118.31,971.222 1118.76,972.533 1119.55,972.533 1120.36,972.533 1121.42,972.533 1121.73,972.533 1123.34,972.533 1123.73,972.533 1123.81,972.533 1124.24,972.533 1124.32,972.533 1125.42,972.533 1125.74,972.533 1125.97,972.533 1126.12,972.533 1126.12,973.844 1127.01,975.155 1127.2,976.466 1127.71,976.466 1127.86,976.466 1128.01,977.777 1129.35,977.777 1129.47,977.777 1130.3,977.777 1130.63,977.777 1131.7,979.089 1132.9,980.4 1133.76,981.711 1135.34,981.711 1135.51,983.022 1135.82,984.333 1136.12,984.333 1136.98,985.644 1137.35,985.644 1140.89,986.956 1141.1,986.956 1141.15,988.267 1141.45,989.578 1141.45,990.889 1141.67,990.889 1141.67,990.889 1143.65,992.2 1143.87,992.2 1144.31,992.2 1145.19,993.511 1146.09,994.822 1146.33,994.822 1146.47,994.822 1147.06,994.822 1147.09,996.134 1147.12,997.445 1147.17,997.445 1147.44,997.445 1149.87,997.445 1150.03,998.756 1150.36,998.756 1150.53,998.756 1150.79,998.756 1151.39,998.756 1152.37,998.756 1152.78,998.756 1153.28,1000.07 1153.68,1000.07 1155.18,1000.07 1155.38,1001.38 1155.89,1001.38 1156.31,1001.38 1156.52,1001.38 1157.89,1001.38 1157.92,1002.69 1158.04,1002.69 1159.73,1002.69 1160.61,1002.69 1161.53,1004 1161.75,1004 1161.83,1004 1162.34,1004 1163.47,1004 1163.64,1004 1163.96,1005.31 1164.03,1006.62 1164.31,1006.62 1166.33,1007.93 1166.85,1009.25 1166.95,1010.56 1168.97,1011.87 1170.09,1011.87 1170.58,1013.18 1170.76,1013.18 1172.84,1013.18 1173.52,1013.18 1173.62,1013.18 1175.54,1013.18 1176.41,1014.49 1178.15,1014.49 1178.52,1014.49 1179.1,1014.49 1179.17,1014.49 1179.54,1015.8 1179.75,1015.8 1180.48,1017.11 1180.75,1017.11 1181.32,1017.11 1181.86,1018.42 1182.6,1018.42 1183.02,1018.42 1183.58,1018.42 1184,1018.42 1186.05,1018.42 1186.49,1018.42 1186.58,1018.42 1186.77,1018.42 1188.83,1018.42 1189.28,1018.42 1190.63,1018.42 1191.03,1019.73 1193.01,1021.05 1195.13,1021.05 1195.35,1021.05 1197.24,1022.36 1197.53,1022.36 1200.4,1022.36 1201.58,1022.36 1201.77,1023.67 1201.8,1023.67 1201.9,1023.67 1202.27,1023.67 1202.46,1023.67 1202.86,1023.67 1202.91,1023.67 1203.21,1023.67 1203.51,1023.67 1203.87,1023.67 1205.96,1024.98 1206.94,1026.29 1210,1026.29 1210.3,1026.29 1210.63,1027.6 1210.98,1027.6 1211.26,1028.91 1213.06,1028.91 1213.72,1030.22 1215.75,1030.22 1219.77,1030.22 1221.89,1031.54 1223.85,1031.54 1224.27,1031.54 1225.49,1031.54 1227.13,1031.54 1228.27,1031.54 1228.68,1031.54 1232.74,1031.54 1232.78,1031.54 1233.54,1032.85 1234.24,1032.85 1235.85,1034.16 1237.25,1034.16 1239.07,1034.16 1240.04,1035.47 1240.77,1035.47 1242.46,1036.78 1245.75,1036.78 1245.77,1038.09 1246.88,1038.09 1248.88,1038.09 1249.51,1039.4 1249.54,1039.4 1251.72,1039.4 1252.87,1039.4 1252.89,1039.4 1253.85,1039.4 1255.18,1040.71 1255.3,1040.71 1257.09,1042.02 1258.04,1042.02 1258.41,1042.02 1258.68,1043.34 1260.41,1043.34 1263.56,1043.34 1263.92,1043.34 1264.66,1043.34 1265.25,1043.34 1266.52,1044.65 1267.95,1044.65 1268.16,1044.65 1268.42,1044.65 1269.94,1044.65 1271.22,1044.65 1273.1,1045.96 1273.36,1045.96 1273.46,1045.96 1273.8,1047.27 1274.49,1047.27 1278.43,1047.27 1278.76,1047.27 1279.17,1047.27 1281.18,1047.27 1282.28,1048.58 1283.65,1048.58 1284.75,1048.58 1284.85,1048.58 1284.92,1048.58 1285.29,1048.58 1288.99,1049.89 1289.82,1049.89 1290.26,1049.89 1290.36,1049.89 1291.85,1049.89 1294.83,1051.2 1298.66,1052.51 1299.35,1052.51 1299.45,1052.51 1301.19,1052.51 1302.98,1053.82 1304.72,1055.14 1305.71,1056.45 1306.62,1057.76 1306.66,1057.76 1308.36,1057.76 1308.83,1057.76 1311.72,1059.07 1312.89,1059.07 1321.79,1059.07 1322.54,1059.07 1329.9,1059.07 1330.79,1059.07 1330.98,1059.07 1331.19,1060.38 1331.8,1060.38 1332.02,1061.69 1335.48,1061.69 1336.68,1061.69 1337.55,1061.69 1338.89,1063 1339.29,1063 1339.6,1063 1340.23,1064.31 1340.77,1064.31 1344.67,1064.31 1344.93,1064.31 1345.23,1064.31 1345.23,1064.31 1347.43,1064.31 1348.98,1064.31 1349.87,1064.31 1350.87,1064.31 1350.9,1064.31 1353.71,1065.63 1353.81,1065.63 1355.42,1066.94 1357.07,1066.94 1359.17,1066.94 1361.71,1066.94 1365.31,1066.94 1367.74,1066.94 1367.81,1066.94 1369.41,1068.25 1370.12,1068.25 1370.64,1068.25 1370.73,1068.25 1371.32,1069.56 1372.75,1069.56 1374.36,1069.56 1380.19,1069.56 1383.33,1069.56 1384.27,1069.56 1385.65,1069.56 1387.26,1070.87 1394.82,1070.87 1395.52,1072.18 1396.8,1072.18 1396.95,1073.49 1401.02,1073.49 1405.55,1073.49 1409.74,1073.49 1410.72,1073.49 1414.42,1073.49 1415.04,1073.49 1417.5,1073.49 1423.3,1074.8 1425.67,1074.8 1434.66,1076.11 1434.99,1077.43 1437.32,1077.43 1439.64,1077.43 1443.83,1077.43 1446.24,1077.43 1449.55,1077.43 1453.29,1077.43 1455.37,1078.74 1458.24,1080.05 1458.97,1080.05 1460.88,1080.05 1462.46,1080.05 1470.31,1080.05 1476.89,1080.05 1477.59,1080.05 1480.09,1081.36 1485.03,1082.67 1486.07,1082.67 1492.78,1082.67 1498.61,1082.67 1502.44,1082.67 1506.76,1082.67 1508.51,1082.67 1509.5,1082.67 1510.41,1082.67 1515.5,1082.67 1519.39,1083.98 1534.98,1083.98 1535.8,1083.98 1542.67,1083.98 1543.57,1085.29 1544.02,1085.29 1557.49,1085.29 1557.87,1086.6 1559.2,1086.6 1572.39,1087.92 1573.19,1087.92 1575.11,1087.92 1591.05,1087.92 1595.95,1089.23 1599.3,1089.23 1600.74,1089.23 1609.38,1090.54 1626.52,1091.85 1627.08,1091.85 1638.44,1091.85 1638.77,1091.85 1654.4,1093.16 1659.16,1093.16 1662.03,1093.16 1681.14,1094.47 1683.88,1094.47 1683.92,1095.78 1685.15,1097.09 1688.82,1097.09 1723.17,1097.09 1730.18,1098.4 1745.88,1099.72 1747.35,1099.72 1753.78,1101.03 1761.66,1101.03 1766.12,1102.34 1769.19,1103.65 1776.17,1103.65 1799.74,1103.65 1813.17,1103.65 1814.94,1104.96 1830.3,1104.96 1838.45,1106.27 1842.4,1107.58 1858.18,1107.58 1884.93,1107.58 1887.71,1107.58 1888.93,1107.58 1913.15,1108.89 1933.96,1108.89 1949.66,1108.89 1957.56,1108.89 1969.9,1108.89 1972.97,1108.89 2018.72,1108.89 2042.23,1108.89 2046.19,1108.89 2089.82,1110.2 2116.93,1110.2 2205.37,1111.52 2293.6,1111.52 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"321.708,1371.13 329.543,1369.82 349.634,1368.5 370.073,1367.19 382.782,1365.88 388.254,1364.57 390.309,1363.26 390.863,1361.95 396.321,1360.64 396.575,1359.33 398.541,1358.01 408.368,1356.7 417.49,1355.39 428.869,1354.08 430.29,1352.77 432.263,1351.46 439.115,1350.15 439.622,1348.84 442.048,1347.53 444.379,1346.21 444.492,1344.9 447.515,1343.59 448.568,1342.28 449.997,1340.97 452.765,1339.66 455.407,1338.35 456.511,1337.04 456.653,1335.73 458.93,1334.41 459.223,1333.1 461.428,1331.79 465.032,1330.48 465.099,1329.17 469.529,1327.86 473.446,1326.55 474.545,1325.24 482.283,1323.92 482.747,1322.61 485.149,1321.3 485.268,1319.99 485.939,1318.68 489.345,1317.37 489.407,1316.06 497.118,1314.75 497.287,1313.44 497.588,1312.12 498.012,1310.81 498.644,1309.5 499.772,1308.19 500.705,1306.88 501.022,1305.57 503.306,1304.26 503.922,1302.95 504.062,1301.63 506.69,1300.32 507.368,1299.01 507.513,1297.7 509.421,1296.39 509.661,1295.08 511.054,1293.77 513.743,1292.46 513.939,1291.15 516.034,1289.83 516.59,1288.52 518.327,1287.21 520.111,1285.9 522.449,1284.59 523.395,1283.28 523.75,1281.97 525.492,1283.28 525.492,1284.59 525.492,1285.9 525.492,1287.21 525.492,1288.52 525.492,1289.83 525.492,1291.15 525.492,1292.46 525.492,1293.77 525.492,1295.08 526.373,1293.77 527.108,1292.46 530.576,1291.15 533.001,1289.83 533.327,1291.15 534.649,1289.83 538.953,1288.52 541.132,1287.21 542.851,1285.9 546.593,1284.59 549.126,1283.28 550.427,1281.97 553.418,1283.28 560.538,1281.97 560.917,1280.66 561.293,1279.35 561.47,1278.03 563.196,1276.72 564.538,1275.41 564.967,1274.1 565.817,1272.79 566.496,1271.48 566.667,1270.17 566.783,1268.86 567.215,1267.54 573.857,1268.86 574.412,1267.54 576.56,1266.23 577.28,1264.92 578.785,1263.61 578.881,1262.3 580.022,1260.99 580.843,1259.68 581.447,1258.37 582.309,1257.06 583.456,1255.74 586.566,1257.06 586.614,1255.74 587.33,1254.43 588.927,1253.12 590.299,1251.81 592.038,1253.12 592.251,1251.81 594.093,1253.12 594.647,1254.43 594.915,1253.12 597.147,1251.81 598.425,1250.5 598.584,1249.19 600.105,1250.5 600.359,1251.81 601.135,1250.5 602.325,1251.81 604.369,1250.5 605.299,1249.19 605.47,1247.88 608.956,1246.57 610.25,1245.25 610.627,1243.94 610.956,1242.63 612.152,1243.94 613.358,1242.63 613.692,1241.32 614.523,1240.01 614.814,1238.7 615.94,1237.39 617.154,1236.08 617.869,1234.77 618.297,1233.45 618.78,1232.14 620.132,1230.83 620.532,1229.52 620.775,1228.21 621.274,1229.52 622.908,1228.21 624.384,1226.9 627.854,1225.59 628.714,1224.28 629.54,1222.97 630.399,1221.65 630.832,1220.34 631.215,1219.03 632.179,1217.72 632.653,1219.03 632.727,1217.72 634.074,1219.03 635.72,1217.72 636.019,1216.41 636.047,1217.72 636.276,1216.41 637.579,1215.1 638.284,1213.79 638.629,1212.48 639.491,1211.16 639.59,1209.85 640.015,1208.54 641.121,1207.23 642.73,1205.92 642.899,1207.23 643.403,1205.92 643.406,1207.23 643.773,1205.92 645.832,1207.23 646.363,1205.92 647.313,1204.61 648.163,1205.92 648.276,1207.23 648.296,1205.92 649.912,1204.61 649.926,1203.3 650.109,1201.99 651.299,1203.3 652.128,1201.99 652.352,1203.3 653.781,1204.61 653.947,1203.3 655.729,1201.99 656.549,1203.3 657.008,1201.99 657.648,1200.68 658.2,1199.36 658.208,1198.05 658.595,1196.74 658.822,1195.43 658.888,1194.12 658.892,1192.81 659.092,1191.5 659.191,1192.81 660.295,1194.12 660.438,1195.43 660.757,1194.12 661.864,1192.81 662.714,1194.12 663.007,1195.43 665.212,1196.74 666.305,1195.43 667.672,1194.12 668.051,1192.81 668.203,1191.5 668.57,1190.19 668.816,1191.5 668.883,1192.81 669.789,1191.5 669.824,1190.19 670.603,1188.87 670.957,1187.56 671.147,1186.25 672.239,1184.94 672.663,1183.63 673.026,1182.32 673.228,1181.01 673.313,1182.32 673.417,1181.01 676.755,1179.7 677.23,1181.01 677.629,1179.7 678.016,1178.39 678.329,1179.7 679.153,1178.39 679.626,1177.07 680.497,1175.76 680.861,1174.45 681.083,1173.14 682.578,1171.83 682.648,1170.52 682.911,1169.21 684.687,1167.9 684.963,1166.59 685.344,1165.27 685.362,1163.96 685.452,1162.65 685.602,1161.34 686.067,1162.65 686.495,1161.34 686.531,1162.65 687.368,1161.34 688.186,1160.03 688.806,1158.72 688.933,1160.03 689.052,1161.34 689.723,1162.65 690.577,1161.34 690.865,1160.03 691.587,1158.72 691.667,1157.41 691.933,1156.1 692.939,1154.78 693.129,1156.1 693.191,1157.41 693.334,1156.1 693.352,1154.78 694.707,1153.47 696.92,1152.16 700.902,1153.47 701.071,1154.78 701.372,1156.1 701.796,1157.41 702.28,1156.1 702.428,1157.41 702.564,1156.1 702.793,1154.78 703.556,1156.1 703.911,1154.78 704.489,1156.1 704.806,1157.41 704.987,1156.1 705.602,1154.78 706.202,1153.47 707.09,1154.78 707.476,1153.47 707.706,1154.78 707.846,1156.1 708.347,1154.78 708.476,1153.47 708.91,1152.16 709.578,1150.85 709.674,1149.54 710.175,1148.23 710.474,1149.54 710.729,1148.23 711.152,1149.54 711.297,1150.85 711.595,1149.54 712.871,1148.23 713.205,1149.54 713.446,1150.85 714.53,1149.54 714.601,1148.23 714.838,1149.54 717.489,1148.23 717.527,1149.54 717.528,1148.23 717.723,1149.54 718.527,1148.23 718.58,1146.92 719.125,1145.61 719.279,1144.3 719.818,1145.61 720.374,1146.92 721.427,1145.61 722.111,1146.92 723.53,1145.61 723.895,1146.92 724.181,1145.61 726.233,1146.92 726.403,1145.61 727.179,1146.92 727.41,1145.61 727.534,1146.92 729.953,1145.61 730.157,1146.92 730.678,1145.61 730.892,1146.92 731.052,1145.61 731.142,1144.3 731.3,1142.98 731.467,1141.67 732.35,1140.36 733.144,1139.05 733.376,1137.74 733.455,1136.43 734.36,1137.74 734.378,1136.43 735.922,1135.12 736.437,1133.81 736.643,1132.49 736.719,1131.18 736.785,1132.49 737.324,1131.18 737.712,1129.87 738.183,1128.56 738.433,1129.87 739.608,1128.56 740.17,1127.25 741.104,1125.94 741.267,1124.63 742.371,1123.32 742.737,1124.63 743.403,1123.32 743.584,1122.01 744.534,1120.69 744.916,1122.01 745.118,1120.69 745.141,1119.38 745.848,1118.07 745.933,1116.76 745.988,1115.45 746.05,1114.14 746.635,1115.45 747.007,1114.14 747.44,1112.83 749.624,1111.52 750.377,1112.83 750.958,1111.52 752.027,1110.2 752.138,1108.89 752.385,1107.58 752.403,1106.27 752.91,1107.58 752.937,1106.27 752.973,1104.96 754.211,1106.27 754.494,1104.96 755.268,1103.65 756.249,1102.34 756.451,1101.03 756.675,1099.72 757.111,1098.4 757.361,1097.09 758.208,1095.78 759.42,1094.47 759.948,1093.16 760.317,1091.85 760.598,1090.54 760.947,1089.23 761.418,1087.92 761.775,1086.6 763.882,1085.29 764.195,1083.98 764.322,1085.29 764.34,1083.98 764.701,1085.29 765.077,1086.6 765.254,1087.92 765.319,1086.6 765.482,1085.29 766.98,1086.6 767.677,1085.29 767.926,1083.98 767.98,1082.67 768.322,1083.98 768.751,1085.29 768.988,1083.98 769.368,1082.67 769.601,1083.98 769.944,1082.67 770.28,1083.98 770.451,1085.29 770.567,1086.6 770.999,1087.92 771.177,1086.6 772.613,1085.29 773.197,1083.98 773.201,1082.67 773.48,1081.36 773.894,1080.05 774.021,1078.74 775.955,1077.43 776.297,1076.11 776.538,1074.8 777.495,1073.49 778.196,1074.8 779.721,1073.49 780.12,1072.18 780.344,1073.49 780.867,1072.18 781.064,1073.49 781.522,1072.18 781.542,1070.87 782.249,1069.56 782.569,1070.87 782.665,1072.18 783.806,1073.49 784.23,1072.18 784.335,1070.87 784.545,1069.56 784.627,1070.87 785.231,1072.18 785.455,1070.87 785.47,1069.56 786.093,1070.87 786.127,1069.56 787.241,1070.87 788.349,1069.56 790.398,1070.87 790.6,1069.56 791.114,1070.87 791.552,1069.56 792.711,1070.87 792.808,1069.56 792.876,1068.25 793.328,1066.94 793.382,1065.63 794.083,1066.94 794.318,1065.63 795.597,1064.31 796.001,1063 796.036,1064.31 796.849,1063 797.244,1061.69 797.88,1060.38 798.083,1059.07 798.23,1057.76 798.699,1059.07 799.226,1057.76 800.145,1056.45 800.931,1057.76 801.328,1056.45 801.501,1055.14 801.612,1053.82 801.95,1052.51 802.209,1053.82 802.368,1055.14 802.946,1053.82 803.037,1052.51 803.474,1051.2 804.427,1049.89 804.919,1051.2 804.949,1049.89 804.975,1048.58 804.99,1047.27 805.256,1045.96 805.283,1044.65 805.683,1043.34 808.153,1044.65 808.585,1043.34 809.083,1044.65 809.254,1045.96 809.489,1044.65 810.325,1043.34 810.361,1042.02 810.958,1040.71 811.052,1039.4 811.42,1038.09 811.906,1036.78 812.74,1038.09 814.034,1039.4 814.208,1038.09 814.389,1036.78 814.411,1038.09 814.74,1039.4 814.862,1038.09 815.001,1036.78 815.249,1035.47 816.669,1034.16 817.142,1035.47 817.476,1036.78 818.307,1038.09 818.598,1039.4 819.117,1038.09 819.587,1036.78 819.724,1038.09 819.995,1036.78 820.129,1035.47 820.464,1034.16 820.648,1032.85 820.75,1031.54 820.938,1032.85 821.653,1034.16 822.081,1035.47 822.564,1036.78 822.98,1035.47 823.916,1036.78 823.927,1035.47 824.134,1034.16 824.316,1035.47 824.559,1036.78 824.603,1035.47 825.167,1034.16 826.692,1035.47 826.896,1034.16 827.369,1032.85 828.168,1034.16 828.451,1032.85 828.517,1031.54 828.741,1030.22 829.036,1028.91 831.261,1027.6 831.478,1026.29 831.638,1027.6 831.697,1026.29 831.839,1024.98 832.498,1026.29 832.827,1024.98 833.324,1026.29 833.42,1024.98 834.183,1026.29 834.616,1027.6 834.999,1028.91 835.963,1030.22 836.149,1028.91 836.511,1030.22 837.043,1028.91 837.838,1027.6 838.343,1026.29 838.457,1024.98 838.966,1023.67 839.131,1022.36 839.504,1023.67 839.803,1024.98 840.06,1026.29 840.708,1024.98 840.928,1023.67 841.104,1022.36 841.319,1021.05 841.363,1022.36 841.783,1021.05 842.068,1022.36 842.413,1023.67 842.628,1022.36 842.861,1021.05 843.275,1022.36 843.374,1023.67 843.799,1024.98 844.905,1026.29 845.013,1024.98 845.649,1023.67 846.514,1024.98 847.187,1026.29 847.557,1027.6 847.745,1026.29 848.139,1024.98 848.176,1023.67 848.719,1022.36 850.147,1023.67 850.284,1022.36 851.097,1023.67 851.128,1022.36 852.08,1023.67 852.55,1022.36 852.691,1021.05 852.917,1019.73 853.696,1021.05 853.71,1022.36 853.893,1023.67 853.919,1022.36 854.35,1021.05 854.434,1019.73 854.796,1018.42 855.185,1017.11 855.691,1015.8 855.912,1017.11 855.951,1015.8 855.984,1014.49 856.646,1013.18 856.808,1011.87 857.731,1013.18 857.984,1011.87 858.451,1010.56 859.202,1009.25 859.337,1007.93 859.513,1009.25 860.792,1010.56 861.055,1009.25 861.102,1007.93 861.16,1006.62 861.432,1007.93 861.984,1009.25 861.992,1010.56 862.304,1009.25 862.379,1010.56 862.606,1011.87 862.672,1013.18 862.676,1014.49 862.776,1013.18 862.876,1014.49 863.044,1013.18 863.165,1011.87 863.172,1010.56 863.734,1009.25 863.863,1007.93 863.979,1006.62 864.46,1005.31 864.541,1006.62 864.64,1005.31 864.756,1004 865.4,1002.69 865.411,1001.38 865.648,1002.69 866.421,1001.38 866.806,1000.07 866.999,998.756 867.28,997.445 868.344,996.134 870.089,997.445 870.634,996.134 870.754,994.822 871.124,993.511 871.158,992.2 871.456,993.511 871.835,994.822 871.987,996.134 872.354,997.445 873.573,998.756 873.608,1000.07 873.983,998.756 874.387,1000.07 874.722,998.756 874.741,1000.07 874.931,1001.38 875.379,1000.07 876.023,1001.38 876.235,1000.07 876.447,1001.38 876.81,1002.69 877.012,1004 877.201,1005.31 877.295,1004 877.81,1002.69 878.432,1001.38 880.539,1002.69 881.413,1004 881.8,1005.31 882.937,1006.62 882.939,1005.31 883.034,1004 883.41,1005.31 884.281,1006.62 884.645,1007.93 884.695,1006.62 884.867,1007.93 885.177,1006.62 885.189,1005.31 886.362,1006.62 886.432,1007.93 886.695,1009.25 886.849,1007.93 887.356,1006.62 887.626,1005.31 888.025,1004 888.471,1005.31 888.599,1004 888.747,1005.31 889.128,1006.62 889.146,1007.93 889.237,1009.25 889.386,1010.56 889.652,1009.25 889.999,1007.93 890.024,1006.62 890.279,1007.93 890.595,1006.62 891.152,1007.93 891.97,1009.25 892.178,1007.93 892.59,1009.25 893.28,1007.93 894.361,1009.25 894.649,1010.56 895.371,1011.87 895.451,1013.18 895.717,1014.49 896.24,1013.18 896.561,1011.87 896.723,1013.18 897.118,1014.49 897.136,1015.8 897.159,1014.49 897.211,1013.18 897.961,1011.87 898.491,1013.18 899.036,1011.87 899.502,1010.56 899.701,1009.25 900.704,1010.56 900.777,1009.25 902.068,1007.93 902.222,1006.62 902.359,1005.31 903.547,1004 903.954,1002.69 904.284,1001.38 904.763,1000.07 906.064,1001.38 906.349,1002.69 906.357,1001.38 906.397,1000.07 906.577,1001.38 907.695,1002.69 907.771,1001.38 908.771,1002.69 909.386,1004 909.986,1005.31 910.694,1004 911.26,1005.31 912.131,1006.62 912.26,1007.93 912.694,1009.25 913.308,1007.93 913.362,1009.25 913.458,1010.56 913.474,1009.25 913.959,1010.56 914.25,1009.25 914.513,1010.56 914.527,1009.25 915.379,1010.56 915.769,1009.25 916.58,1007.93 916.655,1009.25 917.634,1007.93 917.941,1006.62 918.314,1007.93 918.385,1009.25 919.558,1007.93 919.947,1006.62 920.025,1005.31 920.452,1004 920.541,1002.69 921.273,1004 921.312,1005.31 921.632,1004 921.952,1002.69 922.184,1001.38 922.311,1002.69 922.331,1001.38 922.364,1002.69 922.909,1004 923.063,1005.31 923.922,1004 924.078,1002.69 925.211,1004 925.562,1002.69 925.684,1001.38 926.515,1000.07 926.844,998.756 927.314,1000.07 927.965,1001.38 930.187,1002.69 931.194,1004 931.552,1002.69 932.339,1001.38 933.568,1000.07 933.737,1001.38 934.462,1002.69 934.836,1004 934.926,1005.31 935.084,1006.62 935.251,1007.93 936.134,1009.25 936.928,1010.56 937.16,1011.87 937.239,1013.18 937.318,1011.87 937.883,1010.56 937.889,1009.25 938.162,1010.56 939.706,1011.87 940.086,1010.56 940.221,1011.87 940.427,1013.18 940.503,1014.49 940.521,1013.18 941.108,1014.49 941.496,1015.8 941.967,1017.11 942.542,1015.8 942.686,1014.49 943.275,1013.18 943.384,1011.87 943.392,1013.18 943.656,1011.87 943.954,1013.18 944.888,1014.49 945.051,1015.8 946.087,1014.49 946.155,1015.8 946.58,1014.49 946.745,1013.18 947.007,1011.87 947.187,1013.18 947.368,1014.49 947.608,1013.18 948.318,1014.49 948.587,1013.18 948.902,1014.49 948.925,1015.8 948.993,1014.49 949.632,1015.8 949.717,1017.11 949.772,1018.42 949.834,1019.73 949.895,1018.42 950.791,1019.73 951.224,1021.05 951.396,1019.73 952.104,1018.42 952.521,1017.11 952.735,1015.8 953.408,1017.11 954.11,1015.8 954.259,1014.49 954.742,1015.8 955.811,1017.11 955.922,1018.42 955.949,1017.11 956.169,1018.42 956.187,1019.73 956.721,1021.05 956.757,1022.36 956.823,1021.05 957.966,1019.73 958.041,1018.42 958.278,1019.73 958.56,1018.42 959.052,1019.73 959.688,1018.42 959.859,1017.11 960.033,1018.42 960.235,1019.73 960.459,1021.05 960.522,1019.73 960.895,1021.05 961.145,1022.36 961.992,1023.67 963.204,1024.98 963.732,1026.29 964.101,1027.6 964.382,1028.91 964.731,1030.22 965.202,1031.54 965.559,1032.85 966.302,1031.54 966.974,1030.22 967.666,1031.54 967.979,1032.85 968.124,1034.16 969.053,1032.85 969.103,1034.16 969.266,1035.47 969.741,1034.16 969.831,1032.85 971.461,1034.16 971.71,1035.47 971.753,1034.16 971.764,1035.47 972.772,1036.78 973.152,1038.09 973.728,1039.4 974.364,1038.09 974.732,1036.78 974.961,1038.09 975.32,1036.78 975.386,1035.47 975.962,1034.16 976.397,1035.47 976.967,1034.16 976.981,1035.47 976.985,1036.78 977.264,1038.09 977.537,1036.78 977.678,1038.09 977.805,1039.4 978.82,1038.09 979.233,1036.78 979.739,1038.09 979.793,1036.78 980.081,1038.09 980.216,1036.78 980.322,1038.09 981.279,1039.4 982.269,1038.09 982.702,1036.78 982.798,1035.47 982.985,1034.16 983.506,1035.47 983.904,1036.78 984.651,1038.09 985.045,1036.78 985.306,1038.09 985.326,1039.4 985.499,1038.09 986.033,1039.4 986.849,1038.09 988.014,1039.4 988.119,1040.71 988.329,1042.02 989.239,1043.34 989.254,1044.65 989.911,1045.96 991.341,1044.65 991.567,1043.34 992.133,1044.65 993.744,1043.34 994.384,1044.65 995.336,1045.96 996.592,1047.27 996.616,1045.96 996.66,1047.27 997.112,1048.58 997.166,1049.89 997.792,1048.58 998.017,1047.27 998.102,1048.58 998.115,1047.27 998.49,1045.96 998.672,1044.65 999.078,1043.34 999.125,1042.02 999.381,1043.34 999.427,1042.02 999.721,1040.71 999.785,1042.02 1000.09,1040.71 1000.63,1042.02 1001.03,1043.34 1001.66,1044.65 1001.87,1045.96 1002.01,1047.27 1003.01,1048.58 1003.93,1049.89 1005.11,1051.2 1005.28,1052.51 1005.4,1053.82 1005.73,1055.14 1006.22,1053.82 1006.52,1052.51 1006.73,1053.82 1006.82,1055.14 1007.2,1053.82 1007.26,1055.14 1008.21,1056.45 1008.73,1057.76 1008.76,1059.07 1008.77,1060.38 1009.04,1061.69 1009.07,1063 1009.28,1061.69 1009.47,1063 1011.97,1061.69 1012.37,1063 1013.27,1064.31 1014.11,1065.63 1014.15,1066.94 1014.74,1068.25 1014.84,1069.56 1015.2,1070.87 1015.69,1072.18 1015.99,1070.87 1017.99,1072.18 1018.17,1073.49 1018.65,1074.8 1018.78,1076.11 1019.03,1077.43 1020.06,1076.11 1020.45,1077.43 1020.49,1076.11 1021.7,1074.8 1022.9,1076.11 1023.35,1074.8 1023.37,1076.11 1023.78,1077.43 1023.91,1078.74 1024.25,1080.05 1024.43,1081.36 1024.48,1080.05 1024.53,1081.36 1024.89,1080.05 1026.76,1081.36 1027.71,1082.67 1027.92,1083.98 1028.39,1085.29 1028.95,1086.6 1028.95,1085.29 1029,1083.98 1030.46,1082.67 1030.68,1083.98 1031.15,1085.29 1032.23,1086.6 1032.3,1087.92 1032.53,1089.23 1032.82,1090.54 1033.46,1089.23 1035.04,1090.54 1035.26,1091.85 1035.29,1090.54 1035.48,1091.85 1035.62,1093.16 1036.61,1094.47 1036.98,1093.16 1037.2,1094.47 1039.93,1095.78 1040.83,1097.09 1041.62,1098.4 1041.97,1097.09 1042.13,1098.4 1042.24,1099.72 1042.75,1101.03 1042.92,1102.34 1043.09,1101.03 1044.49,1102.34 1044.71,1103.65 1044.89,1104.96 1045.09,1103.65 1045.1,1104.96 1045.57,1106.27 1045.76,1104.96 1046.41,1106.27 1046.64,1107.58 1047.94,1106.27 1048.8,1107.58 1049.09,1106.27 1049.1,1104.96 1049.43,1106.27 1050.07,1104.96 1051.52,1103.65 1051.53,1104.96 1051.92,1106.27 1051.96,1107.58 1052.5,1108.89 1054.07,1110.2 1054.26,1108.89 1054.62,1107.58 1054.91,1108.89 1056.33,1110.2 1056.48,1111.52 1056.63,1110.2 1056.7,1111.52 1057.7,1112.83 1058.13,1114.14 1058.22,1115.45 1058.58,1116.76 1058.97,1118.07 1059.47,1119.38 1059.73,1120.69 1059.77,1122.01 1059.77,1120.69 1060.13,1119.38 1060.43,1120.69 1060.59,1122.01 1060.87,1120.69 1061.47,1119.38 1061.77,1120.69 1062.24,1122.01 1062.99,1123.32 1063.12,1124.63 1064.16,1123.32 1064.38,1122.01 1064.64,1120.69 1064.84,1122.01 1064.89,1123.32 1064.94,1124.63 1066.09,1125.94 1066.16,1124.63 1066.56,1125.94 1066.83,1127.25 1066.95,1128.56 1066.96,1129.87 1067.44,1128.56 1067.52,1129.87 1067.65,1131.18 1067.76,1132.49 1068.24,1133.81 1068.42,1135.12 1068.54,1136.43 1069.18,1137.74 1069.19,1139.05 1069.58,1137.74 1069.67,1136.43 1070.21,1137.74 1070.59,1139.05 1070.71,1137.74 1070.78,1139.05 1071.06,1140.36 1072.13,1141.67 1074.42,1142.98 1074.54,1144.3 1074.64,1142.98 1074.91,1144.3 1074.94,1145.61 1074.97,1144.3 1075.38,1142.98 1077.4,1141.67 1077.77,1142.98 1078.51,1144.3 1079.16,1145.61 1079.87,1144.3 1080.02,1145.61 1080.96,1144.3 1081.07,1142.98 1081.08,1144.3 1081.14,1142.98 1081.51,1141.67 1081.59,1142.98 1082.22,1144.3 1086.03,1142.98 1086.47,1141.67 1086.58,1140.36 1086.72,1141.67 1086.82,1142.98 1088.07,1141.67 1088.48,1142.98 1088.96,1144.3 1088.97,1145.61 1090.63,1146.92 1091.14,1148.23 1091.41,1149.54 1091.81,1150.85 1092.38,1152.16 1093.44,1153.47 1093.78,1154.78 1093.81,1156.1 1094.38,1157.41 1095.56,1156.1 1095.66,1154.78 1095.96,1156.1 1097.06,1157.41 1097.4,1156.1 1100.02,1157.41 1100.35,1158.72 1100.94,1160.03 1101,1161.34 1101.75,1162.65 1102.82,1163.96 1102.88,1162.65 1103.29,1163.96 1103.49,1165.27 1104.56,1166.59 1104.57,1165.27 1105.04,1163.96 1105.85,1165.27 1106.01,1166.59 1106.14,1167.9 1107.33,1169.21 1107.74,1170.52 1108.07,1171.83 1108.55,1173.14 1109.11,1171.83 1110.14,1173.14 1110.18,1174.45 1111.56,1175.76 1114.48,1177.07 1117.09,1178.39 1117.26,1179.7 1118.01,1178.39 1118.03,1179.7 1118.31,1181.01 1118.76,1179.7 1119.55,1181.01 1120.36,1182.32 1121.42,1183.63 1121.73,1184.94 1123.34,1186.25 1123.73,1187.56 1123.81,1188.87 1124.24,1190.19 1124.32,1191.5 1125.42,1192.81 1125.74,1194.12 1125.97,1195.43 1126.12,1196.74 1126.12,1195.43 1127.01,1194.12 1127.2,1192.81 1127.71,1194.12 1127.86,1195.43 1128.01,1194.12 1129.35,1195.43 1129.47,1196.74 1130.3,1198.05 1130.63,1199.36 1131.7,1198.05 1132.9,1196.74 1133.76,1195.43 1135.34,1196.74 1135.51,1195.43 1135.82,1194.12 1136.12,1195.43 1136.98,1194.12 1137.35,1195.43 1140.89,1194.12 1141.1,1195.43 1141.15,1194.12 1141.45,1192.81 1141.45,1191.5 1141.67,1192.81 1141.67,1194.12 1143.65,1192.81 1143.87,1194.12 1144.31,1195.43 1145.19,1194.12 1146.09,1192.81 1146.33,1194.12 1146.47,1195.43 1147.06,1196.74 1147.09,1195.43 1147.12,1194.12 1147.17,1195.43 1147.44,1196.74 1149.87,1198.05 1150.03,1196.74 1150.36,1198.05 1150.53,1199.36 1150.79,1200.68 1151.39,1201.99 1152.37,1203.3 1152.78,1204.61 1153.28,1203.3 1153.68,1204.61 1155.18,1205.92 1155.38,1204.61 1155.89,1205.92 1156.31,1207.23 1156.52,1208.54 1157.89,1209.85 1157.92,1208.54 1158.04,1209.85 1159.73,1211.16 1160.61,1212.48 1161.53,1211.16 1161.75,1212.48 1161.83,1213.79 1162.34,1215.1 1163.47,1216.41 1163.64,1217.72 1163.96,1216.41 1164.03,1215.1 1164.31,1216.41 1166.33,1215.1 1166.85,1213.79 1166.95,1212.48 1168.97,1211.16 1170.09,1212.48 1170.58,1211.16 1170.76,1212.48 1172.84,1213.79 1173.52,1215.1 1173.62,1216.41 1175.54,1217.72 1176.41,1216.41 1178.15,1217.72 1178.52,1219.03 1179.1,1220.34 1179.17,1221.65 1179.54,1220.34 1179.75,1221.65 1180.48,1220.34 1180.75,1221.65 1181.32,1222.97 1181.86,1221.65 1182.6,1222.97 1183.02,1224.28 1183.58,1225.59 1184,1226.9 1186.05,1228.21 1186.49,1229.52 1186.58,1230.83 1186.77,1232.14 1188.83,1233.45 1189.28,1234.77 1190.63,1236.08 1191.03,1234.77 1193.01,1233.45 1195.13,1234.77 1195.35,1236.08 1197.24,1234.77 1197.53,1236.08 1200.4,1237.39 1201.58,1238.7 1201.77,1237.39 1201.8,1238.7 1201.9,1240.01 1202.27,1241.32 1202.46,1242.63 1202.86,1243.94 1202.91,1245.25 1203.21,1246.57 1203.51,1247.88 1203.87,1249.19 1205.96,1247.88 1206.94,1246.57 1210,1247.88 1210.3,1249.19 1210.63,1247.88 1210.98,1249.19 1211.26,1247.88 1213.06,1249.19 1213.72,1247.88 1215.75,1249.19 1219.77,1250.5 1221.89,1249.19 1223.85,1250.5 1224.27,1251.81 1225.49,1253.12 1227.13,1254.43 1228.27,1255.74 1228.68,1257.06 1232.74,1258.37 1232.78,1259.68 1233.54,1258.37 1234.24,1259.68 1235.85,1258.37 1237.25,1259.68 1239.07,1260.99 1240.04,1259.68 1240.77,1260.99 1242.46,1259.68 1245.75,1260.99 1245.77,1259.68 1246.88,1260.99 1248.88,1262.3 1249.51,1260.99 1249.54,1262.3 1251.72,1263.61 1252.87,1264.92 1252.89,1266.23 1253.85,1267.54 1255.18,1266.23 1255.3,1267.54 1257.09,1266.23 1258.04,1267.54 1258.41,1268.86 1258.68,1267.54 1260.41,1268.86 1263.56,1270.17 1263.92,1271.48 1264.66,1272.79 1265.25,1274.1 1266.52,1272.79 1267.95,1274.1 1268.16,1275.41 1268.42,1276.72 1269.94,1278.03 1271.22,1279.35 1273.1,1278.03 1273.36,1279.35 1273.46,1280.66 1273.8,1279.35 1274.49,1280.66 1278.43,1281.97 1278.76,1283.28 1279.17,1284.59 1281.18,1285.9 1282.28,1284.59 1283.65,1285.9 1284.75,1287.21 1284.85,1288.52 1284.92,1289.83 1285.29,1291.15 1288.99,1289.83 1289.82,1291.15 1290.26,1292.46 1290.36,1293.77 1291.85,1295.08 1294.83,1293.77 1298.66,1292.46 1299.35,1293.77 1299.45,1295.08 1301.19,1296.39 1302.98,1295.08 1304.72,1293.77 1305.71,1292.46 1306.62,1291.15 1306.66,1292.46 1308.36,1293.77 1308.83,1295.08 1311.72,1293.77 1312.89,1295.08 1321.79,1296.39 1322.54,1297.7 1329.9,1299.01 1330.79,1300.32 1330.98,1301.63 1331.19,1300.32 1331.8,1301.63 1332.02,1300.32 1335.48,1301.63 1336.68,1302.95 1337.55,1304.26 1338.89,1302.95 1339.29,1304.26 1339.6,1305.57 1340.23,1304.26 1340.77,1305.57 1344.67,1306.88 1344.93,1308.19 1345.23,1309.5 1345.23,1310.81 1347.43,1312.12 1348.98,1313.44 1349.87,1314.75 1350.87,1316.06 1350.9,1317.37 1353.71,1316.06 1353.81,1317.37 1355.42,1316.06 1357.07,1317.37 1359.17,1318.68 1361.71,1319.99 1365.31,1321.3 1367.74,1322.61 1367.81,1323.92 1369.41,1322.61 1370.12,1323.92 1370.64,1325.24 1370.73,1326.55 1371.32,1325.24 1372.75,1326.55 1374.36,1327.86 1380.19,1329.17 1383.33,1330.48 1384.27,1331.79 1385.65,1333.1 1387.26,1331.79 1394.82,1333.1 1395.52,1331.79 1396.8,1333.1 1396.95,1331.79 1401.02,1333.1 1405.55,1334.41 1409.74,1335.73 1410.72,1337.04 1414.42,1338.35 1415.04,1339.66 1417.5,1340.97 1423.3,1339.66 1425.67,1340.97 1434.66,1339.66 1434.99,1338.35 1437.32,1339.66 1439.64,1340.97 1443.83,1342.28 1446.24,1343.59 1449.55,1344.9 1453.29,1346.21 1455.37,1344.9 1458.24,1343.59 1458.97,1344.9 1460.88,1346.21 1462.46,1347.53 1470.31,1348.84 1476.89,1350.15 1477.59,1351.46 1480.09,1350.15 1485.03,1348.84 1486.07,1350.15 1492.78,1351.46 1498.61,1352.77 1502.44,1354.08 1506.76,1355.39 1508.51,1356.7 1509.5,1358.01 1510.41,1359.33 1515.5,1360.64 1519.39,1359.33 1534.98,1360.64 1535.8,1361.95 1542.67,1363.26 1543.57,1361.95 1544.02,1363.26 1557.49,1364.57 1557.87,1363.26 1559.2,1364.57 1572.39,1363.26 1573.19,1364.57 1575.11,1365.88 1591.05,1367.19 1595.95,1365.88 1599.3,1367.19 1600.74,1368.5 1609.38,1367.19 1626.52,1365.88 1627.08,1367.19 1638.44,1368.5 1638.77,1369.82 1654.4,1368.5 1659.16,1369.82 1662.03,1371.13 1681.14,1369.82 1683.88,1371.13 1683.92,1369.82 1685.15,1368.5 1688.82,1369.82 1723.17,1371.13 1730.18,1369.82 1745.88,1368.5 1747.35,1369.82 1753.78,1368.5 1761.66,1369.82 1766.12,1368.5 1769.19,1367.19 1776.17,1368.5 1799.74,1369.82 1813.17,1371.13 1814.94,1369.82 1830.3,1371.13 1838.45,1369.82 1842.4,1368.5 1858.18,1369.82 1884.93,1371.13 1887.71,1372.44 1888.93,1373.75 1913.15,1372.44 1933.96,1373.75 1949.66,1375.06 1957.56,1376.37 1969.9,1377.68 1972.97,1378.99 2018.72,1380.3 2042.23,1381.62 2046.19,1382.93 2089.82,1381.62 2116.93,1382.93 2205.37,1381.62 2293.6,1382.93 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"321.708,1384.24 329.543,1384.24 349.634,1384.24 370.073,1384.24 382.782,1384.24 388.254,1384.24 390.309,1384.24 390.863,1384.24 396.321,1384.24 396.575,1384.24 398.541,1384.24 408.368,1384.24 417.49,1384.24 428.869,1384.24 430.29,1384.24 432.263,1384.24 439.115,1384.24 439.622,1384.24 442.048,1384.24 444.379,1384.24 444.492,1384.24 447.515,1384.24 448.568,1384.24 449.997,1384.24 452.765,1384.24 455.407,1384.24 456.511,1384.24 456.653,1384.24 458.93,1384.24 459.223,1384.24 461.428,1384.24 465.032,1384.24 465.099,1384.24 469.529,1384.24 473.446,1384.24 474.545,1384.24 482.283,1384.24 482.747,1384.24 485.149,1384.24 485.268,1384.24 485.939,1384.24 489.345,1384.24 489.407,1384.24 497.118,1384.24 497.287,1384.24 497.588,1384.24 498.012,1384.24 498.644,1384.24 499.772,1384.24 500.705,1384.24 501.022,1384.24 503.306,1384.24 503.922,1384.24 504.062,1384.24 506.69,1384.24 507.368,1384.24 507.513,1384.24 509.421,1384.24 509.661,1384.24 511.054,1384.24 513.743,1384.24 513.939,1384.24 516.034,1384.24 516.59,1384.24 518.327,1384.24 520.111,1384.24 522.449,1384.24 523.395,1384.24 523.75,1384.24 525.492,1382.93 525.492,1381.62 525.492,1380.3 525.492,1378.99 525.492,1377.68 525.492,1376.37 525.492,1375.06 525.492,1373.75 525.492,1372.44 525.492,1371.13 526.373,1371.13 527.108,1371.13 530.576,1371.13 533.001,1371.13 533.327,1369.82 534.649,1369.82 538.953,1369.82 541.132,1369.82 542.851,1369.82 546.593,1369.82 549.126,1369.82 550.427,1369.82 553.418,1368.5 560.538,1368.5 560.917,1368.5 561.293,1368.5 561.47,1368.5 563.196,1368.5 564.538,1368.5 564.967,1368.5 565.817,1368.5 566.496,1368.5 566.667,1368.5 566.783,1368.5 567.215,1368.5 573.857,1367.19 574.412,1367.19 576.56,1367.19 577.28,1367.19 578.785,1367.19 578.881,1367.19 580.022,1367.19 580.843,1367.19 581.447,1367.19 582.309,1367.19 583.456,1367.19 586.566,1365.88 586.614,1365.88 587.33,1365.88 588.927,1365.88 590.299,1365.88 592.038,1364.57 592.251,1364.57 594.093,1363.26 594.647,1361.95 594.915,1361.95 597.147,1361.95 598.425,1361.95 598.584,1361.95 600.105,1360.64 600.359,1359.33 601.135,1359.33 602.325,1358.01 604.369,1358.01 605.299,1358.01 605.47,1358.01 608.956,1358.01 610.25,1358.01 610.627,1358.01 610.956,1358.01 612.152,1356.7 613.358,1356.7 613.692,1356.7 614.523,1356.7 614.814,1356.7 615.94,1356.7 617.154,1356.7 617.869,1356.7 618.297,1356.7 618.78,1356.7 620.132,1356.7 620.532,1356.7 620.775,1356.7 621.274,1355.39 622.908,1355.39 624.384,1355.39 627.854,1355.39 628.714,1355.39 629.54,1355.39 630.399,1355.39 630.832,1355.39 631.215,1355.39 632.179,1355.39 632.653,1354.08 632.727,1354.08 634.074,1352.77 635.72,1352.77 636.019,1352.77 636.047,1351.46 636.276,1351.46 637.579,1351.46 638.284,1351.46 638.629,1351.46 639.491,1351.46 639.59,1351.46 640.015,1351.46 641.121,1351.46 642.73,1351.46 642.899,1350.15 643.403,1350.15 643.406,1348.84 643.773,1348.84 645.832,1347.53 646.363,1347.53 647.313,1347.53 648.163,1346.21 648.276,1344.9 648.296,1344.9 649.912,1344.9 649.926,1344.9 650.109,1344.9 651.299,1343.59 652.128,1343.59 652.352,1342.28 653.781,1340.97 653.947,1340.97 655.729,1340.97 656.549,1339.66 657.008,1339.66 657.648,1339.66 658.2,1339.66 658.208,1339.66 658.595,1339.66 658.822,1339.66 658.888,1339.66 658.892,1339.66 659.092,1339.66 659.191,1338.35 660.295,1337.04 660.438,1335.73 660.757,1335.73 661.864,1335.73 662.714,1334.41 663.007,1333.1 665.212,1331.79 666.305,1331.79 667.672,1331.79 668.051,1331.79 668.203,1331.79 668.57,1331.79 668.816,1330.48 668.883,1329.17 669.789,1329.17 669.824,1329.17 670.603,1329.17 670.957,1329.17 671.147,1329.17 672.239,1329.17 672.663,1329.17 673.026,1329.17 673.228,1329.17 673.313,1327.86 673.417,1327.86 676.755,1327.86 677.23,1326.55 677.629,1326.55 678.016,1326.55 678.329,1325.24 679.153,1325.24 679.626,1325.24 680.497,1325.24 680.861,1325.24 681.083,1325.24 682.578,1325.24 682.648,1325.24 682.911,1325.24 684.687,1325.24 684.963,1325.24 685.344,1325.24 685.362,1325.24 685.452,1325.24 685.602,1325.24 686.067,1323.92 686.495,1323.92 686.531,1322.61 687.368,1322.61 688.186,1322.61 688.806,1322.61 688.933,1321.3 689.052,1319.99 689.723,1318.68 690.577,1318.68 690.865,1318.68 691.587,1318.68 691.667,1318.68 691.933,1318.68 692.939,1318.68 693.129,1317.37 693.191,1316.06 693.334,1316.06 693.352,1316.06 694.707,1316.06 696.92,1316.06 700.902,1314.75 701.071,1313.44 701.372,1312.12 701.796,1310.81 702.28,1310.81 702.428,1309.5 702.564,1309.5 702.793,1309.5 703.556,1308.19 703.911,1308.19 704.489,1306.88 704.806,1305.57 704.987,1305.57 705.602,1305.57 706.202,1305.57 707.09,1304.26 707.476,1304.26 707.706,1302.95 707.846,1301.63 708.347,1301.63 708.476,1301.63 708.91,1301.63 709.578,1301.63 709.674,1301.63 710.175,1301.63 710.474,1300.32 710.729,1300.32 711.152,1299.01 711.297,1297.7 711.595,1297.7 712.871,1297.7 713.205,1296.39 713.446,1295.08 714.53,1295.08 714.601,1295.08 714.838,1293.77 717.489,1293.77 717.527,1292.46 717.528,1292.46 717.723,1291.15 718.527,1291.15 718.58,1291.15 719.125,1291.15 719.279,1291.15 719.818,1289.83 720.374,1288.52 721.427,1288.52 722.111,1287.21 723.53,1287.21 723.895,1285.9 724.181,1285.9 726.233,1284.59 726.403,1284.59 727.179,1283.28 727.41,1283.28 727.534,1281.97 729.953,1281.97 730.157,1280.66 730.678,1280.66 730.892,1279.35 731.052,1279.35 731.142,1279.35 731.3,1279.35 731.467,1279.35 732.35,1279.35 733.144,1279.35 733.376,1279.35 733.455,1279.35 734.36,1278.03 734.378,1278.03 735.922,1278.03 736.437,1278.03 736.643,1278.03 736.719,1278.03 736.785,1276.72 737.324,1276.72 737.712,1276.72 738.183,1276.72 738.433,1275.41 739.608,1275.41 740.17,1275.41 741.104,1275.41 741.267,1275.41 742.371,1275.41 742.737,1274.1 743.403,1274.1 743.584,1274.1 744.534,1274.1 744.916,1272.79 745.118,1272.79 745.141,1272.79 745.848,1272.79 745.933,1272.79 745.988,1272.79 746.05,1272.79 746.635,1271.48 747.007,1271.48 747.44,1271.48 749.624,1271.48 750.377,1270.17 750.958,1270.17 752.027,1270.17 752.138,1270.17 752.385,1270.17 752.403,1270.17 752.91,1268.86 752.937,1268.86 752.973,1268.86 754.211,1267.54 754.494,1267.54 755.268,1267.54 756.249,1267.54 756.451,1267.54 756.675,1267.54 757.111,1267.54 757.361,1267.54 758.208,1267.54 759.42,1267.54 759.948,1267.54 760.317,1267.54 760.598,1267.54 760.947,1267.54 761.418,1267.54 761.775,1267.54 763.882,1267.54 764.195,1267.54 764.322,1266.23 764.34,1266.23 764.701,1264.92 765.077,1263.61 765.254,1262.3 765.319,1262.3 765.482,1262.3 766.98,1260.99 767.677,1260.99 767.926,1260.99 767.98,1260.99 768.322,1259.68 768.751,1258.37 768.988,1258.37 769.368,1258.37 769.601,1257.06 769.944,1257.06 770.28,1255.74 770.451,1254.43 770.567,1253.12 770.999,1251.81 771.177,1251.81 772.613,1251.81 773.197,1251.81 773.201,1251.81 773.48,1251.81 773.894,1251.81 774.021,1251.81 775.955,1251.81 776.297,1251.81 776.538,1251.81 777.495,1251.81 778.196,1250.5 779.721,1250.5 780.12,1250.5 780.344,1249.19 780.867,1249.19 781.064,1247.88 781.522,1247.88 781.542,1247.88 782.249,1247.88 782.569,1246.57 782.665,1245.25 783.806,1243.94 784.23,1243.94 784.335,1243.94 784.545,1243.94 784.627,1242.63 785.231,1241.32 785.455,1241.32 785.47,1241.32 786.093,1240.01 786.127,1240.01 787.241,1238.7 788.349,1238.7 790.398,1237.39 790.6,1237.39 791.114,1236.08 791.552,1236.08 792.711,1234.77 792.808,1234.77 792.876,1234.77 793.328,1234.77 793.382,1234.77 794.083,1233.45 794.318,1233.45 795.597,1233.45 796.001,1233.45 796.036,1232.14 796.849,1232.14 797.244,1232.14 797.88,1232.14 798.083,1232.14 798.23,1232.14 798.699,1230.83 799.226,1230.83 800.145,1230.83 800.931,1229.52 801.328,1229.52 801.501,1229.52 801.612,1229.52 801.95,1229.52 802.209,1228.21 802.368,1226.9 802.946,1226.9 803.037,1226.9 803.474,1226.9 804.427,1226.9 804.919,1225.59 804.949,1225.59 804.975,1225.59 804.99,1225.59 805.256,1225.59 805.283,1225.59 805.683,1225.59 808.153,1224.28 808.585,1224.28 809.083,1222.97 809.254,1221.65 809.489,1221.65 810.325,1221.65 810.361,1221.65 810.958,1221.65 811.052,1221.65 811.42,1221.65 811.906,1221.65 812.74,1220.34 814.034,1219.03 814.208,1219.03 814.389,1219.03 814.411,1217.72 814.74,1216.41 814.862,1216.41 815.001,1216.41 815.249,1216.41 816.669,1216.41 817.142,1215.1 817.476,1213.79 818.307,1212.48 818.598,1211.16 819.117,1211.16 819.587,1211.16 819.724,1209.85 819.995,1209.85 820.129,1209.85 820.464,1209.85 820.648,1209.85 820.75,1209.85 820.938,1208.54 821.653,1207.23 822.081,1205.92 822.564,1204.61 822.98,1204.61 823.916,1203.3 823.927,1203.3 824.134,1203.3 824.316,1201.99 824.559,1200.68 824.603,1200.68 825.167,1200.68 826.692,1199.36 826.896,1199.36 827.369,1199.36 828.168,1198.05 828.451,1198.05 828.517,1198.05 828.741,1198.05 829.036,1198.05 831.261,1198.05 831.478,1198.05 831.638,1196.74 831.697,1196.74 831.839,1196.74 832.498,1195.43 832.827,1195.43 833.324,1194.12 833.42,1194.12 834.183,1192.81 834.616,1191.5 834.999,1190.19 835.963,1188.87 836.149,1188.87 836.511,1187.56 837.043,1187.56 837.838,1187.56 838.343,1187.56 838.457,1187.56 838.966,1187.56 839.131,1187.56 839.504,1186.25 839.803,1184.94 840.06,1183.63 840.708,1183.63 840.928,1183.63 841.104,1183.63 841.319,1183.63 841.363,1182.32 841.783,1182.32 842.068,1181.01 842.413,1179.7 842.628,1179.7 842.861,1179.7 843.275,1178.39 843.374,1177.07 843.799,1175.76 844.905,1174.45 845.013,1174.45 845.649,1174.45 846.514,1173.14 847.187,1171.83 847.557,1170.52 847.745,1170.52 848.139,1170.52 848.176,1170.52 848.719,1170.52 850.147,1169.21 850.284,1169.21 851.097,1167.9 851.128,1167.9 852.08,1166.59 852.55,1166.59 852.691,1166.59 852.917,1166.59 853.696,1165.27 853.71,1163.96 853.893,1162.65 853.919,1162.65 854.35,1162.65 854.434,1162.65 854.796,1162.65 855.185,1162.65 855.691,1162.65 855.912,1161.34 855.951,1161.34 855.984,1161.34 856.646,1161.34 856.808,1161.34 857.731,1160.03 857.984,1160.03 858.451,1160.03 859.202,1160.03 859.337,1160.03 859.513,1158.72 860.792,1157.41 861.055,1157.41 861.102,1157.41 861.16,1157.41 861.432,1156.1 861.984,1154.78 861.992,1153.47 862.304,1153.47 862.379,1152.16 862.606,1150.85 862.672,1149.54 862.676,1148.23 862.776,1148.23 862.876,1146.92 863.044,1146.92 863.165,1146.92 863.172,1146.92 863.734,1146.92 863.863,1146.92 863.979,1146.92 864.46,1146.92 864.541,1145.61 864.64,1145.61 864.756,1145.61 865.4,1145.61 865.411,1145.61 865.648,1144.3 866.421,1144.3 866.806,1144.3 866.999,1144.3 867.28,1144.3 868.344,1144.3 870.089,1142.98 870.634,1142.98 870.754,1142.98 871.124,1142.98 871.158,1142.98 871.456,1141.67 871.835,1140.36 871.987,1139.05 872.354,1137.74 873.573,1136.43 873.608,1135.12 873.983,1135.12 874.387,1133.81 874.722,1133.81 874.741,1132.49 874.931,1131.18 875.379,1131.18 876.023,1129.87 876.235,1129.87 876.447,1128.56 876.81,1127.25 877.012,1125.94 877.201,1124.63 877.295,1124.63 877.81,1124.63 878.432,1124.63 880.539,1123.32 881.413,1122.01 881.8,1120.69 882.937,1119.38 882.939,1119.38 883.034,1119.38 883.41,1118.07 884.281,1116.76 884.645,1115.45 884.695,1115.45 884.867,1114.14 885.177,1114.14 885.189,1114.14 886.362,1112.83 886.432,1111.52 886.695,1110.2 886.849,1110.2 887.356,1110.2 887.626,1110.2 888.025,1110.2 888.471,1108.89 888.599,1108.89 888.747,1107.58 889.128,1106.27 889.146,1104.96 889.237,1103.65 889.386,1102.34 889.652,1102.34 889.999,1102.34 890.024,1102.34 890.279,1101.03 890.595,1101.03 891.152,1099.72 891.97,1098.4 892.178,1098.4 892.59,1097.09 893.28,1097.09 894.361,1095.78 894.649,1094.47 895.371,1093.16 895.451,1091.85 895.717,1090.54 896.24,1090.54 896.561,1090.54 896.723,1089.23 897.118,1087.92 897.136,1086.6 897.159,1086.6 897.211,1086.6 897.961,1086.6 898.491,1085.29 899.036,1085.29 899.502,1085.29 899.701,1085.29 900.704,1083.98 900.777,1083.98 902.068,1083.98 902.222,1083.98 902.359,1083.98 903.547,1083.98 903.954,1083.98 904.284,1083.98 904.763,1083.98 906.064,1082.67 906.349,1081.36 906.357,1081.36 906.397,1081.36 906.577,1080.05 907.695,1078.74 907.771,1078.74 908.771,1077.43 909.386,1076.11 909.986,1074.8 910.694,1074.8 911.26,1073.49 912.131,1072.18 912.26,1070.87 912.694,1069.56 913.308,1069.56 913.362,1068.25 913.458,1066.94 913.474,1066.94 913.959,1065.63 914.25,1065.63 914.513,1064.31 914.527,1064.31 915.379,1063 915.769,1063 916.58,1063 916.655,1061.69 917.634,1061.69 917.941,1061.69 918.314,1060.38 918.385,1059.07 919.558,1059.07 919.947,1059.07 920.025,1059.07 920.452,1059.07 920.541,1059.07 921.273,1057.76 921.312,1056.45 921.632,1056.45 921.952,1056.45 922.184,1056.45 922.311,1055.14 922.331,1055.14 922.364,1053.82 922.909,1052.51 923.063,1051.2 923.922,1051.2 924.078,1051.2 925.211,1049.89 925.562,1049.89 925.684,1049.89 926.515,1049.89 926.844,1049.89 927.314,1048.58 927.965,1047.27 930.187,1045.96 931.194,1044.65 931.552,1044.65 932.339,1044.65 933.568,1044.65 933.737,1043.34 934.462,1042.02 934.836,1040.71 934.926,1039.4 935.084,1038.09 935.251,1036.78 936.134,1035.47 936.928,1034.16 937.16,1032.85 937.239,1031.54 937.318,1031.54 937.883,1031.54 937.889,1031.54 938.162,1030.22 939.706,1028.91 940.086,1028.91 940.221,1027.6 940.427,1026.29 940.503,1024.98 940.521,1024.98 941.108,1023.67 941.496,1022.36 941.967,1021.05 942.542,1021.05 942.686,1021.05 943.275,1021.05 943.384,1021.05 943.392,1019.73 943.656,1019.73 943.954,1018.42 944.888,1017.11 945.051,1015.8 946.087,1015.8 946.155,1014.49 946.58,1014.49 946.745,1014.49 947.007,1014.49 947.187,1013.18 947.368,1011.87 947.608,1011.87 948.318,1010.56 948.587,1010.56 948.902,1009.25 948.925,1007.93 948.993,1007.93 949.632,1006.62 949.717,1005.31 949.772,1004 949.834,1002.69 949.895,1002.69 950.791,1001.38 951.224,1000.07 951.396,1000.07 952.104,1000.07 952.521,1000.07 952.735,1000.07 953.408,998.756 954.11,998.756 954.259,998.756 954.742,997.445 955.811,996.134 955.922,994.822 955.949,994.822 956.169,993.511 956.187,992.2 956.721,990.889 956.757,989.578 956.823,989.578 957.966,989.578 958.041,989.578 958.278,988.267 958.56,988.267 959.052,986.956 959.688,986.956 959.859,986.956 960.033,985.644 960.235,984.333 960.459,983.022 960.522,983.022 960.895,981.711 961.145,980.4 961.992,979.089 963.204,977.777 963.732,976.466 964.101,975.155 964.382,973.844 964.731,972.533 965.202,971.222 965.559,969.91 966.302,969.91 966.974,969.91 967.666,968.599 967.979,967.288 968.124,965.977 969.053,965.977 969.103,964.666 969.266,963.355 969.741,963.355 969.831,963.355 971.461,962.043 971.71,960.732 971.753,960.732 971.764,959.421 972.772,958.11 973.152,956.799 973.728,955.488 974.364,955.488 974.732,955.488 974.961,954.176 975.32,954.176 975.386,954.176 975.962,954.176 976.397,952.865 976.967,952.865 976.981,951.554 976.985,950.243 977.264,948.932 977.537,948.932 977.678,947.621 977.805,946.309 978.82,946.309 979.233,946.309 979.739,944.998 979.793,944.998 980.081,943.687 980.216,943.687 980.322,942.376 981.279,941.065 982.269,941.065 982.702,941.065 982.798,941.065 982.985,941.065 983.506,939.754 983.904,938.442 984.651,937.131 985.045,937.131 985.306,935.82 985.326,934.509 985.499,934.509 986.033,933.198 986.849,933.198 988.014,931.887 988.119,930.575 988.329,929.264 989.239,927.953 989.254,926.642 989.911,925.331 991.341,925.331 991.567,925.331 992.133,924.02 993.744,924.02 994.384,922.708 995.336,921.397 996.592,920.086 996.616,920.086 996.66,918.775 997.112,917.464 997.166,916.153 997.792,916.153 998.017,916.153 998.102,914.841 998.115,914.841 998.49,914.841 998.672,914.841 999.078,914.841 999.125,914.841 999.381,913.53 999.427,913.53 999.721,913.53 999.785,912.219 1000.09,912.219 1000.63,910.908 1001.03,909.597 1001.66,908.286 1001.87,906.974 1002.01,905.663 1003.01,904.352 1003.93,903.041 1005.11,901.73 1005.28,900.419 1005.4,899.107 1005.73,897.796 1006.22,897.796 1006.52,897.796 1006.73,896.485 1006.82,895.174 1007.2,895.174 1007.26,893.863 1008.21,892.552 1008.73,891.241 1008.76,889.929 1008.77,888.618 1009.04,887.307 1009.07,885.996 1009.28,885.996 1009.47,884.685 1011.97,884.685 1012.37,883.374 1013.27,882.062 1014.11,880.751 1014.15,879.44 1014.74,878.129 1014.84,876.818 1015.2,875.507 1015.69,874.195 1015.99,874.195 1017.99,872.884 1018.17,871.573 1018.65,870.262 1018.78,868.951 1019.03,867.64 1020.06,867.64 1020.45,866.328 1020.49,866.328 1021.7,866.328 1022.9,865.017 1023.35,865.017 1023.37,863.706 1023.78,862.395 1023.91,861.084 1024.25,859.773 1024.43,858.461 1024.48,858.461 1024.53,857.15 1024.89,857.15 1026.76,855.839 1027.71,854.528 1027.92,853.217 1028.39,851.906 1028.95,850.594 1028.95,850.594 1029,850.594 1030.46,850.594 1030.68,849.283 1031.15,847.972 1032.23,846.661 1032.3,845.35 1032.53,844.039 1032.82,842.727 1033.46,842.727 1035.04,841.416 1035.26,840.105 1035.29,840.105 1035.48,838.794 1035.62,837.483 1036.61,836.172 1036.98,836.172 1037.2,834.86 1039.93,833.549 1040.83,832.238 1041.62,830.927 1041.97,830.927 1042.13,829.616 1042.24,828.305 1042.75,826.993 1042.92,825.682 1043.09,825.682 1044.49,824.371 1044.71,823.06 1044.89,821.749 1045.09,821.749 1045.1,820.438 1045.57,819.126 1045.76,819.126 1046.41,817.815 1046.64,816.504 1047.94,816.504 1048.8,815.193 1049.09,815.193 1049.1,815.193 1049.43,813.882 1050.07,813.882 1051.52,813.882 1051.53,812.571 1051.92,811.259 1051.96,809.948 1052.5,808.637 1054.07,807.326 1054.26,807.326 1054.62,807.326 1054.91,806.015 1056.33,804.704 1056.48,803.393 1056.63,803.393 1056.7,802.081 1057.7,800.77 1058.13,799.459 1058.22,798.148 1058.58,796.837 1058.97,795.526 1059.47,794.214 1059.73,792.903 1059.77,791.592 1059.77,791.592 1060.13,791.592 1060.43,790.281 1060.59,788.97 1060.87,788.97 1061.47,788.97 1061.77,787.659 1062.24,786.347 1062.99,785.036 1063.12,783.725 1064.16,783.725 1064.38,783.725 1064.64,783.725 1064.84,782.414 1064.89,781.103 1064.94,779.792 1066.09,778.48 1066.16,778.48 1066.56,777.169 1066.83,775.858 1066.95,774.547 1066.96,773.236 1067.44,773.236 1067.52,771.925 1067.65,770.613 1067.76,769.302 1068.24,767.991 1068.42,766.68 1068.54,765.369 1069.18,764.058 1069.19,762.746 1069.58,762.746 1069.67,762.746 1070.21,761.435 1070.59,760.124 1070.71,760.124 1070.78,758.813 1071.06,757.502 1072.13,756.191 1074.42,754.879 1074.54,753.568 1074.64,753.568 1074.91,752.257 1074.94,750.946 1074.97,750.946 1075.38,750.946 1077.4,750.946 1077.77,749.635 1078.51,748.324 1079.16,747.012 1079.87,747.012 1080.02,745.701 1080.96,745.701 1081.07,745.701 1081.08,744.39 1081.14,744.39 1081.51,744.39 1081.59,743.079 1082.22,741.768 1086.03,741.768 1086.47,741.768 1086.58,741.768 1086.72,740.457 1086.82,739.145 1088.07,739.145 1088.48,737.834 1088.96,736.523 1088.97,735.212 1090.63,733.901 1091.14,732.59 1091.41,731.278 1091.81,729.967 1092.38,728.656 1093.44,727.345 1093.78,726.034 1093.81,724.723 1094.38,723.411 1095.56,723.411 1095.66,723.411 1095.96,722.1 1097.06,720.789 1097.4,720.789 1100.02,719.478 1100.35,718.167 1100.94,716.856 1101,715.545 1101.75,714.233 1102.82,712.922 1102.88,712.922 1103.29,711.611 1103.49,710.3 1104.56,708.989 1104.57,708.989 1105.04,708.989 1105.85,707.678 1106.01,706.366 1106.14,705.055 1107.33,703.744 1107.74,702.433 1108.07,701.122 1108.55,699.811 1109.11,699.811 1110.14,698.499 1110.18,697.188 1111.56,695.877 1114.48,694.566 1117.09,693.255 1117.26,691.944 1118.01,691.944 1118.03,690.632 1118.31,689.321 1118.76,689.321 1119.55,688.01 1120.36,686.699 1121.42,685.388 1121.73,684.077 1123.34,682.765 1123.73,681.454 1123.81,680.143 1124.24,678.832 1124.32,677.521 1125.42,676.21 1125.74,674.898 1125.97,673.587 1126.12,672.276 1126.12,672.276 1127.01,672.276 1127.2,672.276 1127.71,670.965 1127.86,669.654 1128.01,669.654 1129.35,668.343 1129.47,667.031 1130.3,665.72 1130.63,664.409 1131.7,664.409 1132.9,664.409 1133.76,664.409 1135.34,663.098 1135.51,663.098 1135.82,663.098 1136.12,661.787 1136.98,661.787 1137.35,660.476 1140.89,660.476 1141.1,659.164 1141.15,659.164 1141.45,659.164 1141.45,659.164 1141.67,657.853 1141.67,656.542 1143.65,656.542 1143.87,655.231 1144.31,653.92 1145.19,653.92 1146.09,653.92 1146.33,652.609 1146.47,651.297 1147.06,649.986 1147.09,649.986 1147.12,649.986 1147.17,648.675 1147.44,647.364 1149.87,646.053 1150.03,646.053 1150.36,644.742 1150.53,643.43 1150.79,642.119 1151.39,640.808 1152.37,639.497 1152.78,638.186 1153.28,638.186 1153.68,636.875 1155.18,635.563 1155.38,635.563 1155.89,634.252 1156.31,632.941 1156.52,631.63 1157.89,630.319 1157.92,630.319 1158.04,629.008 1159.73,627.697 1160.61,626.385 1161.53,626.385 1161.75,625.074 1161.83,623.763 1162.34,622.452 1163.47,621.141 1163.64,619.83 1163.96,619.83 1164.03,619.83 1164.31,618.518 1166.33,618.518 1166.85,618.518 1166.95,618.518 1168.97,618.518 1170.09,617.207 1170.58,617.207 1170.76,615.896 1172.84,614.585 1173.52,613.274 1173.62,611.963 1175.54,610.651 1176.41,610.651 1178.15,609.34 1178.52,608.029 1179.1,606.718 1179.17,605.407 1179.54,605.407 1179.75,604.096 1180.48,604.096 1180.75,602.784 1181.32,601.473 1181.86,601.473 1182.6,600.162 1183.02,598.851 1183.58,597.54 1184,596.229 1186.05,594.917 1186.49,593.606 1186.58,592.295 1186.77,590.984 1188.83,589.673 1189.28,588.362 1190.63,587.05 1191.03,587.05 1193.01,587.05 1195.13,585.739 1195.35,584.428 1197.24,584.428 1197.53,583.117 1200.4,581.806 1201.58,580.495 1201.77,580.495 1201.8,579.183 1201.9,577.872 1202.27,576.561 1202.46,575.25 1202.86,573.939 1202.91,572.628 1203.21,571.316 1203.51,570.005 1203.87,568.694 1205.96,568.694 1206.94,568.694 1210,567.383 1210.3,566.072 1210.63,566.072 1210.98,564.761 1211.26,564.761 1213.06,563.449 1213.72,563.449 1215.75,562.138 1219.77,560.827 1221.89,560.827 1223.85,559.516 1224.27,558.205 1225.49,556.894 1227.13,555.582 1228.27,554.271 1228.68,552.96 1232.74,551.649 1232.78,550.338 1233.54,550.338 1234.24,549.027 1235.85,549.027 1237.25,547.715 1239.07,546.404 1240.04,546.404 1240.77,545.093 1242.46,545.093 1245.75,543.782 1245.77,543.782 1246.88,542.471 1248.88,541.16 1249.51,541.16 1249.54,539.848 1251.72,538.537 1252.87,537.226 1252.89,535.915 1253.85,534.604 1255.18,534.604 1255.3,533.293 1257.09,533.293 1258.04,531.982 1258.41,530.67 1258.68,530.67 1260.41,529.359 1263.56,528.048 1263.92,526.737 1264.66,525.426 1265.25,524.115 1266.52,524.115 1267.95,522.803 1268.16,521.492 1268.42,520.181 1269.94,518.87 1271.22,517.559 1273.1,517.559 1273.36,516.248 1273.46,514.936 1273.8,514.936 1274.49,513.625 1278.43,512.314 1278.76,511.003 1279.17,509.692 1281.18,508.381 1282.28,508.381 1283.65,507.069 1284.75,505.758 1284.85,504.447 1284.92,503.136 1285.29,501.825 1288.99,501.825 1289.82,500.514 1290.26,499.202 1290.36,497.891 1291.85,496.58 1294.83,496.58 1298.66,496.58 1299.35,495.269 1299.45,493.958 1301.19,492.647 1302.98,492.647 1304.72,492.647 1305.71,492.647 1306.62,492.647 1306.66,491.335 1308.36,490.024 1308.83,488.713 1311.72,488.713 1312.89,487.402 1321.79,486.091 1322.54,484.78 1329.9,483.468 1330.79,482.157 1330.98,480.846 1331.19,480.846 1331.8,479.535 1332.02,479.535 1335.48,478.224 1336.68,476.913 1337.55,475.601 1338.89,475.601 1339.29,474.29 1339.6,472.979 1340.23,472.979 1340.77,471.668 1344.67,470.357 1344.93,469.046 1345.23,467.734 1345.23,466.423 1347.43,465.112 1348.98,463.801 1349.87,462.49 1350.87,461.179 1350.9,459.867 1353.71,459.867 1353.81,458.556 1355.42,458.556 1357.07,457.245 1359.17,455.934 1361.71,454.623 1365.31,453.312 1367.74,452 1367.81,450.689 1369.41,450.689 1370.12,449.378 1370.64,448.067 1370.73,446.756 1371.32,446.756 1372.75,445.445 1374.36,444.134 1380.19,442.822 1383.33,441.511 1384.27,440.2 1385.65,438.889 1387.26,438.889 1394.82,437.578 1395.52,437.578 1396.8,436.267 1396.95,436.267 1401.02,434.955 1405.55,433.644 1409.74,432.333 1410.72,431.022 1414.42,429.711 1415.04,428.4 1417.5,427.088 1423.3,427.088 1425.67,425.777 1434.66,425.777 1434.99,425.777 1437.32,424.466 1439.64,423.155 1443.83,421.844 1446.24,420.533 1449.55,419.221 1453.29,417.91 1455.37,417.91 1458.24,417.91 1458.97,416.599 1460.88,415.288 1462.46,413.977 1470.31,412.666 1476.89,411.354 1477.59,410.043 1480.09,410.043 1485.03,410.043 1486.07,408.732 1492.78,407.421 1498.61,406.11 1502.44,404.799 1506.76,403.487 1508.51,402.176 1509.5,400.865 1510.41,399.554 1515.5,398.243 1519.39,398.243 1534.98,396.932 1535.8,395.62 1542.67,394.309 1543.57,394.309 1544.02,392.998 1557.49,391.687 1557.87,391.687 1559.2,390.376 1572.39,390.376 1573.19,389.065 1575.11,387.753 1591.05,386.442 1595.95,386.442 1599.3,385.131 1600.74,383.82 1609.38,383.82 1626.52,383.82 1627.08,382.509 1638.44,381.198 1638.77,379.886 1654.4,379.886 1659.16,378.575 1662.03,377.264 1681.14,377.264 1683.88,375.953 1683.92,375.953 1685.15,375.953 1688.82,374.642 1723.17,373.331 1730.18,373.331 1745.88,373.331 1747.35,372.019 1753.78,372.019 1761.66,370.708 1766.12,370.708 1769.19,370.708 1776.17,369.397 1799.74,368.086 1813.17,366.775 1814.94,366.775 1830.3,365.464 1838.45,365.464 1842.4,365.464 1858.18,364.152 1884.93,362.841 1887.71,361.53 1888.93,360.219 1913.15,360.219 1933.96,358.908 1949.66,357.597 1957.56,356.286 1969.9,354.974 1972.97,353.663 2018.72,352.352 2042.23,351.041 2046.19,349.73 2089.82,349.73 2116.93,348.419 2205.37,348.419 2293.6,347.107 \"/>\n<path clip-path=\"url(#clip990)\" d=\"M2047.14 300.469 L2283.08 300.469 L2283.08 93.1086 L2047.14 93.1086  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2047.14,300.469 2283.08,300.469 2283.08,93.1086 2047.14,93.1086 2047.14,300.469 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2070.37,144.949 2209.71,144.949 \"/>\n<path clip-path=\"url(#clip990)\" d=\"M2255.18 128.803 L2255.18 133.363 Q2252.52 132.09 2250.16 131.465 Q2247.8 130.84 2245.6 130.84 Q2241.78 130.84 2239.7 132.321 Q2237.64 133.803 2237.64 136.534 Q2237.64 138.826 2239 140.007 Q2240.39 141.164 2244.23 141.882 L2247.06 142.46 Q2252.29 143.456 2254.77 145.979 Q2257.27 148.479 2257.27 152.692 Q2257.27 157.715 2253.89 160.307 Q2250.53 162.9 2244.02 162.9 Q2241.57 162.9 2238.79 162.344 Q2236.04 161.789 2233.08 160.701 L2233.08 155.886 Q2235.92 157.483 2238.65 158.293 Q2241.39 159.104 2244.02 159.104 Q2248.03 159.104 2250.21 157.53 Q2252.38 155.956 2252.38 153.039 Q2252.38 150.493 2250.81 149.057 Q2249.26 147.622 2245.69 146.905 L2242.84 146.349 Q2237.61 145.307 2235.27 143.085 Q2232.94 140.863 2232.94 136.905 Q2232.94 132.321 2236.15 129.682 Q2239.4 127.044 2245.07 127.044 Q2247.5 127.044 2250.02 127.483 Q2252.54 127.923 2255.18 128.803 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip990)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2070.37,196.789 2209.71,196.789 \"/>\n<path clip-path=\"url(#clip990)\" d=\"M2232.94 179.509 L2237.61 179.509 L2237.61 214.069 L2232.94 214.069 L2232.94 179.509 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip990)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2070.37,248.629 2209.71,248.629 \"/>\n<path clip-path=\"url(#clip990)\" d=\"M2249.33 249.705 Q2250.83 250.214 2252.24 251.881 Q2253.68 253.548 2255.11 256.464 L2259.86 265.909 L2254.83 265.909 L2250.41 257.043 Q2248.7 253.571 2247.08 252.436 Q2245.48 251.302 2242.71 251.302 L2237.61 251.302 L2237.61 265.909 L2232.94 265.909 L2232.94 231.349 L2243.49 231.349 Q2249.42 231.349 2252.33 233.825 Q2255.25 236.302 2255.25 241.302 Q2255.25 244.566 2253.72 246.719 Q2252.22 248.872 2249.33 249.705 M2237.61 235.191 L2237.61 247.46 L2243.49 247.46 Q2246.87 247.46 2248.58 245.909 Q2250.32 244.335 2250.32 241.302 Q2250.32 238.27 2248.58 236.742 Q2246.87 235.191 2243.49 235.191 L2237.61 235.191 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"EditURL = \"constant_birth.jl\"","category":"page"},{"location":"constant_birth/#Delayed-Birth-Death-Process","page":"Birth-death Process","title":"Delayed Birth-Death Process","text":"","category":"section"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"using Random\nusing Distributions\nusing CompetingClocks","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"Birth-death processes are a fundamental type of stochastic process, and are the building block of many more complicated models. Here we demonstrate how to use CompetingClocks to build a very simple simulation of a birth-death process where birth occurs according to an exponential (Markov) clock, but death occurs according to a Weibull distribution. We compare ensemble results to the known stationary distribution. Such models have been considered many times in the literature, but a recent reference is in \"Stochastic description of delayed systems\" by Lafuerza and Toral.","category":"page"},{"location":"constant_birth/#Model-structure","page":"Birth-death Process","title":"Model structure","text":"","category":"section"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"The model will be stored in a struct with a type parameter that is a subtype of ContinuousUnivariateDistribution, which is the distribution type for the clock associated to death. We also define a function initialize_model! which enables a single clock for the birth event, and for each individual in the initial population, enables a death clock for that individual.","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"Known results tell us that the mean of the stationary distribution will be the birth rate multiplied by the average duration alive, which we use to choose the number of individuals in the initial population. We expect the model to fluctuate randomly around this value.","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"mutable struct ConstantBirth{T <: ContinuousUnivariateDistribution}\n    birth_rate::Float64\n    death_distribution::T\n    next_name::Int64\n    alive::Int64\n    when::Float64\nend\n\n\nfunction initialize_model!(model, sampler, rng)\n    enable!(sampler, 1, Exponential(1.0 / model.birth_rate), 0.0, 0.0, rng)\n\n    initial_population = model.birth_rate * mean(model.death_distribution)\n\n    for name_id in 1:Int(round(initial_population))\n        past_birth = rand(rng, model.death_distribution)\n        enable!(sampler, name_id, model.death_distribution, -past_birth, 0.0, rng)\n        model.next_name = name_id + 1\n        model.alive += 1\n    end\nend;","category":"page"},{"location":"constant_birth/#Model-update","page":"Birth-death Process","title":"Model update","text":"","category":"section"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"There's two classes of events that can occur in this model. Birth is always assigned to key 1. When it fires, we disable and enable the birth process to reset it, and then enable a death clock for the new individual. If the firing event was death, we simply disable the clock. We return the integrated population over time from the step! method to check simulation results.","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"function step!(model::ConstantBirth, sampler::SSA{K,T}, when::T, which::K, rng) where {K,T}\n    if which == 1\n        disable!(sampler, 1, when)\n        enable!(sampler, 1, Exponential(1.0 / model.birth_rate), when, when, rng)\n\n        name_id = model.next_name\n        enable!(sampler, name_id, model.death_distribution, when, when, rng)\n        model.next_name += 1\n        model.alive += 1\n    else\n        disable!(sampler, which, when)\n        model.alive -= 1\n    end\n    duration = when - model.when\n    model.when = when\n    model.alive * duration\nend;","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"Our run function is simple. We use the FirstToFire sampler, but any sampler from CompetingClocks capable of supporting non-Exponential distributions can be used.","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"function run_constant_birth(rng, max_step = 10000)\n    birth_rate = 117.0\n    death_rate = Weibull(2.0, 80)\n    model = ConstantBirth(birth_rate, death_rate, 2, 0, 0.0)\n\n    sampler = FirstToFire{Int,Float64}()\n    initialize_model!(model, sampler, rng)\n    # Begin by dropping a few events to account for burn-in.\n    when = 0.0\n    (when, which) = next(sampler, when, rng)\n    while when < 1e4\n        step!(model, sampler, when, which, rng)\n        (when, which) = next(sampler, when, rng)\n    end\n\n    # Then collect statistics.\n    total::Float64 = 0.0\n    start_time = when\n    for _ in 1:max_step\n        total += step!(model, sampler, when, which, rng)\n        (when, which) = next(sampler, when, rng)\n    end\n    steady_state = model.birth_rate * mean(model.death_distribution)\n\n    observed_state = total / (when - start_time)\n    (steady_state, observed_state)\nend;","category":"page"},{"location":"constant_birth/#Simulation","page":"Birth-death Process","title":"Simulation","text":"","category":"section"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"We check below that as we increase the data collected, it gets closer to the expected average with smaller standard deviation.","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"function multiple_runs(trial_cnt = 20, max_step = 1000)\n    rng = Xoshiro(837100235)\n    trials = zeros(Float64, trial_cnt)\n    single_expected = 0.0\n    Threads.@threads for trial_idx in 1:trial_cnt\n        expected, observed = run_constant_birth(rng, max_step)\n        trials[trial_idx] = observed\n        single_expected = expected\n    end\n    (single_expected,\n     (mean(trials) - single_expected) / single_expected,\n     std(trials) / single_expected)\nend\n\nmultiple_runs(20, 100)","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"(8295.084022237816, 0.008025814220693235, 0.018347178373091466)","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"multiple_runs(20, 1000)","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"(8295.084022237816, -0.0011113782851605522, 0.012126041783397188)","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"multiple_runs(20, 10000)","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"(8295.084022237816, -0.003383332381424693, 0.012100328263793862)","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"This page was generated using Literate.jl.","category":"page"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"EditURL = \"commonrandom.jl\"","category":"page"},{"location":"commonrandom/#Common-Random-Numbers","page":"Common Random Numbers","title":"Common Random Numbers","text":"","category":"section"},{"location":"commonrandom/#Introduction","page":"Common Random Numbers","title":"Introduction","text":"","category":"section"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"If you set up the same model and run it with different initial random number generator (RNG) states, then it will create a set of trajectories. CompetingClocks sees these as a sequence of clock events and times of those events. You are usually interested in some summary outcomes of a simulation, such as the total time to a goal or the number of events. This summary outcome is a predictable function of the trajectories. We often want to ask how the goal function depends on simulation parameters, and that can be difficult to determine because each trajectory gives an individual value, and the set of trajectories gives an estimate that can have wide variance.","category":"page"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"What we want is a variance reduction technique. Common random numbers (CRN) are a variance reduction technique that enables you to use fewer simulation runs to compare the effect of different simulation parameters on the outcome. There are several other variance reduction techniques, such as antithetic variates and importance sampling, but let's look at common random numbers in CompetingClocks.","category":"page"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"If you estimate a value with n independent trajectories, then the bias of the estimate is proportional to 1sqrtn in most cases. If you want to distinguish the effect of changing a parameter, then the estimate must be precise enough that you can see the difference. It is common to use millions of trajectories. On the other hand, CRN means that you can produce n=100 trajectories, with significant bias in the estimate, and still see the effect of changing a parameter.","category":"page"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"CRN works well when the sample path is similar from run to run. If two runs use completely different events, then there will be too little overlap. If the causal chain of which events affect other events changes, that can be a problem, too. In most cases, people try CRN and see if it helps.","category":"page"},{"location":"commonrandom/#Using-Common-Random-Numbers-in-CompetingClocks","page":"Common Random Numbers","title":"Using Common Random Numbers in CompetingClocks","text":"","category":"section"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"CompetingClocks implements common random numbers by recording the state of the random number generator every time a clock is enabled. There are other ways to do this, but this one works with the CombinedNextReaction and FirstToFire samplers. The workflow you would use looks notionally like:","category":"page"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"Create a sampler.\nWrap it in a CommonRandomRecorder.\nRun a lot of simulations in order to explore and record all possible clock states. Run reset!(recorder) after each simulation.\nFor every parameter set to try, run it the same way, using reset! after each run.\nCompare outcomes.","category":"page"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"Because the CommonRandomRecorder stores the state of the random number generator at each step, it works best with random number generators that have small state, such as Xoshiro on a linear congruential generator (LCG).","category":"page"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"using Random: Xoshiro\nusing CompetingClocks\nexample_clock = (3, 7)  # We will use clock IDs that are a tuple of 2 integers.\nmodel = MakeModel()\nsampler = FirstToFire{typeof(example_clock),Float64}()\ncrn_sampler = CommonRandomRecorder(sampler, typeof(example_clock), Xoshiro)\nfor trial_idx in 1:100\n    run_simulation(model, crn_sampler)\n    reset!(crn_sampler)\nend\nfor param_idx in 1:10\n    each_model = modify_model!(model, param_idx)\n    run_simulation(each_model, crn_sampler)\n    reset!(crn_sampler)\nend","category":"page"},{"location":"commonrandom/#Multithreading","page":"Common Random Numbers","title":"Multithreading","text":"","category":"section"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"A joy of using simulations is how easy it is to parallelize simulation runs across tasks. That can be a challenge for the CommonRandomRecorder because it continues to observe and record new RNG states as it comes across them. That will result in divergence between behavior on different threads. For that reason, it is possible to freeze a CommonRandomRecorder. It will stop recording states, so make sure to first prime it with lots of simulation runs, and then freeze the recorder and use that as the sampler for multiple simulations on multiple threads.","category":"page"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"using Random: Xoshiro\nusing CompetingClocks\nexample_clock = (3, 7)  # We will use clock IDs that are a tuple of 2 integers.\nmodel = MakeModel()\nsampler = FirstToFire{typeof(example_clock),Float64}()\ncrn_sampler = CommonRandomRecorder(sampler, typeof(example_clock), Xoshiro)\nfor trial_idx in 1:100\n    run_simulation(model, crn_sampler)\n    reset!(crn_sampler)\nend\nfor thread_idx in 1:10\n    frozen_crn = freeze(crn_sampler)\n    # start a simulation run on this thread with frozen_crn.\nend","category":"page"},{"location":"commonrandom/#Checking-effectiveness-of-Common-Random-Numbers","page":"Common Random Numbers","title":"Checking effectiveness of Common Random Numbers","text":"","category":"section"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"If your simulation has a large sample space, CRN may not help. We run a first set of simulations in order to record the state of the system for lots of different clocks and different multiplicities of clock events. If that worked well, then subsequent runs of the simulation will re-use draws from the random number generator. If there are a lot of events which are needed but haven't been recorded, those misses are a sign that CRN is unlikely to reduce variance much for this simulation.","category":"page"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"We check this by checking the misscount during later runs of the simulation under CRN. If that miss count is high, we can look into which clocks are firing that didn't previously fire by iterating over the misses, which are pairs of (clock key, number of misses for that clock).","category":"page"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"The final word on effectiveness of CRN is to look at the variance of summary outcomes for runs with and without CRN. The CRN will, in general, slow down a sampler, but it should mean that many fewer runs are required to distinguish the effect of changes in system parameters.","category":"page"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"","category":"page"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"This page was generated using Literate.jl.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"EditURL = \"reliability.jl\"","category":"page"},{"location":"reliability/#Reliability-Model-of-a-Work-Crew","page":"Reliability","title":"Reliability Model of a Work Crew","text":"","category":"section"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"This is an extended example using a reliability model.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"using ColorSchemes\nusing Distributions\nusing CompetingClocks\nusing Logging\nusing Plots\nusing Random\nusing StatsPlots","category":"page"},{"location":"reliability/#Overview","page":"Reliability","title":"Overview","text":"","category":"section"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"The classic model for reliability is of a machine that is either working or broken. There is a distribution of failure times and a distribution of repair times [1]. Let's extend this idea to the reliability of a vehicle motor pool.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"There are 16 vehicles.\nEvery morning, 10 vehicles go out for work. They all leave in the first 15 mins.\nEach vehicle works at least half a day, at most the whole day.\nWhile working, a vehicle can break, where the chance of breaking depends on the total time since it was last repaired.\nThere is a distribution of repair times.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"Number two, above, says that vehicles start in the first 15 minutes. This plan will initiate ten transitions in rapid succession. We could, instead, start all ten vehicles at the same time, using a single transition. Either would work.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"CompetingClocks will take care of the timing of all of the events, but we will see that there is plenty of work to track the state of all of the vehicles. This extended example shows that, if we wanted to create more reliability models, it would make sense to create a framework for reliability modeling, one that uses CompetingClocks underneath.","category":"page"},{"location":"reliability/#Define-State-for-the-Model","page":"Reliability","title":"Define State for the Model","text":"","category":"section"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"If we think about an individual vehicle, the states are ready, working, or broken.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"@enum IndividualState ready working broken","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"There are four allowed tansitions among the three states because a vehicle breaks only while it's working.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"const IndividualTransitions = Dict(\n    :work => (ready, working),\n    :done => (working, ready),\n    :break => (working, broken),\n    :repair => (broken, ready)\n);","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"An individual has state and parameters. In the language of generalized semi-Markov processes, this state is called the physical state in order to distinguish it from the state of each enabled transition for each vehicle.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"mutable struct Individual\n    # State for the individual\n    state::IndividualState\n    work_age::Float64 ## How an individual remembers its total work leading to breaks.\n    transition_start::Float64  ## This is bookkeeping.\n    # Parameters for the individual\n    done_dist::LogUniform\n    fail_dist::LogNormal\n    repair_dist::Weibull\n    Individual(work, fail, repair) = new(\n        ready, 0.0, 0.0, work, fail, repair\n        )\nend","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"The simulation as a whole is the state of the individuals and the system time. We put some parameters here:","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"workers_max - Each morning, this many vehicles start driving, if at least this many vehicles are ready, instead of broken.\nstart_time - Vehicles start in the first 15 min or so, and this is that 15 min.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"mutable struct Experiment\n    time::Float64\n    group::Vector{Individual}\n    # Each day the group tries to start `workers_max` workers.\n    workers_max::Int64\n    start_time::Float64\n    rng::Xoshiro\n    Experiment(group::Vector, crew_size::Int, rng) = new(0.0, group, crew_size, 0.01, rng)\nend","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"Make a simulation by making individuals.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"function Experiment(individual_cnt::Int, crew_size::Int, rng)\n    done_rate = LogUniform(.8, 0.99) # Gamma(9.0, 0.2)\n    break_rate = LogNormal(1.5, 0.4)\n    repair_rate = Weibull(1.0, 2.0)\n    workers = [Individual(done_rate, break_rate, repair_rate) for _ in 1:individual_cnt]\n    Experiment(workers, crew_size, rng)\nend","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"Main.var\"##241\".Experiment","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"And make some helpers. The key_type says that we will track transitions using a tuple of (index of vehicle, symbol to identify the transition).","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"key_type(::Experiment) = Tuple{Int,Symbol};\nworker_cnt(experiment::Experiment) = size(experiment.group, 1);","category":"page"},{"location":"reliability/#Define-Transitions-for-the-Model","page":"Reliability","title":"Define Transitions for the Model","text":"","category":"section"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"If we were modeling one individual, transitions would be very simple, but by asking that ten vehicles work every morning, we require that those individuals interact.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"One way to think clearly about interactions is to think about the state of the whole system. If less than ten vehicles are currently working, then every ready vehicle must have an enabled transition to start work at the next available time. Once the tenth vehicle begins working, all of those transitions need to be disabled.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"It's implied that the start of each day happens at 1.0, 2.0, 3.0, etc. When a vehicle becomes ready, or when the total working vehicles drops below ten, then each ready vehicle could work at a future time. This function takes in the current time and returns two times, relative to the current time, between which the vehicle can start work.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"function next_work_time(now, fifteen_minutes)\n    hour = now - floor(now)\n    if hour < fifteen_minutes ## If vehicles are still going out today.\n        return 0.0, fifteen_minutes - hour\n    else ## You can't start until tomorrow.\n        return one(hour) - hour, one(hour) + fifteen_minutes - hour\n    end\nend;","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"Now we handle simulation events. This function's complexity is an argument for using a framework like a queueing model, a generalized stochastic Petri net, or some other continuous-time simulation framework.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"The arguments are:","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"when - The time of the next event.\n(who, transition) - This expands the key_type, which identifies the transition.\nexperiment - It's our simulation data.\nsampler - This is a CompetingClocks.SSA from CompetingClocks to enable and disable transitions.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"The first few statements of the function are automatic for any transition. Then this handler works through the transition types.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"function handle_event(when, (who, transition), experiment, sampler)\n    start_state, finish_state = IndividualTransitions[transition]\n    individual = experiment.group[who]\n    @assert individual.state == start_state\n    individual.state = finish_state\n    experiment.time = when\n    disable!(sampler, (who, transition), when)\n\n    # If a vehicle is done work, or if they break, then include the time worked\n    # in their total work age.\n    if start_state == working\n        work_duration = when - individual.transition_start\n        @debug \"Adding $work_duration to $who\"\n        individual.work_age += work_duration\n    end\n\n    # The state of the system, as a whole, depends on the total number\n    # currently working.\n    worker_cnt = count(w.state == working for w in experiment.group)\n    need_workers = worker_cnt < experiment.workers_max\n    max_hour = experiment.start_time\n\n    # When an individual was working, there were two possible transitions,\n    # one to `ready`, and one to `broken`. Don't forget to disable the `:break`\n    # transition. Then schedule the next day's work only if the system has less\n    # than ten working.\n    if transition == :done\n        disable!(sampler, (who, :break), when)\n        if need_workers\n            rate = Uniform(next_work_time(when, max_hour)...)\n            enable!(sampler, (who, :work), rate, when, when, experiment.rng)\n            @debug \"schedule $who for $rate\"\n        end\n\n    # A `:repair` transition can happen at any time, including during the first\n    # fifteen minutes of a day.\n    elseif transition == :repair\n        if need_workers\n            rate = Uniform(next_work_time(when, max_hour)...)\n            enable!(sampler, (who, :work), rate, when, when, experiment.rng)\n            @debug \"schedule $who for $rate\"\n        end\n\n    # The `:work` transition represents a vehicle going out to work for the day.\n    # This enables two possible transitions, finishing work or breaking. The\n    # breaking transition is interesting because it has what Zimmerman [2] calls\n    # \"memory.\" It remembers how long it was previously enabled\n    elseif transition == :work\n        # enable :done and :break\n        enable!(sampler, (who, :done), individual.done_dist, when, when, experiment.rng)\n        # Time shift this distribution to the left because it remembers\n        # the time already worked.\n        past_work = when - individual.work_age\n        enable!(sampler, (who, :break), individual.fail_dist, past_work, when, experiment.rng)\n        @debug \"schedule $who for done or break\"\n\n    # When a vehicle breaks, the only option is to repair it. This resets the work age.\n    elseif transition == :break\n        # If you broke, you don't get to finish your work.\n        disable!(sampler, (who, :done), when)\n        individual.work_age = zero(Float64)\n        enable!(sampler, (who, :repair), individual.repair_dist, when, when, experiment.rng)\n        @debug \"schedule $who for repair\"\n\n    else\n        @assert transition ∈ keys(IndividualTransitions)\n    end\n    individual.transition_start = when\n\n    # We haven't handled how we ensure that at most ten vehicles start work every\n    # morning. For that, we need to think about the system as a whole, explicitly\n    # by looking at the current worker count and whether it crossed the threshold of\n    # ten workers.\n    #\n    # If a vehicle just started and is the tenth worker, then cancel the ability of\n    # all other vehicles to work.\n    if transition == :work && worker_cnt == experiment.workers_max\n        notnow = Int[]\n        for too_many in [widx for (widx, w) in enumerate(experiment.group) if w.state == ready]\n            # You don't start today.\n            disable!(sampler, (too_many, :work), when)\n            push!(notnow, too_many)\n        end\n        @debug \"Unscheduling $notnow\"\n\n    # If a vehicle stopped work, either by finishing or breaking, and it was the\n    # first of the work crew to quit, then notify all `ready` vehicles that they\n    # should start work at the start of the next morning.\n    elseif transition ∈ (:done, :break) && worker_cnt == experiment.workers_max - 1\n        rate = Uniform(next_work_time(when, max_hour)...)\n        upnext = Int[]\n        for next_chance in [widx for (widx, w) in enumerate(experiment.group) if w.state == ready]\n            if next_chance != who\n                enable!(sampler, (next_chance, :work), rate, when, when, experiment.rng)\n                push!(upnext, next_chance)\n            end\n        end\n        @debug \"scheduling $upnext for $rate\"\n    end\nend;","category":"page"},{"location":"reliability/#Configure-the-Model","page":"Reliability","title":"Configure the Model","text":"","category":"section"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"For anything other than an example, the most important step would be configuring the model so that it matches observations. Here, however, we have put this directly into the Experiment type. Here is a plot of the distributions.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"function show_distributions()\n    experiment = Experiment(16, 10, Xoshiro(9378424))\n\n    plot(experiment.group[1].done_dist, label=\"Done\")\n    plot!(experiment.group[1].fail_dist, label=\"Break\")\n    plot!(experiment.group[1].repair_dist, label=\"Repair\")\n    title!(\"Distributions for Transitions\")\nend\nshow_distributions()","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip020\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip020)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip021\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip020)\" d=\"M112.177 1486.45 L2352.76 1486.45 L2352.76 123.472 L112.177 123.472  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip022\">\n    <rect x=\"112\" y=\"123\" width=\"2242\" height=\"1364\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"175.59,1486.45 175.59,123.472 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"708.34,1486.45 708.34,123.472 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1241.09,1486.45 1241.09,123.472 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1773.84,1486.45 1773.84,123.472 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2306.59,1486.45 2306.59,123.472 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"112.177,1486.45 2352.76,1486.45 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"175.59,1486.45 175.59,1467.55 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"708.34,1486.45 708.34,1467.55 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1241.09,1486.45 1241.09,1467.55 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1773.84,1486.45 1773.84,1467.55 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2306.59,1486.45 2306.59,1467.55 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M175.59 1517.37 Q171.979 1517.37 170.15 1520.93 Q168.344 1524.47 168.344 1531.6 Q168.344 1538.71 170.15 1542.27 Q171.979 1545.82 175.59 1545.82 Q179.224 1545.82 181.03 1542.27 Q182.858 1538.71 182.858 1531.6 Q182.858 1524.47 181.03 1520.93 Q179.224 1517.37 175.59 1517.37 M175.59 1513.66 Q181.4 1513.66 184.455 1518.27 Q187.534 1522.85 187.534 1531.6 Q187.534 1540.33 184.455 1544.94 Q181.4 1549.52 175.59 1549.52 Q169.78 1549.52 166.701 1544.94 Q163.645 1540.33 163.645 1531.6 Q163.645 1522.85 166.701 1518.27 Q169.78 1513.66 175.59 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M698.617 1514.29 L716.974 1514.29 L716.974 1518.22 L702.9 1518.22 L702.9 1526.7 Q703.918 1526.35 704.937 1526.19 Q705.955 1526 706.974 1526 Q712.761 1526 716.14 1529.17 Q719.52 1532.34 719.52 1537.76 Q719.52 1543.34 716.048 1546.44 Q712.576 1549.52 706.256 1549.52 Q704.08 1549.52 701.812 1549.15 Q699.566 1548.78 697.159 1548.04 L697.159 1543.34 Q699.242 1544.47 701.465 1545.03 Q703.687 1545.58 706.164 1545.58 Q710.168 1545.58 712.506 1543.48 Q714.844 1541.37 714.844 1537.76 Q714.844 1534.15 712.506 1532.04 Q710.168 1529.94 706.164 1529.94 Q704.289 1529.94 702.414 1530.35 Q700.562 1530.77 698.617 1531.65 L698.617 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1215.78 1544.91 L1223.42 1544.91 L1223.42 1518.55 L1215.11 1520.21 L1215.11 1515.95 L1223.37 1514.29 L1228.05 1514.29 L1228.05 1544.91 L1235.68 1544.91 L1235.68 1548.85 L1215.78 1548.85 L1215.78 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1255.13 1517.37 Q1251.52 1517.37 1249.69 1520.93 Q1247.88 1524.47 1247.88 1531.6 Q1247.88 1538.71 1249.69 1542.27 Q1251.52 1545.82 1255.13 1545.82 Q1258.76 1545.82 1260.57 1542.27 Q1262.4 1538.71 1262.4 1531.6 Q1262.4 1524.47 1260.57 1520.93 Q1258.76 1517.37 1255.13 1517.37 M1255.13 1513.66 Q1260.94 1513.66 1263.99 1518.27 Q1267.07 1522.85 1267.07 1531.6 Q1267.07 1540.33 1263.99 1544.94 Q1260.94 1549.52 1255.13 1549.52 Q1249.32 1549.52 1246.24 1544.94 Q1243.18 1540.33 1243.18 1531.6 Q1243.18 1522.85 1246.24 1518.27 Q1249.32 1513.66 1255.13 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1749.02 1544.91 L1756.66 1544.91 L1756.66 1518.55 L1748.35 1520.21 L1748.35 1515.95 L1756.62 1514.29 L1761.29 1514.29 L1761.29 1544.91 L1768.93 1544.91 L1768.93 1548.85 L1749.02 1548.85 L1749.02 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1778.42 1514.29 L1796.78 1514.29 L1796.78 1518.22 L1782.7 1518.22 L1782.7 1526.7 Q1783.72 1526.35 1784.74 1526.19 Q1785.76 1526 1786.78 1526 Q1792.57 1526 1795.95 1529.17 Q1799.33 1532.34 1799.33 1537.76 Q1799.33 1543.34 1795.85 1546.44 Q1792.38 1549.52 1786.06 1549.52 Q1783.89 1549.52 1781.62 1549.15 Q1779.37 1548.78 1776.96 1548.04 L1776.96 1543.34 Q1779.05 1544.47 1781.27 1545.03 Q1783.49 1545.58 1785.97 1545.58 Q1789.97 1545.58 1792.31 1543.48 Q1794.65 1541.37 1794.65 1537.76 Q1794.65 1534.15 1792.31 1532.04 Q1789.97 1529.94 1785.97 1529.94 Q1784.09 1529.94 1782.22 1530.35 Q1780.37 1530.77 1778.42 1531.65 L1778.42 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2285.36 1544.91 L2301.68 1544.91 L2301.68 1548.85 L2279.74 1548.85 L2279.74 1544.91 Q2282.4 1542.16 2286.98 1537.53 Q2291.59 1532.88 2292.77 1531.53 Q2295.01 1529.01 2295.89 1527.27 Q2296.8 1525.51 2296.8 1523.82 Q2296.8 1521.07 2294.85 1519.33 Q2292.93 1517.6 2289.83 1517.6 Q2287.63 1517.6 2285.18 1518.36 Q2282.75 1519.13 2279.97 1520.68 L2279.97 1515.95 Q2282.79 1514.82 2285.25 1514.24 Q2287.7 1513.66 2289.74 1513.66 Q2295.11 1513.66 2298.3 1516.35 Q2301.5 1519.03 2301.5 1523.52 Q2301.5 1525.65 2300.69 1527.57 Q2299.9 1529.47 2297.79 1532.07 Q2297.21 1532.74 2294.11 1535.95 Q2291.01 1539.15 2285.36 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2321.5 1517.37 Q2317.89 1517.37 2316.06 1520.93 Q2314.25 1524.47 2314.25 1531.6 Q2314.25 1538.71 2316.06 1542.27 Q2317.89 1545.82 2321.5 1545.82 Q2325.13 1545.82 2326.94 1542.27 Q2328.76 1538.71 2328.76 1531.6 Q2328.76 1524.47 2326.94 1520.93 Q2325.13 1517.37 2321.5 1517.37 M2321.5 1513.66 Q2327.31 1513.66 2330.36 1518.27 Q2333.44 1522.85 2333.44 1531.6 Q2333.44 1540.33 2330.36 1544.94 Q2327.31 1549.52 2321.5 1549.52 Q2315.69 1549.52 2312.61 1544.94 Q2309.55 1540.33 2309.55 1531.6 Q2309.55 1522.85 2312.61 1518.27 Q2315.69 1513.66 2321.5 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"112.177,1447.87 2352.76,1447.87 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"112.177,1228.67 2352.76,1228.67 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"112.177,1009.47 2352.76,1009.47 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"112.177,790.271 2352.76,790.271 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"112.177,571.07 2352.76,571.07 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"112.177,351.87 2352.76,351.87 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"112.177,132.669 2352.76,132.669 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"112.177,1486.45 112.177,123.472 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"112.177,1447.87 131.075,1447.87 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"112.177,1228.67 131.075,1228.67 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"112.177,1009.47 131.075,1009.47 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"112.177,790.271 131.075,790.271 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"112.177,571.07 131.075,571.07 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"112.177,351.87 131.075,351.87 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"112.177,132.669 131.075,132.669 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M64.2328 1433.67 Q60.6217 1433.67 58.793 1437.24 Q56.9875 1440.78 56.9875 1447.91 Q56.9875 1455.01 58.793 1458.58 Q60.6217 1462.12 64.2328 1462.12 Q67.867 1462.12 69.6726 1458.58 Q71.5013 1455.01 71.5013 1447.91 Q71.5013 1440.78 69.6726 1437.24 Q67.867 1433.67 64.2328 1433.67 M64.2328 1429.97 Q70.0429 1429.97 73.0985 1434.57 Q76.1772 1439.16 76.1772 1447.91 Q76.1772 1456.63 73.0985 1461.24 Q70.0429 1465.82 64.2328 1465.82 Q58.4226 1465.82 55.344 1461.24 Q52.2884 1456.63 52.2884 1447.91 Q52.2884 1439.16 55.344 1434.57 Q58.4226 1429.97 64.2328 1429.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M56.2699 1242.02 L63.9087 1242.02 L63.9087 1215.65 L55.5986 1217.32 L55.5986 1213.06 L63.8624 1211.39 L68.5383 1211.39 L68.5383 1242.02 L76.1772 1242.02 L76.1772 1245.95 L56.2699 1245.95 L56.2699 1242.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M59.8578 1022.82 L76.1772 1022.82 L76.1772 1026.75 L54.2328 1026.75 L54.2328 1022.82 Q56.8949 1020.06 61.4782 1015.43 Q66.0846 1010.78 67.2652 1009.44 Q69.5105 1006.91 70.3902 1005.18 Q71.2929 1003.42 71.2929 1001.73 Q71.2929 998.974 69.3485 997.238 Q67.4272 995.502 64.3254 995.502 Q62.1263 995.502 59.6726 996.266 Q57.2421 997.03 54.4643 998.581 L54.4643 993.858 Q57.2884 992.724 59.7421 992.145 Q62.1958 991.567 64.2328 991.567 Q69.6031 991.567 72.7976 994.252 Q75.992 996.937 75.992 1001.43 Q75.992 1003.56 75.1818 1005.48 Q74.3948 1007.38 72.2883 1009.97 Q71.7096 1010.64 68.6078 1013.86 Q65.5059 1017.05 59.8578 1022.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M69.0476 788.917 Q72.404 789.635 74.279 791.903 Q76.1772 794.172 76.1772 797.505 Q76.1772 802.621 72.6587 805.421 Q69.1402 808.222 62.6587 808.222 Q60.4828 808.222 58.168 807.783 Q55.8764 807.366 53.4227 806.509 L53.4227 801.996 Q55.3671 803.13 57.6819 803.709 Q59.9967 804.287 62.5198 804.287 Q66.918 804.287 69.2096 802.551 Q71.5244 800.815 71.5244 797.505 Q71.5244 794.449 69.3717 792.736 Q67.242 791 63.4226 791 L59.3949 791 L59.3949 787.158 L63.6078 787.158 Q67.0569 787.158 68.8855 785.792 Q70.7142 784.403 70.7142 781.81 Q70.7142 779.148 68.8161 777.736 Q66.9411 776.301 63.4226 776.301 Q61.5013 776.301 59.3023 776.718 Q57.1032 777.135 54.4643 778.014 L54.4643 773.848 Q57.1264 773.107 59.4412 772.736 Q61.7791 772.366 63.8393 772.366 Q69.1633 772.366 72.2652 774.797 Q75.367 777.204 75.367 781.324 Q75.367 784.195 73.7235 786.185 Q72.08 788.153 69.0476 788.917 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M66.5939 557.864 L54.7884 576.313 L66.5939 576.313 L66.5939 557.864 M65.367 553.79 L71.2466 553.79 L71.2466 576.313 L76.1772 576.313 L76.1772 580.202 L71.2466 580.202 L71.2466 588.35 L66.5939 588.35 L66.5939 580.202 L50.9921 580.202 L50.9921 575.688 L65.367 553.79 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M55.2745 334.59 L73.6309 334.59 L73.6309 338.525 L59.5569 338.525 L59.5569 346.997 Q60.5754 346.65 61.5939 346.488 Q62.6124 346.303 63.6309 346.303 Q69.418 346.303 72.7976 349.474 Q76.1772 352.645 76.1772 358.062 Q76.1772 363.641 72.705 366.742 Q69.2328 369.821 62.9134 369.821 Q60.7374 369.821 58.4689 369.451 Q56.2236 369.08 53.8162 368.34 L53.8162 363.641 Q55.8995 364.775 58.1217 365.33 Q60.3439 365.886 62.8208 365.886 Q66.8254 365.886 69.1633 363.779 Q71.5013 361.673 71.5013 358.062 Q71.5013 354.451 69.1633 352.344 Q66.8254 350.238 62.8208 350.238 Q60.9458 350.238 59.0708 350.654 Q57.2189 351.071 55.2745 351.951 L55.2745 334.59 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M64.6495 130.806 Q61.5013 130.806 59.6495 132.958 Q57.8208 135.111 57.8208 138.861 Q57.8208 142.588 59.6495 144.764 Q61.5013 146.917 64.6495 146.917 Q67.7976 146.917 69.6263 144.764 Q71.4781 142.588 71.4781 138.861 Q71.4781 135.111 69.6263 132.958 Q67.7976 130.806 64.6495 130.806 M73.9318 116.153 L73.9318 120.412 Q72.1726 119.579 70.367 119.139 Q68.5846 118.699 66.8254 118.699 Q62.1958 118.699 59.7421 121.824 Q57.3115 124.949 56.9643 131.269 Q58.33 129.255 60.3902 128.19 Q62.4504 127.102 64.9272 127.102 Q70.1355 127.102 73.1448 130.273 Q76.1772 133.421 76.1772 138.861 Q76.1772 144.185 73.029 147.403 Q69.8809 150.62 64.6495 150.62 Q58.6541 150.62 55.4828 146.037 Q52.3116 141.431 52.3116 132.704 Q52.3116 124.509 56.2004 119.648 Q60.0893 114.764 66.6402 114.764 Q68.3994 114.764 70.1818 115.111 Q71.9874 115.459 73.9318 116.153 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M677.513 18.8205 L677.513 65.8515 L687.397 65.8515 Q699.914 65.8515 705.707 60.1802 Q711.541 54.509 711.541 42.2752 Q711.541 30.1225 705.707 24.4918 Q699.914 18.8205 687.397 18.8205 L677.513 18.8205 M669.33 12.096 L686.141 12.096 Q703.722 12.096 711.946 19.4281 Q720.169 26.7198 720.169 42.2752 Q720.169 57.9117 711.905 65.2439 Q703.641 72.576 686.141 72.576 L669.33 72.576 L669.33 12.096 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M732.889 27.2059 L740.342 27.2059 L740.342 72.576 L732.889 72.576 L732.889 27.2059 M732.889 9.54393 L740.342 9.54393 L740.342 18.9825 L732.889 18.9825 L732.889 9.54393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M784.862 28.5427 L784.862 35.5912 Q781.702 33.9709 778.299 33.1607 Q774.897 32.3505 771.251 32.3505 Q765.701 32.3505 762.906 34.0519 Q760.151 35.7533 760.151 39.156 Q760.151 41.7486 762.136 43.2475 Q764.121 44.7058 770.117 46.0426 L772.669 46.6097 Q780.608 48.3111 783.93 51.4303 Q787.292 54.509 787.292 60.0587 Q787.292 66.3781 782.269 70.0644 Q777.287 73.7508 768.537 73.7508 Q764.891 73.7508 760.921 73.0216 Q756.992 72.3329 752.617 70.9151 L752.617 63.2184 Q756.749 65.3654 760.759 66.4591 Q764.769 67.5124 768.699 67.5124 Q773.965 67.5124 776.801 65.73 Q779.636 63.9071 779.636 60.6258 Q779.636 57.5877 777.57 55.9673 Q775.545 54.3469 768.618 52.8481 L766.025 52.2405 Q759.098 50.7821 756.019 47.7845 Q752.941 44.7463 752.941 39.4801 Q752.941 33.0797 757.478 29.5959 Q762.015 26.1121 770.36 26.1121 Q774.492 26.1121 778.137 26.7198 Q781.783 27.3274 784.862 28.5427 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M806.534 14.324 L806.534 27.2059 L821.887 27.2059 L821.887 32.9987 L806.534 32.9987 L806.534 57.6282 Q806.534 63.1779 808.033 64.7578 Q809.572 66.3376 814.231 66.3376 L821.887 66.3376 L821.887 72.576 L814.231 72.576 Q805.603 72.576 802.321 69.3758 Q799.04 66.1351 799.04 57.6282 L799.04 32.9987 L793.571 32.9987 L793.571 27.2059 L799.04 27.2059 L799.04 14.324 L806.534 14.324 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M857.981 34.1734 Q856.725 33.4443 855.226 33.1202 Q853.768 32.7556 851.985 32.7556 Q845.666 32.7556 842.263 36.8875 Q838.901 40.9789 838.901 48.6757 L838.901 72.576 L831.407 72.576 L831.407 27.2059 L838.901 27.2059 L838.901 34.2544 Q841.25 30.1225 845.018 28.1376 Q848.785 26.1121 854.173 26.1121 Q854.943 26.1121 855.874 26.2337 Q856.806 26.3147 857.94 26.5172 L857.981 34.1734 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M865.799 27.2059 L873.253 27.2059 L873.253 72.576 L865.799 72.576 L865.799 27.2059 M865.799 9.54393 L873.253 9.54393 L873.253 18.9825 L865.799 18.9825 L865.799 9.54393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M921.418 49.9314 Q921.418 41.7081 918.015 37.0496 Q914.653 32.3505 908.739 32.3505 Q902.824 32.3505 899.421 37.0496 Q896.059 41.7081 896.059 49.9314 Q896.059 58.1548 899.421 62.8538 Q902.824 67.5124 908.739 67.5124 Q914.653 67.5124 918.015 62.8538 Q921.418 58.1548 921.418 49.9314 M896.059 34.0924 Q898.409 30.0415 901.974 28.0971 Q905.579 26.1121 910.561 26.1121 Q918.825 26.1121 923.97 32.6746 Q929.155 39.2371 929.155 49.9314 Q929.155 60.6258 923.97 67.1883 Q918.825 73.7508 910.561 73.7508 Q905.579 73.7508 901.974 71.8063 Q898.409 69.8214 896.059 65.7705 L896.059 72.576 L888.565 72.576 L888.565 9.54393 L896.059 9.54393 L896.059 34.0924 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M940.741 54.671 L940.741 27.2059 L948.194 27.2059 L948.194 54.3874 Q948.194 60.8284 950.706 64.0691 Q953.217 67.2693 958.241 67.2693 Q964.276 67.2693 967.76 63.421 Q971.284 59.5726 971.284 52.9291 L971.284 27.2059 L978.738 27.2059 L978.738 72.576 L971.284 72.576 L971.284 65.6084 Q968.57 69.7404 964.965 71.7658 Q961.4 73.7508 956.661 73.7508 Q948.842 73.7508 944.792 68.8897 Q940.741 64.0286 940.741 54.671 M959.496 26.1121 L959.496 26.1121 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1001.46 14.324 L1001.46 27.2059 L1016.82 27.2059 L1016.82 32.9987 L1001.46 32.9987 L1001.46 57.6282 Q1001.46 63.1779 1002.96 64.7578 Q1004.5 66.3376 1009.16 66.3376 L1016.82 66.3376 L1016.82 72.576 L1009.16 72.576 Q1000.53 72.576 997.251 69.3758 Q993.97 66.1351 993.97 57.6282 L993.97 32.9987 L988.501 32.9987 L988.501 27.2059 L993.97 27.2059 L993.97 14.324 L1001.46 14.324 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1026.62 27.2059 L1034.07 27.2059 L1034.07 72.576 L1026.62 72.576 L1026.62 27.2059 M1026.62 9.54393 L1034.07 9.54393 L1034.07 18.9825 L1026.62 18.9825 L1026.62 9.54393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1067.25 32.4315 Q1061.26 32.4315 1057.77 37.1306 Q1054.29 41.7891 1054.29 49.9314 Q1054.29 58.0738 1057.73 62.7728 Q1061.21 67.4314 1067.25 67.4314 Q1073.21 67.4314 1076.69 62.7323 Q1080.17 58.0333 1080.17 49.9314 Q1080.17 41.8701 1076.69 37.1711 Q1073.21 32.4315 1067.25 32.4315 M1067.25 26.1121 Q1076.97 26.1121 1082.52 32.4315 Q1088.07 38.7509 1088.07 49.9314 Q1088.07 61.0714 1082.52 67.4314 Q1076.97 73.7508 1067.25 73.7508 Q1057.49 73.7508 1051.94 67.4314 Q1046.43 61.0714 1046.43 49.9314 Q1046.43 38.7509 1051.94 32.4315 Q1057.49 26.1121 1067.25 26.1121 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1138.14 45.1919 L1138.14 72.576 L1130.69 72.576 L1130.69 45.4349 Q1130.69 38.994 1128.18 35.7938 Q1125.66 32.5936 1120.64 32.5936 Q1114.61 32.5936 1111.12 36.4419 Q1107.64 40.2903 1107.64 46.9338 L1107.64 72.576 L1100.14 72.576 L1100.14 27.2059 L1107.64 27.2059 L1107.64 34.2544 Q1110.31 30.163 1113.92 28.1376 Q1117.56 26.1121 1122.3 26.1121 Q1130.12 26.1121 1134.13 30.9732 Q1138.14 35.7938 1138.14 45.1919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1181.93 28.5427 L1181.93 35.5912 Q1178.77 33.9709 1175.37 33.1607 Q1171.97 32.3505 1168.32 32.3505 Q1162.77 32.3505 1159.98 34.0519 Q1157.22 35.7533 1157.22 39.156 Q1157.22 41.7486 1159.21 43.2475 Q1161.19 44.7058 1167.19 46.0426 L1169.74 46.6097 Q1177.68 48.3111 1181 51.4303 Q1184.36 54.509 1184.36 60.0587 Q1184.36 66.3781 1179.34 70.0644 Q1174.36 73.7508 1165.61 73.7508 Q1161.96 73.7508 1157.99 73.0216 Q1154.06 72.3329 1149.69 70.9151 L1149.69 63.2184 Q1153.82 65.3654 1157.83 66.4591 Q1161.84 67.5124 1165.77 67.5124 Q1171.03 67.5124 1173.87 65.73 Q1176.71 63.9071 1176.71 60.6258 Q1176.71 57.5877 1174.64 55.9673 Q1172.61 54.3469 1165.69 52.8481 L1163.09 52.2405 Q1156.17 50.7821 1153.09 47.7845 Q1150.01 44.7463 1150.01 39.4801 Q1150.01 33.0797 1154.55 29.5959 Q1159.08 26.1121 1167.43 26.1121 Q1171.56 26.1121 1175.21 26.7198 Q1178.85 27.3274 1181.93 28.5427 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1245.57 9.54393 L1245.57 15.7418 L1238.44 15.7418 Q1234.43 15.7418 1232.85 17.3622 Q1231.31 18.9825 1231.31 23.1955 L1231.31 27.2059 L1243.59 27.2059 L1243.59 32.9987 L1231.31 32.9987 L1231.31 72.576 L1223.82 72.576 L1223.82 32.9987 L1216.69 32.9987 L1216.69 27.2059 L1223.82 27.2059 L1223.82 24.0462 Q1223.82 16.471 1227.34 13.0277 Q1230.87 9.54393 1238.52 9.54393 L1245.57 9.54393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1269.39 32.4315 Q1263.4 32.4315 1259.91 37.1306 Q1256.43 41.7891 1256.43 49.9314 Q1256.43 58.0738 1259.87 62.7728 Q1263.35 67.4314 1269.39 67.4314 Q1275.35 67.4314 1278.83 62.7323 Q1282.31 58.0333 1282.31 49.9314 Q1282.31 41.8701 1278.83 37.1711 Q1275.35 32.4315 1269.39 32.4315 M1269.39 26.1121 Q1279.11 26.1121 1284.66 32.4315 Q1290.21 38.7509 1290.21 49.9314 Q1290.21 61.0714 1284.66 67.4314 Q1279.11 73.7508 1269.39 73.7508 Q1259.63 73.7508 1254.08 67.4314 Q1248.57 61.0714 1248.57 49.9314 Q1248.57 38.7509 1254.08 32.4315 Q1259.63 26.1121 1269.39 26.1121 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1328.86 34.1734 Q1327.6 33.4443 1326.1 33.1202 Q1324.64 32.7556 1322.86 32.7556 Q1316.54 32.7556 1313.14 36.8875 Q1309.78 40.9789 1309.78 48.6757 L1309.78 72.576 L1302.28 72.576 L1302.28 27.2059 L1309.78 27.2059 L1309.78 34.2544 Q1312.13 30.1225 1315.89 28.1376 Q1319.66 26.1121 1325.05 26.1121 Q1325.82 26.1121 1326.75 26.2337 Q1327.68 26.3147 1328.82 26.5172 L1328.86 34.1734 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1354.99 12.096 L1406.15 12.096 L1406.15 18.9825 L1384.68 18.9825 L1384.68 72.576 L1376.46 72.576 L1376.46 18.9825 L1354.99 18.9825 L1354.99 12.096 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1427.82 34.1734 Q1426.57 33.4443 1425.07 33.1202 Q1423.61 32.7556 1421.83 32.7556 Q1415.51 32.7556 1412.1 36.8875 Q1408.74 40.9789 1408.74 48.6757 L1408.74 72.576 L1401.25 72.576 L1401.25 27.2059 L1408.74 27.2059 L1408.74 34.2544 Q1411.09 30.1225 1414.86 28.1376 Q1418.63 26.1121 1424.01 26.1121 Q1424.78 26.1121 1425.71 26.2337 Q1426.65 26.3147 1427.78 26.5172 L1427.82 34.1734 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1456.26 49.7694 Q1447.23 49.7694 1443.74 51.8354 Q1440.26 53.9013 1440.26 58.8839 Q1440.26 62.8538 1442.85 65.2034 Q1445.48 67.5124 1449.98 67.5124 Q1456.18 67.5124 1459.9 63.1374 Q1463.67 58.7219 1463.67 51.4303 L1463.67 49.7694 L1456.26 49.7694 M1471.13 46.6907 L1471.13 72.576 L1463.67 72.576 L1463.67 65.6895 Q1461.12 69.8214 1457.31 71.8063 Q1453.5 73.7508 1447.99 73.7508 Q1441.03 73.7508 1436.9 69.8619 Q1432.8 65.9325 1432.8 59.3701 Q1432.8 51.7138 1437.91 47.825 Q1443.05 43.9361 1453.22 43.9361 L1463.67 43.9361 L1463.67 43.2069 Q1463.67 38.0623 1460.27 35.2672 Q1456.91 32.4315 1450.79 32.4315 Q1446.9 32.4315 1443.21 33.3632 Q1439.53 34.295 1436.13 36.1584 L1436.13 29.2718 Q1440.22 27.692 1444.07 26.9223 Q1447.91 26.1121 1451.56 26.1121 Q1461.4 26.1121 1466.26 31.2163 Q1471.13 36.3204 1471.13 46.6907 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1524.19 45.1919 L1524.19 72.576 L1516.74 72.576 L1516.74 45.4349 Q1516.74 38.994 1514.23 35.7938 Q1511.72 32.5936 1506.69 32.5936 Q1500.66 32.5936 1497.17 36.4419 Q1493.69 40.2903 1493.69 46.9338 L1493.69 72.576 L1486.19 72.576 L1486.19 27.2059 L1493.69 27.2059 L1493.69 34.2544 Q1496.36 30.163 1499.97 28.1376 Q1503.61 26.1121 1508.35 26.1121 Q1516.17 26.1121 1520.18 30.9732 Q1524.19 35.7938 1524.19 45.1919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1567.98 28.5427 L1567.98 35.5912 Q1564.82 33.9709 1561.42 33.1607 Q1558.02 32.3505 1554.37 32.3505 Q1548.82 32.3505 1546.03 34.0519 Q1543.27 35.7533 1543.27 39.156 Q1543.27 41.7486 1545.26 43.2475 Q1547.24 44.7058 1553.24 46.0426 L1555.79 46.6097 Q1563.73 48.3111 1567.05 51.4303 Q1570.41 54.509 1570.41 60.0587 Q1570.41 66.3781 1565.39 70.0644 Q1560.41 73.7508 1551.66 73.7508 Q1548.01 73.7508 1544.04 73.0216 Q1540.11 72.3329 1535.74 70.9151 L1535.74 63.2184 Q1539.87 65.3654 1543.88 66.4591 Q1547.89 67.5124 1551.82 67.5124 Q1557.09 67.5124 1559.92 65.73 Q1562.76 63.9071 1562.76 60.6258 Q1562.76 57.5877 1560.69 55.9673 Q1558.67 54.3469 1551.74 52.8481 L1549.15 52.2405 Q1542.22 50.7821 1539.14 47.7845 Q1536.06 44.7463 1536.06 39.4801 Q1536.06 33.0797 1540.6 29.5959 Q1545.14 26.1121 1553.48 26.1121 Q1557.61 26.1121 1561.26 26.7198 Q1564.9 27.3274 1567.98 28.5427 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1582.28 27.2059 L1589.74 27.2059 L1589.74 72.576 L1582.28 72.576 L1582.28 27.2059 M1582.28 9.54393 L1589.74 9.54393 L1589.74 18.9825 L1582.28 18.9825 L1582.28 9.54393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1612.7 14.324 L1612.7 27.2059 L1628.06 27.2059 L1628.06 32.9987 L1612.7 32.9987 L1612.7 57.6282 Q1612.7 63.1779 1614.2 64.7578 Q1615.74 66.3376 1620.4 66.3376 L1628.06 66.3376 L1628.06 72.576 L1620.4 72.576 Q1611.77 72.576 1608.49 69.3758 Q1605.21 66.1351 1605.21 57.6282 L1605.21 32.9987 L1599.74 32.9987 L1599.74 27.2059 L1605.21 27.2059 L1605.21 14.324 L1612.7 14.324 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1637.86 27.2059 L1645.31 27.2059 L1645.31 72.576 L1637.86 72.576 L1637.86 27.2059 M1637.86 9.54393 L1645.31 9.54393 L1645.31 18.9825 L1637.86 18.9825 L1637.86 9.54393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1678.49 32.4315 Q1672.5 32.4315 1669.01 37.1306 Q1665.53 41.7891 1665.53 49.9314 Q1665.53 58.0738 1668.97 62.7728 Q1672.46 67.4314 1678.49 67.4314 Q1684.45 67.4314 1687.93 62.7323 Q1691.41 58.0333 1691.41 49.9314 Q1691.41 41.8701 1687.93 37.1711 Q1684.45 32.4315 1678.49 32.4315 M1678.49 26.1121 Q1688.21 26.1121 1693.76 32.4315 Q1699.31 38.7509 1699.31 49.9314 Q1699.31 61.0714 1693.76 67.4314 Q1688.21 73.7508 1678.49 73.7508 Q1668.73 73.7508 1663.18 67.4314 Q1657.67 61.0714 1657.67 49.9314 Q1657.67 38.7509 1663.18 32.4315 Q1668.73 26.1121 1678.49 26.1121 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1749.38 45.1919 L1749.38 72.576 L1741.93 72.576 L1741.93 45.4349 Q1741.93 38.994 1739.42 35.7938 Q1736.91 32.5936 1731.88 32.5936 Q1725.85 32.5936 1722.36 36.4419 Q1718.88 40.2903 1718.88 46.9338 L1718.88 72.576 L1711.38 72.576 L1711.38 27.2059 L1718.88 27.2059 L1718.88 34.2544 Q1721.55 30.163 1725.16 28.1376 Q1728.8 26.1121 1733.54 26.1121 Q1741.36 26.1121 1745.37 30.9732 Q1749.38 35.7938 1749.38 45.1919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1793.17 28.5427 L1793.17 35.5912 Q1790.01 33.9709 1786.61 33.1607 Q1783.21 32.3505 1779.56 32.3505 Q1774.01 32.3505 1771.22 34.0519 Q1768.46 35.7533 1768.46 39.156 Q1768.46 41.7486 1770.45 43.2475 Q1772.43 44.7058 1778.43 46.0426 L1780.98 46.6097 Q1788.92 48.3111 1792.24 51.4303 Q1795.6 54.509 1795.6 60.0587 Q1795.6 66.3781 1790.58 70.0644 Q1785.6 73.7508 1776.85 73.7508 Q1773.2 73.7508 1769.23 73.0216 Q1765.3 72.3329 1760.93 70.9151 L1760.93 63.2184 Q1765.06 65.3654 1769.07 66.4591 Q1773.08 67.5124 1777.01 67.5124 Q1782.28 67.5124 1785.11 65.73 Q1787.95 63.9071 1787.95 60.6258 Q1787.95 57.5877 1785.88 55.9673 Q1783.86 54.3469 1776.93 52.8481 L1774.34 52.2405 Q1767.41 50.7821 1764.33 47.7845 Q1761.25 44.7463 1761.25 39.4801 Q1761.25 33.0797 1765.79 29.5959 Q1770.33 26.1121 1778.67 26.1121 Q1782.8 26.1121 1786.45 26.7198 Q1790.09 27.3274 1793.17 28.5427 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip022)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"260.83,162.047 260.962,164.032 262.18,182.101 262.913,192.718 263.532,201.555 264.205,211.016 264.825,219.611 265.49,228.695 266.26,239.052 266.944,248.11 267.545,255.942 268.199,264.366 268.857,272.72 269.585,281.82 270.278,290.349 270.998,299.086 271.604,306.339 272.344,315.07 273.022,322.953 273.648,330.136 274.283,337.319 274.994,345.261 275.638,352.36 276.375,360.376 277.058,367.695 277.731,374.814 278.385,381.637 279.055,388.542 279.789,396.006 280.855,406.662 281.074,408.822 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"175.59,1447.87 179.03,1447.87 182.471,1447.87 185.911,1447.87 189.351,1447.87 221.163,1447.87 252.975,1447.86 260.928,1447.85 268.881,1447.81 276.834,1447.75 284.786,1447.64 292.739,1447.46 300.692,1447.19 308.645,1446.81 316.598,1446.29 321.378,1445.91 326.157,1445.47 330.936,1444.96 335.716,1444.39 340.495,1443.74 345.274,1443.03 350.054,1442.26 354.833,1441.41 359.613,1440.49 364.392,1439.5 369.171,1438.46 373.951,1437.35 378.73,1436.18 383.509,1434.96 388.289,1433.69 393.068,1432.38 401.15,1430.07 409.232,1427.68 417.314,1425.23 425.395,1422.76 433.477,1420.29 441.559,1417.84 449.641,1415.45 457.722,1413.12 466.502,1410.71 475.281,1408.42 479.67,1407.34 484.06,1406.29 488.449,1405.29 492.839,1404.33 497.228,1403.42 501.618,1402.55 506.008,1401.73 510.397,1400.95 514.787,1400.23 519.176,1399.55 523.566,1398.92 527.955,1398.34 532.002,1397.85 536.049,1397.4 540.096,1396.99 544.142,1396.62 548.189,1396.3 552.236,1396.01 556.283,1395.76 560.329,1395.55 564.376,1395.37 568.423,1395.23 572.47,1395.13 576.517,1395.07 584.61,1395.03 592.704,1395.13 601.381,1395.37 610.058,1395.73 618.735,1396.22 627.412,1396.81 636.089,1397.5 644.767,1398.27 653.444,1399.13 662.121,1400.05 672.174,1401.19 682.227,1402.4 692.281,1403.66 702.334,1404.96 722.441,1407.65 742.547,1410.4 760.416,1412.84 778.284,1415.24 796.153,1417.58 814.021,1419.84 829.69,1421.74 845.359,1423.55 861.028,1425.28 876.697,1426.92 893.78,1428.6 910.864,1430.17 927.947,1431.64 945.031,1433.01 962.215,1434.28 979.4,1435.46 996.585,1436.54 1013.77,1437.54 1032.77,1438.55 1051.77,1439.47 1070.77,1440.3 1089.77,1441.05 1107.85,1441.7 1125.93,1442.29 1144.01,1442.83 1162.08,1443.32 1180.88,1443.77 1199.68,1444.18 1218.47,1444.55 1237.27,1444.89 1268.92,1445.38 1300.56,1445.79 1339.2,1446.2 1377.84,1446.52 1413.23,1446.77 1448.62,1446.97 1514,1447.24 1580.23,1447.44 1654.45,1447.58 1721.7,1447.67 1798.7,1447.74 1870,1447.78 1940.29,1447.81 2008.54,1447.83 2078.5,1447.84 2155.15,1447.85 2266.5,1447.86 2289.34,1447.86 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"175.59,1338.27 178.784,1339.9 181.979,1341.51 185.174,1343.09 188.368,1344.65 195.753,1348.17 203.138,1351.56 210.522,1354.84 217.907,1358.01 225.292,1361.07 232.676,1364.03 240.061,1366.89 247.446,1369.64 254.83,1372.31 262.215,1374.88 269.6,1377.37 276.984,1379.77 284.369,1382.09 291.754,1384.33 299.138,1386.49 306.523,1388.58 315.399,1391 324.274,1393.32 333.15,1395.55 342.026,1397.68 350.902,1399.73 359.777,1401.69 368.653,1403.58 377.529,1405.39 392.538,1408.27 407.546,1410.97 422.555,1413.48 437.564,1415.82 453.867,1418.18 470.171,1420.37 486.475,1422.39 502.778,1424.27 517.809,1425.88 532.839,1427.37 547.87,1428.77 562.9,1430.07 579.015,1431.37 595.129,1432.57 611.243,1433.68 627.357,1434.72 646.027,1435.82 664.697,1436.83 683.367,1437.76 702.037,1438.61 735.221,1439.94 768.404,1441.09 797.503,1441.95 826.602,1442.71 858.327,1443.42 890.053,1444.04 921.967,1444.57 953.881,1445.03 1024.45,1445.83 1091.6,1446.38 1161.41,1446.8 1220.18,1447.06 1291.94,1447.29 1357.66,1447.45 1418.37,1447.55 1479.86,1447.63 1548.78,1447.7 1611.23,1447.74 1682.73,1447.78 1748.93,1447.8 1814.2,1447.82 1877.57,1447.84 1942.53,1447.85 2013.71,1447.85 2117.1,1447.86 2138.31,1447.86 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M1906.88 376.265 L2278.07 376.265 L2278.07 168.905 L1906.88 168.905  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1906.88,376.265 2278.07,376.265 2278.07,168.905 1906.88,168.905 1906.88,376.265 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1931.78,220.745 2081.15,220.745 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M2110.72 207.307 L2110.72 234.182 L2116.37 234.182 Q2123.52 234.182 2126.83 230.941 Q2130.17 227.701 2130.17 220.71 Q2130.17 213.766 2126.83 210.548 Q2123.52 207.307 2116.37 207.307 L2110.72 207.307 M2106.05 203.465 L2115.65 203.465 Q2125.7 203.465 2130.4 207.654 Q2135.1 211.821 2135.1 220.71 Q2135.1 229.645 2130.37 233.835 Q2125.65 238.025 2115.65 238.025 L2106.05 238.025 L2106.05 203.465 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2152.41 215.085 Q2148.99 215.085 2146.99 217.77 Q2145 220.432 2145 225.085 Q2145 229.738 2146.97 232.423 Q2148.96 235.085 2152.41 235.085 Q2155.81 235.085 2157.8 232.4 Q2159.8 229.715 2159.8 225.085 Q2159.8 220.478 2157.8 217.793 Q2155.81 215.085 2152.41 215.085 M2152.41 211.474 Q2157.97 211.474 2161.14 215.085 Q2164.31 218.696 2164.31 225.085 Q2164.31 231.451 2161.14 235.085 Q2157.97 238.696 2152.41 238.696 Q2146.83 238.696 2143.66 235.085 Q2140.51 231.451 2140.51 225.085 Q2140.51 218.696 2143.66 215.085 Q2146.83 211.474 2152.41 211.474 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2192.92 222.377 L2192.92 238.025 L2188.66 238.025 L2188.66 222.515 Q2188.66 218.835 2187.23 217.006 Q2185.79 215.178 2182.92 215.178 Q2179.47 215.178 2177.48 217.377 Q2175.49 219.576 2175.49 223.372 L2175.49 238.025 L2171.21 238.025 L2171.21 212.099 L2175.49 212.099 L2175.49 216.127 Q2177.02 213.789 2179.08 212.631 Q2181.16 211.474 2183.87 211.474 Q2188.34 211.474 2190.63 214.252 Q2192.92 217.006 2192.92 222.377 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2223.59 223.997 L2223.59 226.08 L2204.01 226.08 Q2204.29 230.478 2206.65 232.793 Q2209.03 235.085 2213.27 235.085 Q2215.72 235.085 2218.01 234.483 Q2220.33 233.881 2222.6 232.677 L2222.6 236.705 Q2220.3 237.677 2217.9 238.187 Q2215.49 238.696 2213.01 238.696 Q2206.81 238.696 2203.17 235.085 Q2199.56 231.474 2199.56 225.316 Q2199.56 218.951 2202.99 215.224 Q2206.44 211.474 2212.27 211.474 Q2217.5 211.474 2220.54 214.853 Q2223.59 218.21 2223.59 223.997 M2219.33 222.747 Q2219.29 219.252 2217.36 217.168 Q2215.47 215.085 2212.32 215.085 Q2208.75 215.085 2206.6 217.099 Q2204.47 219.113 2204.15 222.77 L2219.33 222.747 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip020)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1931.78,272.585 2081.15,272.585 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M2110.72 273.36 L2110.72 286.022 L2118.22 286.022 Q2121.99 286.022 2123.8 284.471 Q2125.63 282.897 2125.63 279.68 Q2125.63 276.439 2123.8 274.911 Q2121.99 273.36 2118.22 273.36 L2110.72 273.36 M2110.72 259.147 L2110.72 269.564 L2117.64 269.564 Q2121.07 269.564 2122.74 268.291 Q2124.43 266.994 2124.43 264.356 Q2124.43 261.74 2122.74 260.444 Q2121.07 259.147 2117.64 259.147 L2110.72 259.147 M2106.05 255.305 L2117.99 255.305 Q2123.34 255.305 2126.23 257.527 Q2129.12 259.749 2129.12 263.846 Q2129.12 267.018 2127.64 268.893 Q2126.16 270.768 2123.29 271.23 Q2126.74 271.971 2128.64 274.332 Q2130.56 276.67 2130.56 280.189 Q2130.56 284.818 2127.41 287.342 Q2124.26 289.865 2118.45 289.865 L2106.05 289.865 L2106.05 255.305 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2153.41 267.92 Q2152.69 267.504 2151.83 267.318 Q2151 267.11 2149.98 267.11 Q2146.37 267.11 2144.43 269.471 Q2142.5 271.809 2142.5 276.207 L2142.5 289.865 L2138.22 289.865 L2138.22 263.939 L2142.5 263.939 L2142.5 267.967 Q2143.85 265.606 2146 264.471 Q2148.15 263.314 2151.23 263.314 Q2151.67 263.314 2152.2 263.383 Q2152.74 263.43 2153.38 263.545 L2153.41 267.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2179.01 275.837 L2179.01 277.92 L2159.43 277.92 Q2159.7 282.318 2162.06 284.633 Q2164.45 286.925 2168.68 286.925 Q2171.14 286.925 2173.43 286.323 Q2175.74 285.721 2178.01 284.517 L2178.01 288.545 Q2175.72 289.517 2173.31 290.027 Q2170.91 290.536 2168.43 290.536 Q2162.23 290.536 2158.59 286.925 Q2154.98 283.314 2154.98 277.156 Q2154.98 270.791 2158.41 267.064 Q2161.86 263.314 2167.69 263.314 Q2172.92 263.314 2175.95 266.693 Q2179.01 270.05 2179.01 275.837 M2174.75 274.587 Q2174.7 271.092 2172.78 269.008 Q2170.88 266.925 2167.74 266.925 Q2164.17 266.925 2162.02 268.939 Q2159.89 270.953 2159.56 274.61 L2174.75 274.587 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2197.78 276.832 Q2192.62 276.832 2190.63 278.013 Q2188.64 279.193 2188.64 282.041 Q2188.64 284.309 2190.12 285.652 Q2191.62 286.971 2194.19 286.971 Q2197.74 286.971 2199.86 284.471 Q2202.02 281.948 2202.02 277.781 L2202.02 276.832 L2197.78 276.832 M2206.28 275.073 L2206.28 289.865 L2202.02 289.865 L2202.02 285.929 Q2200.56 288.291 2198.38 289.425 Q2196.21 290.536 2193.06 290.536 Q2189.08 290.536 2186.72 288.314 Q2184.38 286.068 2184.38 282.318 Q2184.38 277.943 2187.3 275.721 Q2190.24 273.499 2196.05 273.499 L2202.02 273.499 L2202.02 273.082 Q2202.02 270.143 2200.07 268.545 Q2198.15 266.925 2194.66 266.925 Q2192.43 266.925 2190.33 267.457 Q2188.22 267.99 2186.28 269.055 L2186.28 265.119 Q2188.61 264.217 2190.81 263.777 Q2193.01 263.314 2195.1 263.314 Q2200.72 263.314 2203.5 266.231 Q2206.28 269.147 2206.28 275.073 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2214.89 253.846 L2219.17 253.846 L2219.17 275.119 L2231.88 263.939 L2237.32 263.939 L2223.57 276.068 L2237.9 289.865 L2232.34 289.865 L2219.17 277.203 L2219.17 289.865 L2214.89 289.865 L2214.89 253.846 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip020)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1931.78,324.425 2081.15,324.425 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M2122.43 325.501 Q2123.94 326.01 2125.35 327.677 Q2126.79 329.344 2128.22 332.26 L2132.97 341.705 L2127.94 341.705 L2123.52 332.839 Q2121.81 329.367 2120.19 328.233 Q2118.59 327.098 2115.81 327.098 L2110.72 327.098 L2110.72 341.705 L2106.05 341.705 L2106.05 307.145 L2116.6 307.145 Q2122.53 307.145 2125.44 309.621 Q2128.36 312.098 2128.36 317.098 Q2128.36 320.362 2126.83 322.515 Q2125.33 324.668 2122.43 325.501 M2110.72 310.987 L2110.72 323.256 L2116.6 323.256 Q2119.98 323.256 2121.69 321.705 Q2123.43 320.131 2123.43 317.098 Q2123.43 314.066 2121.69 312.538 Q2119.98 310.987 2116.6 310.987 L2110.72 310.987 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2158.85 327.677 L2158.85 329.76 L2139.26 329.76 Q2139.54 334.158 2141.9 336.473 Q2144.29 338.765 2148.52 338.765 Q2150.98 338.765 2153.27 338.163 Q2155.58 337.561 2157.85 336.357 L2157.85 340.385 Q2155.56 341.357 2153.15 341.867 Q2150.74 342.376 2148.27 342.376 Q2142.06 342.376 2138.43 338.765 Q2134.82 335.154 2134.82 328.996 Q2134.82 322.631 2138.24 318.904 Q2141.69 315.154 2147.53 315.154 Q2152.76 315.154 2155.79 318.533 Q2158.85 321.89 2158.85 327.677 M2154.59 326.427 Q2154.54 322.932 2152.62 320.848 Q2150.72 318.765 2147.57 318.765 Q2144.01 318.765 2141.86 320.779 Q2139.73 322.793 2139.4 326.45 L2154.59 326.427 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2169.96 337.816 L2169.96 351.566 L2165.68 351.566 L2165.68 315.779 L2169.96 315.779 L2169.96 319.714 Q2171.3 317.399 2173.34 316.288 Q2175.4 315.154 2178.24 315.154 Q2182.97 315.154 2185.91 318.904 Q2188.87 322.654 2188.87 328.765 Q2188.87 334.876 2185.91 338.626 Q2182.97 342.376 2178.24 342.376 Q2175.4 342.376 2173.34 341.265 Q2171.3 340.131 2169.96 337.816 M2184.45 328.765 Q2184.45 324.066 2182.5 321.404 Q2180.58 318.719 2177.2 318.719 Q2173.82 318.719 2171.88 321.404 Q2169.96 324.066 2169.96 328.765 Q2169.96 333.464 2171.88 336.149 Q2173.82 338.811 2177.2 338.811 Q2180.58 338.811 2182.5 336.149 Q2184.45 333.464 2184.45 328.765 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2207.71 328.672 Q2202.55 328.672 2200.56 329.853 Q2198.57 331.033 2198.57 333.881 Q2198.57 336.149 2200.05 337.492 Q2201.55 338.811 2204.12 338.811 Q2207.67 338.811 2209.8 336.311 Q2211.95 333.788 2211.95 329.621 L2211.95 328.672 L2207.71 328.672 M2216.21 326.913 L2216.21 341.705 L2211.95 341.705 L2211.95 337.769 Q2210.49 340.131 2208.31 341.265 Q2206.14 342.376 2202.99 342.376 Q2199.01 342.376 2196.65 340.154 Q2194.31 337.908 2194.31 334.158 Q2194.31 329.783 2197.23 327.561 Q2200.17 325.339 2205.98 325.339 L2211.95 325.339 L2211.95 324.922 Q2211.95 321.983 2210 320.385 Q2208.08 318.765 2204.59 318.765 Q2202.36 318.765 2200.26 319.297 Q2198.15 319.83 2196.21 320.895 L2196.21 316.959 Q2198.55 316.057 2200.74 315.617 Q2202.94 315.154 2205.03 315.154 Q2210.65 315.154 2213.43 318.071 Q2216.21 320.987 2216.21 326.913 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2224.98 315.779 L2229.24 315.779 L2229.24 341.705 L2224.98 341.705 L2224.98 315.779 M2224.98 305.686 L2229.24 305.686 L2229.24 311.08 L2224.98 311.08 L2224.98 305.686 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2253.17 319.76 Q2252.46 319.344 2251.6 319.158 Q2250.77 318.95 2249.75 318.95 Q2246.14 318.95 2244.19 321.311 Q2242.27 323.649 2242.27 328.047 L2242.27 341.705 L2237.99 341.705 L2237.99 315.779 L2242.27 315.779 L2242.27 319.807 Q2243.61 317.446 2245.77 316.311 Q2247.92 315.154 2251 315.154 Q2251.44 315.154 2251.97 315.223 Q2252.5 315.27 2253.15 315.385 L2253.17 319.76 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"The short blue line in the upper-left is the probability distribution function for a LogUniform distribution that represents the time a vehicle drives on a single day. You can see that these vehicles break about once a week and take a couple of days to repair, on average.","category":"page"},{"location":"reliability/#Run-the-Simulation","page":"Reliability","title":"Run the Simulation","text":"","category":"section"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"Running a simulation means we are sampling from the stochastic process. For a continuous-time stochastic process like this, that means asking the sampler when the next transition is and which transition it is. If there are no possible transitions, the next time will be infinite and the chosen transition will be nothing.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"function run(experiment::Experiment, observation, days)\n    sampler = FirstToFire{key_type(experiment),Float64}()\n    rng = experiment.rng\n    rate = Uniform(next_work_time(0.0, experiment.start_time)...)\n    for initial in 1:length(experiment.group)\n        enable!(sampler, (initial, :work), rate, 0.0, 0.0, rng)\n    end\n    when, which = next(sampler, experiment.time, rng)\n    while isfinite(when) && when < days\n        # We use different observers to record the simulation.\n        observe(experiment, observation, when, which)\n        @debug \"$when $which\"\n        handle_event(when, which, experiment, sampler)\n        when, which = next(sampler, experiment.time, rng)\n    end\nend","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"run (generic function with 1 method)","category":"page"},{"location":"reliability/#Observers","page":"Reliability","title":"Observers","text":"","category":"section"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"Without care, data collection from continuous-time simulation can generate a lot of data quickly. In many cases, especially for performance analysis, not every event time and transition is important. Therefore, to avoid saving the raw data stream, we use observers of the system to summarize that data. Construction of observers is important as it connects the simulation to tools or analyses that may be used to guide decision-making. It also identifies which variables and metrics are most important.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"Let's look at a few examples for the vehicle crew.","category":"page"},{"location":"reliability/#Continuous-time-Summary-Observer","page":"Reliability","title":"Continuous-time Summary Observer","text":"","category":"section"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"The first example will record data at every transition, but it will record only the total number of working or broken vehicles.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"This represents a single time point.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"struct ContinuousRec\n    working::Int64\n    broken::Int64\n    total_age::Float64\n    time::Float64\nend","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"The observer stores a vector of those single time points.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"mutable struct ObserveContinuous\n    state::Vector{ContinuousRec}\n    ObserveContinuous() = new([ContinuousRec(0, 0, 0.0, 0.0)])\nend","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"This observer keeps a running sum of the number working and broken. Note that it has to know how different transitions change those numbers. The relationship between the transition and how it changes counts is called stochiometry (or stoichiometry), because it was first observed for chemical simulations. Both chemical simualtions and GSPN would have this information encoded in a formal model.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"function observe(experiment::Experiment, observation::ObserveContinuous, when, which)\n    who, transition = which\n    working = observation.state[end].working\n    broken = observation.state[end].broken\n    if transition == :work\n        working += 1\n    elseif transition == :done\n        working -= 1\n    elseif transition == :break\n        broken += 1\n        working -= 1\n    elseif transition == :repair\n        broken -= 1\n    else\n        @assert transition ∈ (:work, :done, :break, :repair)\n    end\n    total_age = sum(w.work_age for w in experiment.group)\n    push!(observation.state, ContinuousRec(working, broken, total_age, when))\nend;","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"This plot shows a timeline of the count of working and broken vehicles over five days.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"function plot_timeline(obs::ObserveContinuous, experiment::Experiment)\n    state = obs.state\n    last_time = state[end].time\n    first_idx = findlast([x.time < last_time - 5 for x in state])\n    times = [x.time for x in state[first_idx:end]]\n    times .-= 4009\n    working = [x.working for x in state[first_idx:end]]\n    broken = [x.broken for x in state[first_idx:end]]\n    ready = [worker_cnt(experiment) - x.working - x.broken for x in state[first_idx:end]]\n    plot(times, working, label=\"working\", line=(:steppost, 2))\n    plot!(times, broken, label=\"broken\", line=(:steppost, 2))\n    xlabel!(\"Time [days]\")\n    ylabel!(\"Status [count]\")\n    title!(\"Timeline of Work Crew Over Five Days\")\nend\n\nfunction show_typical_timeline()\n    rng = Xoshiro(9234232)\n    years = 11\n    day_cnt = 365 * years\n    worker_cnt = 16\n    experiment = Experiment(worker_cnt, 10, rng)\n    observation = ObserveContinuous()\n    run(experiment, observation, day_cnt)\n\n    plot_timeline(observation, experiment)\nend\nshow_typical_timeline()","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip050\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip050)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip051\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip050)\" d=\"M247.459 1423.18 L2352.76 1423.18 L2352.76 123.472 L247.459 123.472  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip052\">\n    <rect x=\"247\" y=\"123\" width=\"2106\" height=\"1301\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"318.703,1423.18 318.703,123.472 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"715.051,1423.18 715.051,123.472 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1111.4,1423.18 1111.4,123.472 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1507.75,1423.18 1507.75,123.472 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1904.09,1423.18 1904.09,123.472 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2300.44,1423.18 2300.44,123.472 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"247.459,1423.18 2352.76,1423.18 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"318.703,1423.18 318.703,1404.28 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"715.051,1423.18 715.051,1404.28 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1111.4,1423.18 1111.4,1404.28 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1507.75,1423.18 1507.75,1404.28 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1904.09,1423.18 1904.09,1404.28 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2300.44,1423.18 2300.44,1404.28 \"/>\n<path clip-path=\"url(#clip050)\" d=\"M309.085 1481.64 L316.724 1481.64 L316.724 1455.28 L308.414 1456.95 L308.414 1452.69 L316.678 1451.02 L321.354 1451.02 L321.354 1481.64 L328.993 1481.64 L328.993 1485.58 L309.085 1485.58 L309.085 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M709.704 1481.64 L726.023 1481.64 L726.023 1485.58 L704.079 1485.58 L704.079 1481.64 Q706.741 1478.89 711.324 1474.26 Q715.931 1469.61 717.111 1468.27 Q719.357 1465.74 720.236 1464.01 Q721.139 1462.25 721.139 1460.56 Q721.139 1457.8 719.195 1456.07 Q717.273 1454.33 714.172 1454.33 Q711.973 1454.33 709.519 1455.09 Q707.088 1455.86 704.311 1457.41 L704.311 1452.69 Q707.135 1451.55 709.588 1450.97 Q712.042 1450.39 714.079 1450.39 Q719.449 1450.39 722.644 1453.08 Q725.838 1455.77 725.838 1460.26 Q725.838 1462.39 725.028 1464.31 Q724.241 1466.2 722.135 1468.8 Q721.556 1469.47 718.454 1472.69 Q715.352 1475.88 709.704 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1115.65 1466.95 Q1119 1467.66 1120.88 1469.93 Q1122.78 1472.2 1122.78 1475.53 Q1122.78 1480.65 1119.26 1483.45 Q1115.74 1486.25 1109.26 1486.25 Q1107.08 1486.25 1104.77 1485.81 Q1102.48 1485.39 1100.02 1484.54 L1100.02 1480.02 Q1101.97 1481.16 1104.28 1481.74 Q1106.6 1482.32 1109.12 1482.32 Q1113.52 1482.32 1115.81 1480.58 Q1118.12 1478.84 1118.12 1475.53 Q1118.12 1472.48 1115.97 1470.77 Q1113.84 1469.03 1110.02 1469.03 L1105.99 1469.03 L1105.99 1465.19 L1110.21 1465.19 Q1113.66 1465.19 1115.48 1463.82 Q1117.31 1462.43 1117.31 1459.84 Q1117.31 1457.18 1115.42 1455.77 Q1113.54 1454.33 1110.02 1454.33 Q1108.1 1454.33 1105.9 1454.75 Q1103.7 1455.16 1101.06 1456.04 L1101.06 1451.88 Q1103.73 1451.14 1106.04 1450.77 Q1108.38 1450.39 1110.44 1450.39 Q1115.76 1450.39 1118.86 1452.83 Q1121.97 1455.23 1121.97 1459.35 Q1121.97 1462.22 1120.32 1464.21 Q1118.68 1466.18 1115.65 1466.95 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1510.76 1455.09 L1498.95 1473.54 L1510.76 1473.54 L1510.76 1455.09 M1509.53 1451.02 L1515.41 1451.02 L1515.41 1473.54 L1520.34 1473.54 L1520.34 1477.43 L1515.41 1477.43 L1515.41 1485.58 L1510.76 1485.58 L1510.76 1477.43 L1495.15 1477.43 L1495.15 1472.92 L1509.53 1451.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1894.37 1451.02 L1912.73 1451.02 L1912.73 1454.96 L1898.65 1454.96 L1898.65 1463.43 Q1899.67 1463.08 1900.69 1462.92 Q1901.71 1462.73 1902.73 1462.73 Q1908.52 1462.73 1911.9 1465.9 Q1915.28 1469.08 1915.28 1474.49 Q1915.28 1480.07 1911.8 1483.17 Q1908.33 1486.25 1902.01 1486.25 Q1899.84 1486.25 1897.57 1485.88 Q1895.32 1485.51 1892.91 1484.77 L1892.91 1480.07 Q1895 1481.2 1897.22 1481.76 Q1899.44 1482.32 1901.92 1482.32 Q1905.92 1482.32 1908.26 1480.21 Q1910.6 1478.1 1910.6 1474.49 Q1910.6 1470.88 1908.26 1468.77 Q1905.92 1466.67 1901.92 1466.67 Q1900.04 1466.67 1898.17 1467.08 Q1896.32 1467.5 1894.37 1468.38 L1894.37 1451.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2300.85 1466.44 Q2297.7 1466.44 2295.85 1468.59 Q2294.02 1470.74 2294.02 1474.49 Q2294.02 1478.22 2295.85 1480.39 Q2297.7 1482.55 2300.85 1482.55 Q2304 1482.55 2305.82 1480.39 Q2307.68 1478.22 2307.68 1474.49 Q2307.68 1470.74 2305.82 1468.59 Q2304 1466.44 2300.85 1466.44 M2310.13 1451.78 L2310.13 1456.04 Q2308.37 1455.21 2306.56 1454.77 Q2304.78 1454.33 2303.02 1454.33 Q2298.39 1454.33 2295.94 1457.45 Q2293.51 1460.58 2293.16 1466.9 Q2294.53 1464.89 2296.59 1463.82 Q2298.65 1462.73 2301.13 1462.73 Q2306.33 1462.73 2309.34 1465.9 Q2312.38 1469.05 2312.38 1474.49 Q2312.38 1479.82 2309.23 1483.03 Q2306.08 1486.25 2300.85 1486.25 Q2294.85 1486.25 2291.68 1481.67 Q2288.51 1477.06 2288.51 1468.33 Q2288.51 1460.14 2292.4 1455.28 Q2296.29 1450.39 2302.84 1450.39 Q2304.6 1450.39 2306.38 1450.74 Q2308.19 1451.09 2310.13 1451.78 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1110.33 1520.52 L1150.53 1520.52 L1150.53 1525.93 L1133.66 1525.93 L1133.66 1568.04 L1127.2 1568.04 L1127.2 1525.93 L1110.33 1525.93 L1110.33 1520.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1154.48 1532.4 L1160.33 1532.4 L1160.33 1568.04 L1154.48 1568.04 L1154.48 1532.4 M1154.48 1518.52 L1160.33 1518.52 L1160.33 1525.93 L1154.48 1525.93 L1154.48 1518.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1200.34 1539.24 Q1202.54 1535.29 1205.59 1533.41 Q1208.65 1531.54 1212.79 1531.54 Q1218.36 1531.54 1221.38 1535.45 Q1224.4 1539.33 1224.4 1546.53 L1224.4 1568.04 L1218.51 1568.04 L1218.51 1546.72 Q1218.51 1541.59 1216.7 1539.11 Q1214.89 1536.63 1211.16 1536.63 Q1206.61 1536.63 1203.97 1539.65 Q1201.33 1542.68 1201.33 1547.9 L1201.33 1568.04 L1195.44 1568.04 L1195.44 1546.72 Q1195.44 1541.56 1193.62 1539.11 Q1191.81 1536.63 1188.02 1536.63 Q1183.54 1536.63 1180.89 1539.68 Q1178.25 1542.71 1178.25 1547.9 L1178.25 1568.04 L1172.36 1568.04 L1172.36 1532.4 L1178.25 1532.4 L1178.25 1537.93 Q1180.26 1534.66 1183.06 1533.1 Q1185.86 1531.54 1189.71 1531.54 Q1193.59 1531.54 1196.3 1533.51 Q1199.04 1535.48 1200.34 1539.24 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1266.58 1548.76 L1266.58 1551.62 L1239.65 1551.62 Q1240.03 1557.67 1243.28 1560.85 Q1246.56 1564 1252.38 1564 Q1255.75 1564 1258.91 1563.17 Q1262.09 1562.35 1265.21 1560.69 L1265.21 1566.23 Q1262.06 1567.57 1258.75 1568.27 Q1255.44 1568.97 1252.03 1568.97 Q1243.5 1568.97 1238.5 1564 Q1233.54 1559.04 1233.54 1550.57 Q1233.54 1541.82 1238.25 1536.69 Q1242.99 1531.54 1251.01 1531.54 Q1258.21 1531.54 1262.37 1536.18 Q1266.58 1540.8 1266.58 1548.76 M1260.72 1547.04 Q1260.66 1542.23 1258.01 1539.37 Q1255.4 1536.5 1251.08 1536.5 Q1246.17 1536.5 1243.21 1539.27 Q1240.29 1542.04 1239.84 1547.07 L1260.72 1547.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1296.37 1518.52 L1309.86 1518.52 L1309.86 1523.07 L1302.22 1523.07 L1302.22 1572.09 L1309.86 1572.09 L1309.86 1576.64 L1296.37 1576.64 L1296.37 1518.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1345.8 1537.81 L1345.8 1518.52 L1351.65 1518.52 L1351.65 1568.04 L1345.8 1568.04 L1345.8 1562.7 Q1343.95 1565.88 1341.12 1567.44 Q1338.32 1568.97 1334.37 1568.97 Q1327.91 1568.97 1323.84 1563.81 Q1319.79 1558.65 1319.79 1550.25 Q1319.79 1541.85 1323.84 1536.69 Q1327.91 1531.54 1334.37 1531.54 Q1338.32 1531.54 1341.12 1533.1 Q1343.95 1534.62 1345.8 1537.81 M1325.84 1550.25 Q1325.84 1556.71 1328.48 1560.4 Q1331.16 1564.07 1335.8 1564.07 Q1340.45 1564.07 1343.12 1560.4 Q1345.8 1556.71 1345.8 1550.25 Q1345.8 1543.79 1343.12 1540.13 Q1340.45 1536.44 1335.8 1536.44 Q1331.16 1536.44 1328.48 1540.13 Q1325.84 1543.79 1325.84 1550.25 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1379.92 1550.12 Q1372.82 1550.12 1370.08 1551.75 Q1367.35 1553.37 1367.35 1557.29 Q1367.35 1560.4 1369.38 1562.25 Q1371.45 1564.07 1374.98 1564.07 Q1379.85 1564.07 1382.78 1560.63 Q1385.74 1557.16 1385.74 1551.43 L1385.74 1550.12 L1379.92 1550.12 M1391.6 1547.71 L1391.6 1568.04 L1385.74 1568.04 L1385.74 1562.63 Q1383.74 1565.88 1380.74 1567.44 Q1377.75 1568.97 1373.42 1568.97 Q1367.95 1568.97 1364.7 1565.91 Q1361.49 1562.82 1361.49 1557.67 Q1361.49 1551.65 1365.5 1548.6 Q1369.54 1545.54 1377.53 1545.54 L1385.74 1545.54 L1385.74 1544.97 Q1385.74 1540.93 1383.07 1538.73 Q1380.43 1536.5 1375.62 1536.5 Q1372.56 1536.5 1369.67 1537.23 Q1366.77 1537.97 1364.1 1539.43 L1364.1 1534.02 Q1367.31 1532.78 1370.34 1532.17 Q1373.36 1531.54 1376.23 1531.54 Q1383.96 1531.54 1387.78 1535.55 Q1391.6 1539.56 1391.6 1547.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1418.49 1571.35 Q1416.01 1577.72 1413.66 1579.66 Q1411.3 1581.6 1407.35 1581.6 L1402.67 1581.6 L1402.67 1576.7 L1406.11 1576.7 Q1408.53 1576.7 1409.87 1575.56 Q1411.2 1574.41 1412.83 1570.14 L1413.88 1567.47 L1399.46 1532.4 L1405.67 1532.4 L1416.81 1560.28 L1427.95 1532.4 L1434.15 1532.4 L1418.49 1571.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1464.96 1533.45 L1464.96 1538.98 Q1462.48 1537.71 1459.81 1537.07 Q1457.13 1536.44 1454.27 1536.44 Q1449.91 1536.44 1447.71 1537.77 Q1445.55 1539.11 1445.55 1541.79 Q1445.55 1543.82 1447.11 1545 Q1448.67 1546.15 1453.38 1547.2 L1455.38 1547.64 Q1461.62 1548.98 1464.23 1551.43 Q1466.87 1553.85 1466.87 1558.21 Q1466.87 1563.17 1462.93 1566.07 Q1459.01 1568.97 1452.14 1568.97 Q1449.27 1568.97 1446.15 1568.39 Q1443.07 1567.85 1439.63 1566.74 L1439.63 1560.69 Q1442.87 1562.38 1446.03 1563.24 Q1449.18 1564.07 1452.26 1564.07 Q1456.4 1564.07 1458.63 1562.66 Q1460.86 1561.23 1460.86 1558.65 Q1460.86 1556.27 1459.23 1554.99 Q1457.64 1553.72 1452.2 1552.54 L1450.16 1552.07 Q1444.72 1550.92 1442.3 1548.56 Q1439.88 1546.18 1439.88 1542.04 Q1439.88 1537.01 1443.45 1534.27 Q1447.01 1531.54 1453.57 1531.54 Q1456.82 1531.54 1459.68 1532.01 Q1462.54 1532.49 1464.96 1533.45 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1489.88 1518.52 L1489.88 1576.64 L1476.39 1576.64 L1476.39 1572.09 L1484 1572.09 L1484 1523.07 L1476.39 1523.07 L1476.39 1518.52 L1489.88 1518.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"247.459,1386.4 2352.76,1386.4 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"247.459,1079.86 2352.76,1079.86 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"247.459,773.326 2352.76,773.326 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"247.459,466.791 2352.76,466.791 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"247.459,160.256 2352.76,160.256 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"247.459,1423.18 247.459,123.472 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"247.459,1386.4 266.356,1386.4 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"247.459,1079.86 266.356,1079.86 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"247.459,773.326 266.356,773.326 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"247.459,466.791 266.356,466.791 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"247.459,160.256 266.356,160.256 \"/>\n<path clip-path=\"url(#clip050)\" d=\"M154.283 1372.19 Q150.672 1372.19 148.843 1375.76 Q147.038 1379.3 147.038 1386.43 Q147.038 1393.54 148.843 1397.1 Q150.672 1400.64 154.283 1400.64 Q157.917 1400.64 159.723 1397.1 Q161.552 1393.54 161.552 1386.43 Q161.552 1379.3 159.723 1375.76 Q157.917 1372.19 154.283 1372.19 M154.283 1368.49 Q160.093 1368.49 163.149 1373.1 Q166.227 1377.68 166.227 1386.43 Q166.227 1395.16 163.149 1399.76 Q160.093 1404.35 154.283 1404.35 Q148.473 1404.35 145.394 1399.76 Q142.339 1395.16 142.339 1386.43 Q142.339 1377.68 145.394 1373.1 Q148.473 1368.49 154.283 1368.49 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M174.445 1397.8 L179.329 1397.8 L179.329 1403.68 L174.445 1403.68 L174.445 1397.8 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M199.514 1372.19 Q195.903 1372.19 194.075 1375.76 Q192.269 1379.3 192.269 1386.43 Q192.269 1393.54 194.075 1397.1 Q195.903 1400.64 199.514 1400.64 Q203.149 1400.64 204.954 1397.1 Q206.783 1393.54 206.783 1386.43 Q206.783 1379.3 204.954 1375.76 Q203.149 1372.19 199.514 1372.19 M199.514 1368.49 Q205.324 1368.49 208.38 1373.1 Q211.459 1377.68 211.459 1386.43 Q211.459 1395.16 208.38 1399.76 Q205.324 1404.35 199.514 1404.35 Q193.704 1404.35 190.625 1399.76 Q187.57 1395.16 187.57 1386.43 Q187.57 1377.68 190.625 1373.1 Q193.704 1368.49 199.514 1368.49 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M149.306 1093.21 L165.626 1093.21 L165.626 1097.14 L143.681 1097.14 L143.681 1093.21 Q146.343 1090.45 150.927 1085.82 Q155.533 1081.17 156.714 1079.83 Q158.959 1077.3 159.839 1075.57 Q160.741 1073.81 160.741 1072.12 Q160.741 1069.36 158.797 1067.63 Q156.876 1065.89 153.774 1065.89 Q151.575 1065.89 149.121 1066.65 Q146.691 1067.42 143.913 1068.97 L143.913 1064.25 Q146.737 1063.11 149.191 1062.53 Q151.644 1061.96 153.681 1061.96 Q159.052 1061.96 162.246 1064.64 Q165.44 1067.33 165.44 1071.82 Q165.44 1073.95 164.63 1075.87 Q163.843 1077.77 161.737 1080.36 Q161.158 1081.03 158.056 1084.25 Q154.954 1087.44 149.306 1093.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M175.44 1091.26 L180.325 1091.26 L180.325 1097.14 L175.44 1097.14 L175.44 1091.26 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M190.556 1062.58 L208.912 1062.58 L208.912 1066.52 L194.838 1066.52 L194.838 1074.99 Q195.857 1074.64 196.875 1074.48 Q197.894 1074.29 198.912 1074.29 Q204.699 1074.29 208.079 1077.47 Q211.459 1080.64 211.459 1086.05 Q211.459 1091.63 207.987 1094.73 Q204.514 1097.81 198.195 1097.81 Q196.019 1097.81 193.75 1097.44 Q191.505 1097.07 189.098 1096.33 L189.098 1091.63 Q191.181 1092.77 193.403 1093.32 Q195.625 1093.88 198.102 1093.88 Q202.107 1093.88 204.445 1091.77 Q206.783 1089.66 206.783 1086.05 Q206.783 1082.44 204.445 1080.34 Q202.107 1078.23 198.102 1078.23 Q196.227 1078.23 194.352 1078.65 Q192.5 1079.06 190.556 1079.94 L190.556 1062.58 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M144.329 756.046 L162.686 756.046 L162.686 759.981 L148.612 759.981 L148.612 768.453 Q149.63 768.106 150.649 767.944 Q151.667 767.759 152.686 767.759 Q158.473 767.759 161.852 770.93 Q165.232 774.101 165.232 779.518 Q165.232 785.097 161.76 788.199 Q158.288 791.277 151.968 791.277 Q149.792 791.277 147.524 790.907 Q145.279 790.537 142.871 789.796 L142.871 785.097 Q144.954 786.231 147.177 786.787 Q149.399 787.342 151.876 787.342 Q155.88 787.342 158.218 785.236 Q160.556 783.129 160.556 779.518 Q160.556 775.907 158.218 773.801 Q155.88 771.694 151.876 771.694 Q150.001 771.694 148.126 772.111 Q146.274 772.527 144.329 773.407 L144.329 756.046 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M174.445 784.726 L179.329 784.726 L179.329 790.606 L174.445 790.606 L174.445 784.726 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M199.514 759.125 Q195.903 759.125 194.075 762.689 Q192.269 766.231 192.269 773.361 Q192.269 780.467 194.075 784.032 Q195.903 787.574 199.514 787.574 Q203.149 787.574 204.954 784.032 Q206.783 780.467 206.783 773.361 Q206.783 766.231 204.954 762.689 Q203.149 759.125 199.514 759.125 M199.514 755.421 Q205.324 755.421 208.38 760.027 Q211.459 764.611 211.459 773.361 Q211.459 782.088 208.38 786.694 Q205.324 791.277 199.514 791.277 Q193.704 791.277 190.625 786.694 Q187.57 782.088 187.57 773.361 Q187.57 764.611 190.625 760.027 Q193.704 755.421 199.514 755.421 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M144.098 449.511 L166.32 449.511 L166.32 451.502 L153.774 484.071 L148.89 484.071 L160.695 453.446 L144.098 453.446 L144.098 449.511 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M175.44 478.192 L180.325 478.192 L180.325 484.071 L175.44 484.071 L175.44 478.192 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M190.556 449.511 L208.912 449.511 L208.912 453.446 L194.838 453.446 L194.838 461.918 Q195.857 461.571 196.875 461.409 Q197.894 461.224 198.912 461.224 Q204.699 461.224 208.079 464.395 Q211.459 467.567 211.459 472.983 Q211.459 478.562 207.987 481.664 Q204.514 484.742 198.195 484.742 Q196.019 484.742 193.75 484.372 Q191.505 484.002 189.098 483.261 L189.098 478.562 Q191.181 479.696 193.403 480.252 Q195.625 480.807 198.102 480.807 Q202.107 480.807 204.445 478.701 Q206.783 476.594 206.783 472.983 Q206.783 469.372 204.445 467.266 Q202.107 465.159 198.102 465.159 Q196.227 465.159 194.352 465.576 Q192.5 465.993 190.556 466.872 L190.556 449.511 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M114.931 173.601 L122.57 173.601 L122.57 147.236 L114.26 148.902 L114.26 144.643 L122.524 142.976 L127.2 142.976 L127.2 173.601 L134.839 173.601 L134.839 177.536 L114.931 177.536 L114.931 173.601 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M154.283 146.055 Q150.672 146.055 148.843 149.62 Q147.038 153.161 147.038 160.291 Q147.038 167.397 148.843 170.962 Q150.672 174.504 154.283 174.504 Q157.917 174.504 159.723 170.962 Q161.552 167.397 161.552 160.291 Q161.552 153.161 159.723 149.62 Q157.917 146.055 154.283 146.055 M154.283 142.351 Q160.093 142.351 163.149 146.958 Q166.227 151.541 166.227 160.291 Q166.227 169.018 163.149 173.624 Q160.093 178.208 154.283 178.208 Q148.473 178.208 145.394 173.624 Q142.339 169.018 142.339 160.291 Q142.339 151.541 145.394 146.958 Q148.473 142.351 154.283 142.351 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M174.445 171.657 L179.329 171.657 L179.329 177.536 L174.445 177.536 L174.445 171.657 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M199.514 146.055 Q195.903 146.055 194.075 149.62 Q192.269 153.161 192.269 160.291 Q192.269 167.397 194.075 170.962 Q195.903 174.504 199.514 174.504 Q203.149 174.504 204.954 170.962 Q206.783 167.397 206.783 160.291 Q206.783 153.161 204.954 149.62 Q203.149 146.055 199.514 146.055 M199.514 142.351 Q205.324 142.351 208.38 146.958 Q211.459 151.541 211.459 160.291 Q211.459 169.018 208.38 173.624 Q205.324 178.208 199.514 178.208 Q193.704 178.208 190.625 173.624 Q187.57 169.018 187.57 160.291 Q187.57 151.541 190.625 146.958 Q193.704 142.351 199.514 142.351 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M18.0438 969.39 L24.314 969.39 Q22.5634 973.05 21.704 976.297 Q20.8447 979.543 20.8447 982.567 Q20.8447 987.818 22.8817 990.683 Q24.9187 993.516 28.6745 993.516 Q31.8255 993.516 33.4488 991.638 Q35.0402 989.728 36.0269 984.445 L36.8226 980.562 Q38.1912 973.368 41.6605 969.963 Q45.098 966.525 50.8908 966.525 Q57.7976 966.525 61.3624 971.172 Q64.9272 975.787 64.9272 984.731 Q64.9272 988.105 64.1633 991.924 Q63.3994 995.712 61.9035 999.786 L55.2831 999.786 Q57.4793 995.871 58.5933 992.115 Q59.7073 988.36 59.7073 984.731 Q59.7073 979.225 57.543 976.233 Q55.3786 973.241 51.3682 973.241 Q47.8671 973.241 45.8937 975.405 Q43.9204 977.538 42.9337 982.439 L42.1698 986.354 Q40.7375 993.548 37.682 996.762 Q34.6264 999.977 29.1837 999.977 Q22.8817 999.977 19.2532 995.553 Q15.6248 991.097 15.6248 983.299 Q15.6248 979.957 16.2295 976.488 Q16.8343 973.018 18.0438 969.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M18.2347 950.961 L28.3562 950.961 L28.3562 938.898 L32.9077 938.898 L32.9077 950.961 L52.2594 950.961 Q56.6199 950.961 57.8613 949.783 Q59.1026 948.574 59.1026 944.914 L59.1026 938.898 L64.0042 938.898 L64.0042 944.914 Q64.0042 951.693 61.4897 954.271 Q58.9434 956.849 52.2594 956.849 L32.9077 956.849 L32.9077 961.146 L28.3562 961.146 L28.3562 956.849 L18.2347 956.849 L18.2347 950.961 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M46.0847 914.995 Q46.0847 922.093 47.7079 924.83 Q49.3312 927.567 53.2461 927.567 Q56.3653 927.567 58.2114 925.53 Q60.0256 923.461 60.0256 919.928 Q60.0256 915.058 56.5881 912.13 Q53.1188 909.17 47.3897 909.17 L46.0847 909.17 L46.0847 914.995 M43.6657 903.314 L64.0042 903.314 L64.0042 909.17 L58.5933 909.17 Q61.8398 911.175 63.3994 914.167 Q64.9272 917.159 64.9272 921.488 Q64.9272 926.962 61.8716 930.209 Q58.7843 933.424 53.6281 933.424 Q47.6125 933.424 44.5569 929.413 Q41.5014 925.371 41.5014 917.382 L41.5014 909.17 L40.9285 909.17 Q36.8862 909.17 34.6901 911.844 Q32.4621 914.486 32.4621 919.292 Q32.4621 922.347 33.1941 925.244 Q33.9262 928.14 35.3903 930.814 L29.9795 930.814 Q28.7381 927.599 28.1334 924.575 Q27.4968 921.551 27.4968 918.687 Q27.4968 910.953 31.5072 907.133 Q35.5176 903.314 43.6657 903.314 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M18.2347 885.458 L28.3562 885.458 L28.3562 873.395 L32.9077 873.395 L32.9077 885.458 L52.2594 885.458 Q56.6199 885.458 57.8613 884.28 Q59.1026 883.071 59.1026 879.41 L59.1026 873.395 L64.0042 873.395 L64.0042 879.41 Q64.0042 886.19 61.4897 888.768 Q58.9434 891.346 52.2594 891.346 L32.9077 891.346 L32.9077 895.643 L28.3562 895.643 L28.3562 891.346 L18.2347 891.346 L18.2347 885.458 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M49.9359 866.297 L28.3562 866.297 L28.3562 860.441 L49.7131 860.441 Q54.7739 860.441 57.3202 858.467 Q59.8346 856.494 59.8346 852.547 Q59.8346 847.805 56.8109 845.067 Q53.7872 842.298 48.5673 842.298 L28.3562 842.298 L28.3562 836.442 L64.0042 836.442 L64.0042 842.298 L58.5296 842.298 Q61.7762 844.431 63.3676 847.264 Q64.9272 850.065 64.9272 853.789 Q64.9272 859.931 61.1078 863.114 Q57.2883 866.297 49.9359 866.297 M27.4968 851.561 L27.4968 851.561 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M29.4065 801.653 L34.9447 801.653 Q33.6716 804.136 33.035 806.81 Q32.3984 809.483 32.3984 812.348 Q32.3984 816.708 33.7352 818.904 Q35.072 821.069 37.7456 821.069 Q39.7826 821.069 40.9603 819.509 Q42.1061 817.95 43.1565 813.239 L43.6021 811.234 Q44.9389 804.995 47.3897 802.385 Q49.8086 799.744 54.1691 799.744 Q59.1344 799.744 62.0308 803.69 Q64.9272 807.605 64.9272 814.48 Q64.9272 817.345 64.3543 820.464 Q63.8132 823.551 62.6992 826.989 L56.6518 826.989 Q58.3387 823.742 59.198 820.591 Q60.0256 817.44 60.0256 814.353 Q60.0256 810.215 58.6251 807.987 Q57.1929 805.759 54.6147 805.759 Q52.2276 805.759 50.9545 807.383 Q49.6813 808.974 48.5037 814.417 L48.0262 816.454 Q46.8804 821.896 44.5251 824.315 Q42.138 826.734 38.0002 826.734 Q32.9713 826.734 30.2341 823.169 Q27.4968 819.605 27.4968 813.048 Q27.4968 809.801 27.9743 806.937 Q28.4517 804.072 29.4065 801.653 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M14.479 770.239 L14.479 756.743 L19.0304 756.743 L19.0304 764.382 L68.0464 764.382 L68.0464 756.743 L72.5979 756.743 L72.5979 770.239 L14.479 770.239 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M29.7248 718.613 L35.1993 718.613 Q33.8307 721.095 33.1623 723.61 Q32.4621 726.092 32.4621 728.639 Q32.4621 734.336 36.0905 737.487 Q39.6872 740.638 46.212 740.638 Q52.7369 740.638 56.3653 737.487 Q59.9619 734.336 59.9619 728.639 Q59.9619 726.092 59.2935 723.61 Q58.5933 721.095 57.2247 718.613 L62.6355 718.613 Q63.7814 721.064 64.3543 723.705 Q64.9272 726.315 64.9272 729.275 Q64.9272 737.328 59.8664 742.07 Q54.8057 746.813 46.212 746.813 Q37.491 746.813 32.4939 742.039 Q27.4968 737.232 27.4968 728.893 Q27.4968 726.188 28.0697 723.61 Q28.6108 721.032 29.7248 718.613 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M32.4621 694.614 Q32.4621 699.325 36.1542 702.062 Q39.8145 704.799 46.212 704.799 Q52.6095 704.799 56.3017 702.094 Q59.9619 699.356 59.9619 694.614 Q59.9619 689.935 56.2698 687.198 Q52.5777 684.461 46.212 684.461 Q39.8781 684.461 36.186 687.198 Q32.4621 689.935 32.4621 694.614 M27.4968 694.614 Q27.4968 686.975 32.4621 682.615 Q37.4273 678.254 46.212 678.254 Q54.9649 678.254 59.9619 682.615 Q64.9272 686.975 64.9272 694.614 Q64.9272 702.285 59.9619 706.645 Q54.9649 710.974 46.212 710.974 Q37.4273 710.974 32.4621 706.645 Q27.4968 702.285 27.4968 694.614 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M49.9359 669.151 L28.3562 669.151 L28.3562 663.295 L49.7131 663.295 Q54.7739 663.295 57.3202 661.321 Q59.8346 659.348 59.8346 655.401 Q59.8346 650.659 56.8109 647.922 Q53.7872 645.152 48.5673 645.152 L28.3562 645.152 L28.3562 639.296 L64.0042 639.296 L64.0042 645.152 L58.5296 645.152 Q61.7762 647.285 63.3676 650.118 Q64.9272 652.919 64.9272 656.643 Q64.9272 662.785 61.1078 665.968 Q57.2883 669.151 49.9359 669.151 M27.4968 654.415 L27.4968 654.415 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M42.4881 597.601 L64.0042 597.601 L64.0042 603.457 L42.679 603.457 Q37.6183 603.457 35.1038 605.43 Q32.5894 607.404 32.5894 611.351 Q32.5894 616.093 35.6131 618.83 Q38.6368 621.568 43.8567 621.568 L64.0042 621.568 L64.0042 627.456 L28.3562 627.456 L28.3562 621.568 L33.8944 621.568 Q30.6797 619.467 29.0883 616.634 Q27.4968 613.77 27.4968 610.046 Q27.4968 603.903 31.3163 600.752 Q35.1038 597.601 42.4881 597.601 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M18.2347 580.127 L28.3562 580.127 L28.3562 568.064 L32.9077 568.064 L32.9077 580.127 L52.2594 580.127 Q56.6199 580.127 57.8613 578.949 Q59.1026 577.74 59.1026 574.079 L59.1026 568.064 L64.0042 568.064 L64.0042 574.079 Q64.0042 580.859 61.4897 583.437 Q58.9434 586.015 52.2594 586.015 L32.9077 586.015 L32.9077 590.312 L28.3562 590.312 L28.3562 586.015 L18.2347 586.015 L18.2347 580.127 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M14.479 546.675 L72.5979 546.675 L72.5979 560.17 L68.0464 560.17 L68.0464 552.563 L19.0304 552.563 L19.0304 560.17 L14.479 560.17 L14.479 546.675 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M511.214 12.096 L562.377 12.096 L562.377 18.9825 L540.907 18.9825 L540.907 72.576 L532.684 72.576 L532.684 18.9825 L511.214 18.9825 L511.214 12.096 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M567.4 27.2059 L574.854 27.2059 L574.854 72.576 L567.4 72.576 L567.4 27.2059 M567.4 9.54393 L574.854 9.54393 L574.854 18.9825 L567.4 18.9825 L567.4 9.54393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M625.774 35.9153 Q628.569 30.8922 632.458 28.5022 Q636.346 26.1121 641.613 26.1121 Q648.702 26.1121 652.55 31.0947 Q656.398 36.0368 656.398 45.1919 L656.398 72.576 L648.904 72.576 L648.904 45.4349 Q648.904 38.913 646.595 35.7533 Q644.286 32.5936 639.547 32.5936 Q633.754 32.5936 630.392 36.4419 Q627.029 40.2903 627.029 46.9338 L627.029 72.576 L619.535 72.576 L619.535 45.4349 Q619.535 38.8725 617.226 35.7533 Q614.917 32.5936 610.097 32.5936 Q604.385 32.5936 601.023 36.4824 Q597.66 40.3308 597.66 46.9338 L597.66 72.576 L590.166 72.576 L590.166 27.2059 L597.66 27.2059 L597.66 34.2544 Q600.212 30.082 603.777 28.0971 Q607.342 26.1121 612.244 26.1121 Q617.186 26.1121 620.629 28.6237 Q624.113 31.1352 625.774 35.9153 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M710.073 48.0275 L710.073 51.6733 L675.802 51.6733 Q676.288 59.3701 680.42 63.421 Q684.593 67.4314 692.006 67.4314 Q696.3 67.4314 700.31 66.3781 Q704.361 65.3249 708.331 63.2184 L708.331 70.267 Q704.321 71.9684 700.108 72.8596 Q695.895 73.7508 691.56 73.7508 Q680.704 73.7508 674.344 67.4314 Q668.024 61.1119 668.024 50.3365 Q668.024 39.1965 674.02 32.6746 Q680.056 26.1121 690.264 26.1121 Q699.419 26.1121 704.726 32.0264 Q710.073 37.9003 710.073 48.0275 M702.619 45.84 Q702.538 39.7232 699.176 36.0774 Q695.854 32.4315 690.345 32.4315 Q684.107 32.4315 680.339 35.9558 Q676.612 39.4801 676.045 45.8805 L702.619 45.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M722.307 9.54393 L729.76 9.54393 L729.76 72.576 L722.307 72.576 L722.307 9.54393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M745.356 27.2059 L752.81 27.2059 L752.81 72.576 L745.356 72.576 L745.356 27.2059 M745.356 9.54393 L752.81 9.54393 L752.81 18.9825 L745.356 18.9825 L745.356 9.54393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M806.12 45.1919 L806.12 72.576 L798.666 72.576 L798.666 45.4349 Q798.666 38.994 796.155 35.7938 Q793.643 32.5936 788.62 32.5936 Q782.584 32.5936 779.1 36.4419 Q775.616 40.2903 775.616 46.9338 L775.616 72.576 L768.122 72.576 L768.122 27.2059 L775.616 27.2059 L775.616 34.2544 Q778.29 30.163 781.895 28.1376 Q785.541 26.1121 790.281 26.1121 Q798.099 26.1121 802.109 30.9732 Q806.12 35.7938 806.12 45.1919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M859.794 48.0275 L859.794 51.6733 L825.524 51.6733 Q826.01 59.3701 830.142 63.421 Q834.314 67.4314 841.727 67.4314 Q846.021 67.4314 850.032 66.3781 Q854.082 65.3249 858.052 63.2184 L858.052 70.267 Q854.042 71.9684 849.829 72.8596 Q845.616 73.7508 841.282 73.7508 Q830.425 73.7508 824.065 67.4314 Q817.746 61.1119 817.746 50.3365 Q817.746 39.1965 823.741 32.6746 Q829.777 26.1121 839.985 26.1121 Q849.14 26.1121 854.447 32.0264 Q859.794 37.9003 859.794 48.0275 M852.341 45.84 Q852.26 39.7232 848.897 36.0774 Q845.576 32.4315 840.066 32.4315 Q833.828 32.4315 830.061 35.9558 Q826.334 39.4801 825.767 45.8805 L852.341 45.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M915.98 32.4315 Q909.985 32.4315 906.501 37.1306 Q903.017 41.7891 903.017 49.9314 Q903.017 58.0738 906.461 62.7728 Q909.944 67.4314 915.98 67.4314 Q921.935 67.4314 925.419 62.7323 Q928.903 58.0333 928.903 49.9314 Q928.903 41.8701 925.419 37.1711 Q921.935 32.4315 915.98 32.4315 M915.98 26.1121 Q925.702 26.1121 931.252 32.4315 Q936.802 38.7509 936.802 49.9314 Q936.802 61.0714 931.252 67.4314 Q925.702 73.7508 915.98 73.7508 Q906.218 73.7508 900.668 67.4314 Q895.159 61.0714 895.159 49.9314 Q895.159 38.7509 900.668 32.4315 Q906.218 26.1121 915.98 26.1121 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M972.126 9.54393 L972.126 15.7418 L964.996 15.7418 Q960.986 15.7418 959.406 17.3622 Q957.867 18.9825 957.867 23.1955 L957.867 27.2059 L970.141 27.2059 L970.141 32.9987 L957.867 32.9987 L957.867 72.576 L950.372 72.576 L950.372 32.9987 L943.243 32.9987 L943.243 27.2059 L950.372 27.2059 L950.372 24.0462 Q950.372 16.471 953.897 13.0277 Q957.421 9.54393 965.077 9.54393 L972.126 9.54393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M999.672 12.096 L1007.94 12.096 L1020.66 63.2184 L1033.34 12.096 L1042.53 12.096 L1055.25 63.2184 L1067.93 12.096 L1076.23 12.096 L1061.04 72.576 L1050.75 72.576 L1037.99 20.0763 L1025.11 72.576 L1014.82 72.576 L999.672 12.096 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1099.49 32.4315 Q1093.49 32.4315 1090.01 37.1306 Q1086.52 41.7891 1086.52 49.9314 Q1086.52 58.0738 1089.97 62.7728 Q1093.45 67.4314 1099.49 67.4314 Q1105.44 67.4314 1108.92 62.7323 Q1112.41 58.0333 1112.41 49.9314 Q1112.41 41.8701 1108.92 37.1711 Q1105.44 32.4315 1099.49 32.4315 M1099.49 26.1121 Q1109.21 26.1121 1114.76 32.4315 Q1120.31 38.7509 1120.31 49.9314 Q1120.31 61.0714 1114.76 67.4314 Q1109.21 73.7508 1099.49 73.7508 Q1089.72 73.7508 1084.17 67.4314 Q1078.66 61.0714 1078.66 49.9314 Q1078.66 38.7509 1084.17 32.4315 Q1089.72 26.1121 1099.49 26.1121 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1158.95 34.1734 Q1157.7 33.4443 1156.2 33.1202 Q1154.74 32.7556 1152.96 32.7556 Q1146.64 32.7556 1143.24 36.8875 Q1139.87 40.9789 1139.87 48.6757 L1139.87 72.576 L1132.38 72.576 L1132.38 27.2059 L1139.87 27.2059 L1139.87 34.2544 Q1142.22 30.1225 1145.99 28.1376 Q1149.76 26.1121 1155.15 26.1121 Q1155.92 26.1121 1156.85 26.2337 Q1157.78 26.3147 1158.91 26.5172 L1158.95 34.1734 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1166.49 9.54393 L1173.98 9.54393 L1173.98 46.7717 L1196.22 27.2059 L1205.74 27.2059 L1181.68 48.4326 L1206.75 72.576 L1197.03 72.576 L1173.98 50.4176 L1173.98 72.576 L1166.49 72.576 L1166.49 9.54393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1286.8 16.7545 L1286.8 25.383 Q1282.67 21.5346 1277.97 19.6307 Q1273.31 17.7268 1268.04 17.7268 Q1257.67 17.7268 1252.16 24.0867 Q1246.66 30.4061 1246.66 42.3968 Q1246.66 54.3469 1252.16 60.7069 Q1257.67 67.0263 1268.04 67.0263 Q1273.31 67.0263 1277.97 65.1223 Q1282.67 63.2184 1286.8 59.3701 L1286.8 67.9175 Q1282.51 70.8341 1277.69 72.2924 Q1272.91 73.7508 1267.56 73.7508 Q1253.83 73.7508 1245.93 65.3654 Q1238.03 56.9395 1238.03 42.3968 Q1238.03 27.8135 1245.93 19.4281 Q1253.83 11.0023 1267.56 11.0023 Q1272.99 11.0023 1277.77 12.4606 Q1282.59 13.8784 1286.8 16.7545 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1325.41 34.1734 Q1324.15 33.4443 1322.65 33.1202 Q1321.19 32.7556 1319.41 32.7556 Q1313.09 32.7556 1309.69 36.8875 Q1306.33 40.9789 1306.33 48.6757 L1306.33 72.576 L1298.83 72.576 L1298.83 27.2059 L1306.33 27.2059 L1306.33 34.2544 Q1308.67 30.1225 1312.44 28.1376 Q1316.21 26.1121 1321.6 26.1121 Q1322.37 26.1121 1323.3 26.2337 Q1324.23 26.3147 1325.36 26.5172 L1325.41 34.1734 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1370.21 48.0275 L1370.21 51.6733 L1335.94 51.6733 Q1336.42 59.3701 1340.56 63.421 Q1344.73 67.4314 1352.14 67.4314 Q1356.44 67.4314 1360.45 66.3781 Q1364.5 65.3249 1368.47 63.2184 L1368.47 70.267 Q1364.46 71.9684 1360.24 72.8596 Q1356.03 73.7508 1351.7 73.7508 Q1340.84 73.7508 1334.48 67.4314 Q1328.16 61.1119 1328.16 50.3365 Q1328.16 39.1965 1334.16 32.6746 Q1340.19 26.1121 1350.4 26.1121 Q1359.55 26.1121 1364.86 32.0264 Q1370.21 37.9003 1370.21 48.0275 M1362.75 45.84 Q1362.67 39.7232 1359.31 36.0774 Q1355.99 32.4315 1350.48 32.4315 Q1344.24 32.4315 1340.47 35.9558 Q1336.75 39.4801 1336.18 45.8805 L1362.75 45.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1378.11 27.2059 L1385.56 27.2059 L1394.88 62.6108 L1404.15 27.2059 L1412.95 27.2059 L1422.26 62.6108 L1431.54 27.2059 L1438.99 27.2059 L1427.12 72.576 L1418.33 72.576 L1408.57 35.3887 L1398.77 72.576 L1389.98 72.576 L1378.11 27.2059 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1501.54 17.6457 Q1492.63 17.6457 1487.36 24.2892 Q1482.13 30.9327 1482.13 42.3968 Q1482.13 53.8203 1487.36 60.4638 Q1492.63 67.1073 1501.54 67.1073 Q1510.45 67.1073 1515.64 60.4638 Q1520.86 53.8203 1520.86 42.3968 Q1520.86 30.9327 1515.64 24.2892 Q1510.45 17.6457 1501.54 17.6457 M1501.54 11.0023 Q1514.26 11.0023 1521.87 19.5497 Q1529.49 28.0566 1529.49 42.3968 Q1529.49 56.6965 1521.87 65.2439 Q1514.26 73.7508 1501.54 73.7508 Q1488.78 73.7508 1481.12 65.2439 Q1473.51 56.737 1473.51 42.3968 Q1473.51 28.0566 1481.12 19.5497 Q1488.78 11.0023 1501.54 11.0023 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1536.62 27.2059 L1544.52 27.2059 L1558.7 65.2844 L1572.87 27.2059 L1580.77 27.2059 L1563.76 72.576 L1553.63 72.576 L1536.62 27.2059 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1629.87 48.0275 L1629.87 51.6733 L1595.6 51.6733 Q1596.09 59.3701 1600.22 63.421 Q1604.39 67.4314 1611.8 67.4314 Q1616.1 67.4314 1620.11 66.3781 Q1624.16 65.3249 1628.13 63.2184 L1628.13 70.267 Q1624.12 71.9684 1619.91 72.8596 Q1615.69 73.7508 1611.36 73.7508 Q1600.5 73.7508 1594.14 67.4314 Q1587.82 61.1119 1587.82 50.3365 Q1587.82 39.1965 1593.82 32.6746 Q1599.85 26.1121 1610.06 26.1121 Q1619.22 26.1121 1624.52 32.0264 Q1629.87 37.9003 1629.87 48.0275 M1622.42 45.84 Q1622.34 39.7232 1618.97 36.0774 Q1615.65 32.4315 1610.14 32.4315 Q1603.9 32.4315 1600.14 35.9558 Q1596.41 39.4801 1595.84 45.8805 L1622.42 45.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1668.4 34.1734 Q1667.14 33.4443 1665.64 33.1202 Q1664.18 32.7556 1662.4 32.7556 Q1656.08 32.7556 1652.68 36.8875 Q1649.32 40.9789 1649.32 48.6757 L1649.32 72.576 L1641.82 72.576 L1641.82 27.2059 L1649.32 27.2059 L1649.32 34.2544 Q1651.67 30.1225 1655.43 28.1376 Q1659.2 26.1121 1664.59 26.1121 Q1665.36 26.1121 1666.29 26.2337 Q1667.22 26.3147 1668.35 26.5172 L1668.4 34.1734 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1702.91 12.096 L1737.67 12.096 L1737.67 18.9825 L1711.09 18.9825 L1711.09 36.8065 L1735.07 36.8065 L1735.07 43.6931 L1711.09 43.6931 L1711.09 72.576 L1702.91 72.576 L1702.91 12.096 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1744.27 27.2059 L1751.72 27.2059 L1751.72 72.576 L1744.27 72.576 L1744.27 27.2059 M1744.27 9.54393 L1751.72 9.54393 L1751.72 18.9825 L1744.27 18.9825 L1744.27 9.54393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1761.97 27.2059 L1769.87 27.2059 L1784.05 65.2844 L1798.23 27.2059 L1806.13 27.2059 L1789.11 72.576 L1778.98 72.576 L1761.97 27.2059 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1855.22 48.0275 L1855.22 51.6733 L1820.95 51.6733 Q1821.44 59.3701 1825.57 63.421 Q1829.74 67.4314 1837.16 67.4314 Q1841.45 67.4314 1845.46 66.3781 Q1849.51 65.3249 1853.48 63.2184 L1853.48 70.267 Q1849.47 71.9684 1845.26 72.8596 Q1841.04 73.7508 1836.71 73.7508 Q1825.85 73.7508 1819.49 67.4314 Q1813.17 61.1119 1813.17 50.3365 Q1813.17 39.1965 1819.17 32.6746 Q1825.21 26.1121 1835.41 26.1121 Q1844.57 26.1121 1849.88 32.0264 Q1855.22 37.9003 1855.22 48.0275 M1847.77 45.84 Q1847.69 39.7232 1844.33 36.0774 Q1841 32.4315 1835.5 32.4315 Q1829.26 32.4315 1825.49 35.9558 Q1821.76 39.4801 1821.2 45.8805 L1847.77 45.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1902.33 18.8205 L1902.33 65.8515 L1912.22 65.8515 Q1924.74 65.8515 1930.53 60.1802 Q1936.36 54.509 1936.36 42.2752 Q1936.36 30.1225 1930.53 24.4918 Q1924.74 18.8205 1912.22 18.8205 L1902.33 18.8205 M1894.15 12.096 L1910.96 12.096 Q1928.54 12.096 1936.77 19.4281 Q1944.99 26.7198 1944.99 42.2752 Q1944.99 57.9117 1936.73 65.2439 Q1928.46 72.576 1910.96 72.576 L1894.15 72.576 L1894.15 12.096 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1978.33 49.7694 Q1969.3 49.7694 1965.81 51.8354 Q1962.33 53.9013 1962.33 58.8839 Q1962.33 62.8538 1964.92 65.2034 Q1967.55 67.5124 1972.05 67.5124 Q1978.25 67.5124 1981.98 63.1374 Q1985.74 58.7219 1985.74 51.4303 L1985.74 49.7694 L1978.33 49.7694 M1993.2 46.6907 L1993.2 72.576 L1985.74 72.576 L1985.74 65.6895 Q1983.19 69.8214 1979.38 71.8063 Q1975.58 73.7508 1970.07 73.7508 Q1963.1 73.7508 1958.97 69.8619 Q1954.88 65.9325 1954.88 59.3701 Q1954.88 51.7138 1959.98 47.825 Q1965.12 43.9361 1975.29 43.9361 L1985.74 43.9361 L1985.74 43.2069 Q1985.74 38.0623 1982.34 35.2672 Q1978.98 32.4315 1972.86 32.4315 Q1968.97 32.4315 1965.29 33.3632 Q1961.6 34.295 1958.2 36.1584 L1958.2 29.2718 Q1962.29 27.692 1966.14 26.9223 Q1969.99 26.1121 1973.63 26.1121 Q1983.47 26.1121 1988.34 31.2163 Q1993.2 36.3204 1993.2 46.6907 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2027.43 76.7889 Q2024.27 84.8907 2021.27 87.3618 Q2018.27 89.8329 2013.25 89.8329 L2007.29 89.8329 L2007.29 83.5945 L2011.67 83.5945 Q2014.75 83.5945 2016.45 82.1361 Q2018.15 80.6778 2020.22 75.2496 L2021.55 71.8468 L2003.2 27.2059 L2011.1 27.2059 L2025.28 62.6918 L2039.46 27.2059 L2047.36 27.2059 L2027.43 76.7889 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2086.57 28.5427 L2086.57 35.5912 Q2083.41 33.9709 2080.01 33.1607 Q2076.6 32.3505 2072.96 32.3505 Q2067.41 32.3505 2064.61 34.0519 Q2061.86 35.7533 2061.86 39.156 Q2061.86 41.7486 2063.84 43.2475 Q2065.83 44.7058 2071.82 46.0426 L2074.38 46.6097 Q2082.32 48.3111 2085.64 51.4303 Q2089 54.509 2089 60.0587 Q2089 66.3781 2083.98 70.0644 Q2078.99 73.7508 2070.24 73.7508 Q2066.6 73.7508 2062.63 73.0216 Q2058.7 72.3329 2054.32 70.9151 L2054.32 63.2184 Q2058.46 65.3654 2062.47 66.4591 Q2066.48 67.5124 2070.41 67.5124 Q2075.67 67.5124 2078.51 65.73 Q2081.34 63.9071 2081.34 60.6258 Q2081.34 57.5877 2079.28 55.9673 Q2077.25 54.3469 2070.33 52.8481 L2067.73 52.2405 Q2060.81 50.7821 2057.73 47.7845 Q2054.65 44.7463 2054.65 39.4801 Q2054.65 33.0797 2059.19 29.5959 Q2063.72 26.1121 2072.07 26.1121 Q2076.2 26.1121 2079.85 26.7198 Q2083.49 27.3274 2086.57 28.5427 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip052)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:8; stroke-opacity:1; fill:none\" points=\"307.043,1386.4 318.825,1386.4 318.825,1263.78 318.906,1263.78 318.906,1141.17 319.816,1141.17 319.816,1018.55 320.203,1018.55 320.203,895.94 320.565,895.94 320.565,773.326 320.694,773.326 320.694,650.712 321.009,650.712 321.009,528.098 321.369,528.098 321.369,405.484 321.557,405.484 321.557,282.87 321.942,282.87 321.942,160.256 419.526,160.256 466.439,160.256 466.439,282.87 468.72,282.87 468.72,405.484 664.325,405.484 664.325,528.098 676.096,528.098 676.096,650.712 682.398,650.712 682.398,773.326 690.487,773.326 691.436,773.326 691.436,895.94 694.456,895.94 694.456,1018.55 701.23,1018.55 701.23,1141.17 703.101,1141.17 703.101,1263.78 709.945,1263.78 709.945,1386.4 715.766,1386.4 715.766,1263.78 716.348,1263.78 716.348,1141.17 716.505,1141.17 716.505,1018.55 717.015,1018.55 717.015,895.94 717.45,895.94 717.45,773.326 717.587,773.326 717.587,650.712 717.727,650.712 717.727,528.098 717.906,528.098 717.906,405.484 718.288,405.484 718.288,282.87 718.902,282.87 718.902,160.256 740.858,160.256 768.16,160.256 768.16,282.87 835.924,282.87 846.693,282.87 846.693,405.484 893.477,405.484 893.477,528.098 1050.03,528.098 1050.03,650.712 1058.46,650.712 1058.46,773.326 1072.22,773.326 1072.22,895.94 1074.17,895.94 1074.17,1018.55 1074.72,1018.55 1074.72,1141.17 1085.81,1141.17 1085.81,1263.78 1091.93,1263.78 1091.93,1386.4 1112.43,1386.4 1112.43,1263.78 1112.57,1263.78 1112.57,1141.17 1113.27,1141.17 1113.27,1018.55 1114.3,1018.55 1114.3,895.94 1114.33,895.94 1114.33,773.326 1114.54,773.326 1114.54,650.712 1114.71,650.712 1114.71,528.098 1114.73,528.098 1114.73,405.484 1114.85,405.484 1114.85,282.87 1114.93,282.87 1114.93,160.256 1438.35,160.256 1438.35,282.87 1445.49,282.87 1445.49,405.484 1448.38,405.484 1448.38,528.098 1449.71,528.098 1449.71,650.712 1453.73,650.712 1453.73,773.326 1462.53,773.326 1462.53,895.94 1466.34,895.94 1466.34,1018.55 1472.34,1018.55 1472.34,1141.17 1475.87,1141.17 1475.87,1263.78 1498.44,1263.78 1498.44,1386.4 1508.63,1386.4 1508.63,1263.78 1508.83,1263.78 1508.83,1141.17 1509.09,1141.17 1509.09,1018.55 1509.15,1018.55 1509.15,895.94 1509.66,895.94 1509.66,773.326 1510.06,773.326 1510.06,650.712 1510.1,650.712 1510.1,528.098 1510.28,528.098 1510.28,405.484 1510.82,405.484 1510.82,282.87 1602.15,282.87 1661.11,282.87 1661.11,405.484 1690.59,405.484 1705.04,405.484 1834.67,405.484 1834.67,528.098 1846.49,528.098 1846.49,650.712 1853.8,650.712 1853.8,773.326 1866.19,773.326 1866.19,895.94 1868.7,895.94 1868.7,1018.55 1869.31,1018.55 1869.31,1141.17 1885.51,1141.17 1885.51,1263.78 1892.08,1263.78 1892.08,1386.4 1904.13,1386.4 1904.13,1263.78 1904.9,1263.78 1904.9,1141.17 1905.18,1141.17 1905.18,1018.55 1905.3,1018.55 1905.3,895.94 1905.53,895.94 1905.53,773.326 1906.19,773.326 1906.19,650.712 1906.23,650.712 1906.23,528.098 1906.9,528.098 1906.9,405.484 1906.9,405.484 1906.9,282.87 1907.58,282.87 1907.58,160.256 1945.6,160.256 1945.6,282.87 2003.84,282.87 2230.22,282.87 2230.22,405.484 2238.99,405.484 2238.99,528.098 2240.68,528.098 2240.68,650.712 2241.36,650.712 2241.36,773.326 2245.28,773.326 2262.89,773.326 2262.89,895.94 2270.92,895.94 2270.92,1018.55 2271.42,1018.55 2271.42,1141.17 2292.31,1141.17 2292.31,1263.78 2293.17,1263.78 2293.17,1386.4 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:8; stroke-opacity:1; fill:none\" points=\"307.043,773.326 318.825,773.326 318.906,773.326 319.816,773.326 320.203,773.326 320.565,773.326 320.694,773.326 321.009,773.326 321.369,773.326 321.557,773.326 321.942,773.326 419.526,773.326 419.526,895.94 466.439,895.94 466.439,773.326 468.72,773.326 468.72,650.712 664.325,650.712 676.096,650.712 682.398,650.712 690.487,650.712 690.487,773.326 691.436,773.326 694.456,773.326 701.23,773.326 703.101,773.326 709.945,773.326 715.766,773.326 716.348,773.326 716.505,773.326 717.015,773.326 717.45,773.326 717.587,773.326 717.727,773.326 717.906,773.326 718.288,773.326 718.902,773.326 740.858,773.326 740.858,895.94 768.16,895.94 768.16,773.326 835.924,773.326 835.924,895.94 846.693,895.94 846.693,773.326 893.477,773.326 893.477,650.712 1050.03,650.712 1058.46,650.712 1072.22,650.712 1074.17,650.712 1074.72,650.712 1085.81,650.712 1091.93,650.712 1112.43,650.712 1112.57,650.712 1113.27,650.712 1114.3,650.712 1114.33,650.712 1114.54,650.712 1114.71,650.712 1114.73,650.712 1114.85,650.712 1114.93,650.712 1438.35,650.712 1445.49,650.712 1448.38,650.712 1449.71,650.712 1453.73,650.712 1462.53,650.712 1466.34,650.712 1472.34,650.712 1472.34,528.098 1475.87,528.098 1498.44,528.098 1508.63,528.098 1508.83,528.098 1509.09,528.098 1509.15,528.098 1509.66,528.098 1510.06,528.098 1510.1,528.098 1510.28,528.098 1510.82,528.098 1602.15,528.098 1602.15,650.712 1661.11,650.712 1661.11,528.098 1690.59,528.098 1690.59,650.712 1705.04,650.712 1705.04,773.326 1834.67,773.326 1846.49,773.326 1853.8,773.326 1866.19,773.326 1868.7,773.326 1869.31,773.326 1885.51,773.326 1892.08,773.326 1904.13,773.326 1904.9,773.326 1905.18,773.326 1905.3,773.326 1905.53,773.326 1906.19,773.326 1906.23,773.326 1906.9,773.326 1906.9,773.326 1907.58,773.326 1945.6,773.326 1945.6,650.712 2003.84,650.712 2003.84,773.326 2230.22,773.326 2238.99,773.326 2240.68,773.326 2241.36,773.326 2245.28,773.326 2245.28,895.94 2262.89,895.94 2270.92,895.94 2271.42,895.94 2292.31,895.94 2293.17,895.94 \"/>\n<path clip-path=\"url(#clip050)\" d=\"M1890.31 322.316 L2282.58 322.316 L2282.58 166.796 L1890.31 166.796  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1890.31,322.316 2282.58,322.316 2282.58,166.796 1890.31,166.796 1890.31,322.316 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:8; stroke-opacity:1; fill:none\" points=\"1913.71,218.636 2054.06,218.636 \"/>\n<path clip-path=\"url(#clip050)\" d=\"M2077.45 209.99 L2081.71 209.99 L2087.04 230.221 L2092.34 209.99 L2097.36 209.99 L2102.68 230.221 L2107.98 209.99 L2112.24 209.99 L2105.46 235.916 L2100.44 235.916 L2094.86 214.666 L2089.26 235.916 L2084.23 235.916 L2077.45 209.99 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2128.75 212.976 Q2125.32 212.976 2123.33 215.661 Q2121.34 218.323 2121.34 222.976 Q2121.34 227.629 2123.31 230.314 Q2125.3 232.976 2128.75 232.976 Q2132.15 232.976 2134.14 230.291 Q2136.13 227.606 2136.13 222.976 Q2136.13 218.37 2134.14 215.684 Q2132.15 212.976 2128.75 212.976 M2128.75 209.365 Q2134.3 209.365 2137.47 212.976 Q2140.65 216.587 2140.65 222.976 Q2140.65 229.342 2137.47 232.976 Q2134.3 236.587 2128.75 236.587 Q2123.17 236.587 2120 232.976 Q2116.85 229.342 2116.85 222.976 Q2116.85 216.587 2120 212.976 Q2123.17 209.365 2128.75 209.365 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2162.73 213.971 Q2162.01 213.555 2161.16 213.37 Q2160.32 213.161 2159.3 213.161 Q2155.69 213.161 2153.75 215.522 Q2151.83 217.86 2151.83 222.258 L2151.83 235.916 L2147.54 235.916 L2147.54 209.99 L2151.83 209.99 L2151.83 214.018 Q2153.17 211.657 2155.32 210.522 Q2157.47 209.365 2160.55 209.365 Q2160.99 209.365 2161.53 209.434 Q2162.06 209.481 2162.71 209.596 L2162.73 213.971 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2167.03 199.897 L2171.32 199.897 L2171.32 221.17 L2184.03 209.99 L2189.47 209.99 L2175.72 222.119 L2190.04 235.916 L2184.49 235.916 L2171.32 223.254 L2171.32 235.916 L2167.03 235.916 L2167.03 199.897 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2194.65 209.99 L2198.91 209.99 L2198.91 235.916 L2194.65 235.916 L2194.65 209.99 M2194.65 199.897 L2198.91 199.897 L2198.91 205.291 L2194.65 205.291 L2194.65 199.897 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2229.37 220.268 L2229.37 235.916 L2225.11 235.916 L2225.11 220.407 Q2225.11 216.726 2223.68 214.897 Q2222.24 213.069 2219.37 213.069 Q2215.92 213.069 2213.93 215.268 Q2211.94 217.467 2211.94 221.263 L2211.94 235.916 L2207.66 235.916 L2207.66 209.99 L2211.94 209.99 L2211.94 214.018 Q2213.47 211.68 2215.53 210.522 Q2217.61 209.365 2220.32 209.365 Q2224.79 209.365 2227.08 212.143 Q2229.37 214.897 2229.37 220.268 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2254.93 222.652 Q2254.93 218.022 2253.01 215.476 Q2251.11 212.93 2247.66 212.93 Q2244.23 212.93 2242.31 215.476 Q2240.41 218.022 2240.41 222.652 Q2240.41 227.258 2242.31 229.805 Q2244.23 232.351 2247.66 232.351 Q2251.11 232.351 2253.01 229.805 Q2254.93 227.258 2254.93 222.652 M2259.19 232.698 Q2259.19 239.318 2256.25 242.536 Q2253.31 245.777 2247.24 245.777 Q2245 245.777 2243.01 245.43 Q2241.02 245.105 2239.14 244.411 L2239.14 240.268 Q2241.02 241.286 2242.84 241.772 Q2244.67 242.258 2246.57 242.258 Q2250.76 242.258 2252.84 240.059 Q2254.93 237.883 2254.93 233.462 L2254.93 231.356 Q2253.61 233.647 2251.55 234.781 Q2249.49 235.916 2246.62 235.916 Q2241.85 235.916 2238.93 232.281 Q2236.02 228.647 2236.02 222.652 Q2236.02 216.633 2238.93 212.999 Q2241.85 209.365 2246.62 209.365 Q2249.49 209.365 2251.55 210.499 Q2253.61 211.633 2254.93 213.925 L2254.93 209.99 L2259.19 209.99 L2259.19 232.698 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip050)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:8; stroke-opacity:1; fill:none\" points=\"1913.71,270.476 2054.06,270.476 \"/>\n<path clip-path=\"url(#clip050)\" d=\"M2096.23 274.816 Q2096.23 270.117 2094.28 267.455 Q2092.36 264.77 2088.98 264.77 Q2085.6 264.77 2083.66 267.455 Q2081.73 270.117 2081.73 274.816 Q2081.73 279.515 2083.66 282.2 Q2085.6 284.862 2088.98 284.862 Q2092.36 284.862 2094.28 282.2 Q2096.23 279.515 2096.23 274.816 M2081.73 265.765 Q2083.08 263.45 2085.11 262.339 Q2087.17 261.205 2090.02 261.205 Q2094.74 261.205 2097.68 264.955 Q2100.65 268.705 2100.65 274.816 Q2100.65 280.927 2097.68 284.677 Q2094.74 288.427 2090.02 288.427 Q2087.17 288.427 2085.11 287.316 Q2083.08 286.182 2081.73 283.867 L2081.73 287.756 L2077.45 287.756 L2077.45 251.737 L2081.73 251.737 L2081.73 265.765 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2122.73 265.811 Q2122.01 265.395 2121.16 265.21 Q2120.32 265.001 2119.3 265.001 Q2115.69 265.001 2113.75 267.362 Q2111.83 269.7 2111.83 274.098 L2111.83 287.756 L2107.54 287.756 L2107.54 261.83 L2111.83 261.83 L2111.83 265.858 Q2113.17 263.497 2115.32 262.362 Q2117.47 261.205 2120.55 261.205 Q2120.99 261.205 2121.53 261.274 Q2122.06 261.321 2122.71 261.436 L2122.73 265.811 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2136.2 264.816 Q2132.78 264.816 2130.79 267.501 Q2128.79 270.163 2128.79 274.816 Q2128.79 279.469 2130.76 282.154 Q2132.75 284.816 2136.2 284.816 Q2139.6 284.816 2141.6 282.131 Q2143.59 279.446 2143.59 274.816 Q2143.59 270.21 2141.6 267.524 Q2139.6 264.816 2136.2 264.816 M2136.2 261.205 Q2141.76 261.205 2144.93 264.816 Q2148.1 268.427 2148.1 274.816 Q2148.1 281.182 2144.93 284.816 Q2141.76 288.427 2136.2 288.427 Q2130.62 288.427 2127.45 284.816 Q2124.3 281.182 2124.3 274.816 Q2124.3 268.427 2127.45 264.816 Q2130.62 261.205 2136.2 261.205 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2155 251.737 L2159.28 251.737 L2159.28 273.01 L2171.99 261.83 L2177.43 261.83 L2163.68 273.959 L2178.01 287.756 L2172.45 287.756 L2159.28 275.094 L2159.28 287.756 L2155 287.756 L2155 251.737 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2203.1 273.728 L2203.1 275.811 L2183.52 275.811 Q2183.79 280.209 2186.16 282.524 Q2188.54 284.816 2192.78 284.816 Q2195.23 284.816 2197.52 284.214 Q2199.84 283.612 2202.1 282.409 L2202.1 286.436 Q2199.81 287.408 2197.41 287.918 Q2195 288.427 2192.52 288.427 Q2186.32 288.427 2182.68 284.816 Q2179.07 281.205 2179.07 275.047 Q2179.07 268.682 2182.5 264.955 Q2185.95 261.205 2191.78 261.205 Q2197.01 261.205 2200.04 264.585 Q2203.1 267.941 2203.1 273.728 M2198.84 272.478 Q2198.79 268.983 2196.87 266.899 Q2194.97 264.816 2191.83 264.816 Q2188.26 264.816 2186.11 266.83 Q2183.98 268.844 2183.66 272.501 L2198.84 272.478 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2231.64 272.108 L2231.64 287.756 L2227.38 287.756 L2227.38 272.247 Q2227.38 268.566 2225.95 266.737 Q2224.51 264.909 2221.64 264.909 Q2218.19 264.909 2216.2 267.108 Q2214.21 269.307 2214.21 273.103 L2214.21 287.756 L2209.93 287.756 L2209.93 261.83 L2214.21 261.83 L2214.21 265.858 Q2215.74 263.52 2217.8 262.362 Q2219.88 261.205 2222.59 261.205 Q2227.06 261.205 2229.35 263.983 Q2231.64 266.737 2231.64 272.108 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"reliability/#Once-a-day-Observation-of-the-Working-State","page":"Reliability","title":"Once-a-day Observation of the Working State","text":"","category":"section"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"Suppose that we want to match our simulation to observation data that counts, every day, how many vehicles went out and how many were broken that morning. This observer records that status each day.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"mutable struct ObserveLots\n    status::Array{Int64,2}\n    started_today::Array{Int64,1}\n    total_age::Array{Float64,1}\n    broken_duration::Array{Float64,1}\n    ObserveLots(day_cnt, individual_cnt) = new(\n        zeros(Int64, 2, day_cnt),\n        zeros(Int64, day_cnt),\n        zeros(Float64, day_cnt),\n        zeros(Float64, individual_cnt)\n    )\nend\n\ndays(observation::ObserveLots) = size(observation.status, 2);","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"This observer waits until the current transition time is just after the first 15min of the day. Then it records every vehicle's status.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"function observe(experiment::Experiment, observation::ObserveLots, when, which)\n    who, transition = which\n    day_idx = Int(floor(when))\n    if transition == :work\n        observation.started_today[day_idx + 1] += 1\n    elseif transition == :repair\n        observation.broken_duration[who] += when - experiment.group[who].transition_start\n    end\n    day_start = Int(floor(experiment.time + next_work_time(experiment.time, experiment.start_time)[1]))\n    next_start = Int(floor(when + next_work_time(when, experiment.start_time)[1]))\n    if day_start != next_start\n        worker_cnt = count(w.state == working for w in experiment.group)\n        broken_cnt = count(w.state == broken for w in experiment.group)\n        work_ages = sum(w.work_age for w in experiment.group)\n        for rec_idx in day_start:next_start - 1\n            observation.status[1, 1 + rec_idx] = worker_cnt\n            observation.status[2, 1 + rec_idx] = broken_cnt\n            observation.total_age[1 + rec_idx] = work_ages\n        end\n    end\nend;","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"Now we can use this observer to make a plot.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"function walk_simulation()\n    day_cnt = 20\n    experiment = Experiment(16, 10, Xoshiro(979798))\n    observation = ObserveLots(day_cnt, worker_cnt(experiment))\n    run(experiment, observation, day_cnt)\n    plot(1:day_cnt, observation.status[2, :], seriestype=:scatter, label=\"repair\",\n        yticks=0:2:10)\n    plot!(1:day_cnt, observation.status[1, :], seriestype=:scatter, label=\"working\")\n    title!(\"Number Working or in Repair\")\nend\nwalk_simulation()","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip080\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip080)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip081\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip080)\" d=\"M138.959 1486.45 L2352.76 1486.45 L2352.76 123.472 L138.959 123.472  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip082\">\n    <rect x=\"138\" y=\"123\" width=\"2215\" height=\"1364\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"641.296,1486.45 641.296,123.472 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1190.9,1486.45 1190.9,123.472 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1740.5,1486.45 1740.5,123.472 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2290.1,1486.45 2290.1,123.472 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"138.959,1486.45 2352.76,1486.45 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"641.296,1486.45 641.296,1467.55 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1190.9,1486.45 1190.9,1467.55 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1740.5,1486.45 1740.5,1467.55 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2290.1,1486.45 2290.1,1467.55 \"/>\n<path clip-path=\"url(#clip080)\" d=\"M631.573 1514.29 L649.93 1514.29 L649.93 1518.22 L635.856 1518.22 L635.856 1526.7 Q636.874 1526.35 637.893 1526.19 Q638.911 1526 639.93 1526 Q645.717 1526 649.096 1529.17 Q652.476 1532.34 652.476 1537.76 Q652.476 1543.34 649.004 1546.44 Q645.532 1549.52 639.212 1549.52 Q637.036 1549.52 634.768 1549.15 Q632.522 1548.78 630.115 1548.04 L630.115 1543.34 Q632.198 1544.47 634.421 1545.03 Q636.643 1545.58 639.12 1545.58 Q643.124 1545.58 645.462 1543.48 Q647.8 1541.37 647.8 1537.76 Q647.8 1534.15 645.462 1532.04 Q643.124 1529.94 639.12 1529.94 Q637.245 1529.94 635.37 1530.35 Q633.518 1530.77 631.573 1531.65 L631.573 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1165.59 1544.91 L1173.22 1544.91 L1173.22 1518.55 L1164.91 1520.21 L1164.91 1515.95 L1173.18 1514.29 L1177.85 1514.29 L1177.85 1544.91 L1185.49 1544.91 L1185.49 1548.85 L1165.59 1548.85 L1165.59 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1204.94 1517.37 Q1201.33 1517.37 1199.5 1520.93 Q1197.69 1524.47 1197.69 1531.6 Q1197.69 1538.71 1199.5 1542.27 Q1201.33 1545.82 1204.94 1545.82 Q1208.57 1545.82 1210.38 1542.27 Q1212.21 1538.71 1212.21 1531.6 Q1212.21 1524.47 1210.38 1520.93 Q1208.57 1517.37 1204.94 1517.37 M1204.94 1513.66 Q1210.75 1513.66 1213.8 1518.27 Q1216.88 1522.85 1216.88 1531.6 Q1216.88 1540.33 1213.8 1544.94 Q1210.75 1549.52 1204.94 1549.52 Q1199.13 1549.52 1196.05 1544.94 Q1192.99 1540.33 1192.99 1531.6 Q1192.99 1522.85 1196.05 1518.27 Q1199.13 1513.66 1204.94 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1715.68 1544.91 L1723.32 1544.91 L1723.32 1518.55 L1715.01 1520.21 L1715.01 1515.95 L1723.28 1514.29 L1727.95 1514.29 L1727.95 1544.91 L1735.59 1544.91 L1735.59 1548.85 L1715.68 1548.85 L1715.68 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1745.08 1514.29 L1763.44 1514.29 L1763.44 1518.22 L1749.37 1518.22 L1749.37 1526.7 Q1750.38 1526.35 1751.4 1526.19 Q1752.42 1526 1753.44 1526 Q1759.23 1526 1762.61 1529.17 Q1765.99 1532.34 1765.99 1537.76 Q1765.99 1543.34 1762.51 1546.44 Q1759.04 1549.52 1752.72 1549.52 Q1750.55 1549.52 1748.28 1549.15 Q1746.03 1548.78 1743.62 1548.04 L1743.62 1543.34 Q1745.71 1544.47 1747.93 1545.03 Q1750.15 1545.58 1752.63 1545.58 Q1756.63 1545.58 1758.97 1543.48 Q1761.31 1541.37 1761.31 1537.76 Q1761.31 1534.15 1758.97 1532.04 Q1756.63 1529.94 1752.63 1529.94 Q1750.75 1529.94 1748.88 1530.35 Q1747.03 1530.77 1745.08 1531.65 L1745.08 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2268.87 1544.91 L2285.19 1544.91 L2285.19 1548.85 L2263.25 1548.85 L2263.25 1544.91 Q2265.91 1542.16 2270.49 1537.53 Q2275.1 1532.88 2276.28 1531.53 Q2278.53 1529.01 2279.41 1527.27 Q2280.31 1525.51 2280.31 1523.82 Q2280.31 1521.07 2278.37 1519.33 Q2276.44 1517.6 2273.34 1517.6 Q2271.14 1517.6 2268.69 1518.36 Q2266.26 1519.13 2263.48 1520.68 L2263.48 1515.95 Q2266.31 1514.82 2268.76 1514.24 Q2271.21 1513.66 2273.25 1513.66 Q2278.62 1513.66 2281.81 1516.35 Q2285.01 1519.03 2285.01 1523.52 Q2285.01 1525.65 2284.2 1527.57 Q2283.41 1529.47 2281.31 1532.07 Q2280.73 1532.74 2277.62 1535.95 Q2274.52 1539.15 2268.87 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2305.01 1517.37 Q2301.4 1517.37 2299.57 1520.93 Q2297.76 1524.47 2297.76 1531.6 Q2297.76 1538.71 2299.57 1542.27 Q2301.4 1545.82 2305.01 1545.82 Q2308.64 1545.82 2310.45 1542.27 Q2312.28 1538.71 2312.28 1531.6 Q2312.28 1524.47 2310.45 1520.93 Q2308.64 1517.37 2305.01 1517.37 M2305.01 1513.66 Q2310.82 1513.66 2313.87 1518.27 Q2316.95 1522.85 2316.95 1531.6 Q2316.95 1540.33 2313.87 1544.94 Q2310.82 1549.52 2305.01 1549.52 Q2299.2 1549.52 2296.12 1544.94 Q2293.06 1540.33 2293.06 1531.6 Q2293.06 1522.85 2296.12 1518.27 Q2299.2 1513.66 2305.01 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"138.959,1447.87 2352.76,1447.87 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"138.959,1190.71 2352.76,1190.71 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"138.959,933.543 2352.76,933.543 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"138.959,676.377 2352.76,676.377 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"138.959,419.212 2352.76,419.212 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"138.959,162.047 2352.76,162.047 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"138.959,1486.45 138.959,123.472 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"138.959,1447.87 157.857,1447.87 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"138.959,1190.71 157.857,1190.71 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"138.959,933.543 157.857,933.543 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"138.959,676.377 157.857,676.377 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"138.959,419.212 157.857,419.212 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"138.959,162.047 157.857,162.047 \"/>\n<path clip-path=\"url(#clip080)\" d=\"M91.0151 1433.67 Q87.404 1433.67 85.5753 1437.24 Q83.7697 1440.78 83.7697 1447.91 Q83.7697 1455.01 85.5753 1458.58 Q87.404 1462.12 91.0151 1462.12 Q94.6493 1462.12 96.4548 1458.58 Q98.2835 1455.01 98.2835 1447.91 Q98.2835 1440.78 96.4548 1437.24 Q94.6493 1433.67 91.0151 1433.67 M91.0151 1429.97 Q96.8252 1429.97 99.8808 1434.57 Q102.959 1439.16 102.959 1447.91 Q102.959 1456.63 99.8808 1461.24 Q96.8252 1465.82 91.0151 1465.82 Q85.2049 1465.82 82.1262 1461.24 Q79.0707 1456.63 79.0707 1447.91 Q79.0707 1439.16 82.1262 1434.57 Q85.2049 1429.97 91.0151 1429.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M86.6401 1204.05 L102.959 1204.05 L102.959 1207.99 L81.0151 1207.99 L81.0151 1204.05 Q83.6771 1201.3 88.2604 1196.67 Q92.8669 1192.02 94.0475 1190.67 Q96.2928 1188.15 97.1724 1186.41 Q98.0752 1184.65 98.0752 1182.96 Q98.0752 1180.21 96.1308 1178.47 Q94.2095 1176.74 91.1077 1176.74 Q88.9086 1176.74 86.4549 1177.5 Q84.0244 1178.27 81.2466 1179.82 L81.2466 1175.09 Q84.0707 1173.96 86.5243 1173.38 Q88.978 1172.8 91.0151 1172.8 Q96.3854 1172.8 99.5798 1175.49 Q102.774 1178.17 102.774 1182.66 Q102.774 1184.79 101.964 1186.71 Q101.177 1188.61 99.0706 1191.21 Q98.4919 1191.88 95.39 1195.09 Q92.2882 1198.29 86.6401 1204.05 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M93.3762 920.337 L81.5707 938.786 L93.3762 938.786 L93.3762 920.337 M92.1493 916.263 L98.0289 916.263 L98.0289 938.786 L102.959 938.786 L102.959 942.675 L98.0289 942.675 L98.0289 950.823 L93.3762 950.823 L93.3762 942.675 L77.7744 942.675 L77.7744 938.161 L92.1493 916.263 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M91.4317 674.514 Q88.2836 674.514 86.4318 676.667 Q84.6031 678.819 84.6031 682.569 Q84.6031 686.296 86.4318 688.472 Q88.2836 690.625 91.4317 690.625 Q94.5799 690.625 96.4085 688.472 Q98.2604 686.296 98.2604 682.569 Q98.2604 678.819 96.4085 676.667 Q94.5799 674.514 91.4317 674.514 M100.714 659.861 L100.714 664.121 Q98.9548 663.287 97.1493 662.847 Q95.3669 662.408 93.6076 662.408 Q88.978 662.408 86.5243 665.533 Q84.0938 668.658 83.7466 674.977 Q85.1123 672.963 87.1725 671.898 Q89.2327 670.81 91.7095 670.81 Q96.9178 670.81 99.927 673.982 Q102.959 677.13 102.959 682.569 Q102.959 687.894 99.8113 691.111 Q96.6632 694.329 91.4317 694.329 Q85.4364 694.329 82.2651 689.745 Q79.0938 685.139 79.0938 676.412 Q79.0938 668.218 82.9827 663.357 Q86.8716 658.472 93.4225 658.472 Q95.1817 658.472 96.9641 658.82 Q98.7696 659.167 100.714 659.861 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M91.1077 420.08 Q87.7743 420.08 85.8531 421.863 Q83.9549 423.645 83.9549 426.77 Q83.9549 429.895 85.8531 431.677 Q87.7743 433.46 91.1077 433.46 Q94.441 433.46 96.3623 431.677 Q98.2835 429.872 98.2835 426.77 Q98.2835 423.645 96.3623 421.863 Q94.4641 420.08 91.1077 420.08 M86.4318 418.089 Q83.4225 417.349 81.7327 415.289 Q80.066 413.228 80.066 410.265 Q80.066 406.122 83.0058 403.715 Q85.9688 401.307 91.1077 401.307 Q96.2697 401.307 99.2095 403.715 Q102.149 406.122 102.149 410.265 Q102.149 413.228 100.459 415.289 Q98.7928 417.349 95.8067 418.089 Q99.1863 418.877 101.061 421.168 Q102.959 423.46 102.959 426.77 Q102.959 431.793 99.8808 434.478 Q96.8252 437.163 91.1077 437.163 Q85.3901 437.163 82.3114 434.478 Q79.2559 431.793 79.2559 426.77 Q79.2559 423.46 81.154 421.168 Q83.0521 418.877 86.4318 418.089 M84.7188 410.705 Q84.7188 413.39 86.3855 414.895 Q88.0753 416.4 91.1077 416.4 Q94.1169 416.4 95.8067 414.895 Q97.5197 413.39 97.5197 410.705 Q97.5197 408.02 95.8067 406.515 Q94.1169 405.011 91.1077 405.011 Q88.0753 405.011 86.3855 406.515 Q84.7188 408.02 84.7188 410.705 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M51.6634 175.392 L59.3023 175.392 L59.3023 149.026 L50.9921 150.693 L50.9921 146.434 L59.256 144.767 L63.9319 144.767 L63.9319 175.392 L71.5707 175.392 L71.5707 179.327 L51.6634 179.327 L51.6634 175.392 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M91.0151 147.846 Q87.404 147.846 85.5753 151.41 Q83.7697 154.952 83.7697 162.082 Q83.7697 169.188 85.5753 172.753 Q87.404 176.295 91.0151 176.295 Q94.6493 176.295 96.4548 172.753 Q98.2835 169.188 98.2835 162.082 Q98.2835 154.952 96.4548 151.41 Q94.6493 147.846 91.0151 147.846 M91.0151 144.142 Q96.8252 144.142 99.8808 148.748 Q102.959 153.332 102.959 162.082 Q102.959 170.808 99.8808 175.415 Q96.8252 179.998 91.0151 179.998 Q85.2049 179.998 82.1262 175.415 Q79.0707 170.808 79.0707 162.082 Q79.0707 153.332 82.1262 148.748 Q85.2049 144.142 91.0151 144.142 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M648.309 12.096 L659.327 12.096 L686.144 62.6918 L686.144 12.096 L694.084 12.096 L694.084 72.576 L683.066 72.576 L656.249 21.9802 L656.249 72.576 L648.309 72.576 L648.309 12.096 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M709.275 54.671 L709.275 27.2059 L716.729 27.2059 L716.729 54.3874 Q716.729 60.8284 719.24 64.0691 Q721.752 67.2693 726.775 67.2693 Q732.811 67.2693 736.294 63.421 Q739.819 59.5726 739.819 52.9291 L739.819 27.2059 L747.272 27.2059 L747.272 72.576 L739.819 72.576 L739.819 65.6084 Q737.105 69.7404 733.499 71.7658 Q729.935 73.7508 725.195 73.7508 Q717.377 73.7508 713.326 68.8897 Q709.275 64.0286 709.275 54.671 M728.031 26.1121 L728.031 26.1121 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M797.949 35.9153 Q800.744 30.8922 804.633 28.5022 Q808.522 26.1121 813.788 26.1121 Q820.877 26.1121 824.726 31.0947 Q828.574 36.0368 828.574 45.1919 L828.574 72.576 L821.08 72.576 L821.08 45.4349 Q821.08 38.913 818.771 35.7533 Q816.462 32.5936 811.722 32.5936 Q805.929 32.5936 802.567 36.4419 Q799.205 40.2903 799.205 46.9338 L799.205 72.576 L791.711 72.576 L791.711 45.4349 Q791.711 38.8725 789.402 35.7533 Q787.093 32.5936 782.272 32.5936 Q776.56 32.5936 773.198 36.4824 Q769.836 40.3308 769.836 46.9338 L769.836 72.576 L762.342 72.576 L762.342 27.2059 L769.836 27.2059 L769.836 34.2544 Q772.388 30.082 775.953 28.0971 Q779.518 26.1121 784.419 26.1121 Q789.361 26.1121 792.805 28.6237 Q796.288 31.1352 797.949 35.9153 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M876.01 49.9314 Q876.01 41.7081 872.607 37.0496 Q869.245 32.3505 863.331 32.3505 Q857.416 32.3505 854.014 37.0496 Q850.651 41.7081 850.651 49.9314 Q850.651 58.1548 854.014 62.8538 Q857.416 67.5124 863.331 67.5124 Q869.245 67.5124 872.607 62.8538 Q876.01 58.1548 876.01 49.9314 M850.651 34.0924 Q853.001 30.0415 856.566 28.0971 Q860.171 26.1121 865.154 26.1121 Q873.418 26.1121 878.562 32.6746 Q883.747 39.2371 883.747 49.9314 Q883.747 60.6258 878.562 67.1883 Q873.418 73.7508 865.154 73.7508 Q860.171 73.7508 856.566 71.8063 Q853.001 69.8214 850.651 65.7705 L850.651 72.576 L843.157 72.576 L843.157 9.54393 L850.651 9.54393 L850.651 34.0924 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M934.91 48.0275 L934.91 51.6733 L900.64 51.6733 Q901.126 59.3701 905.258 63.421 Q909.43 67.4314 916.843 67.4314 Q921.137 67.4314 925.148 66.3781 Q929.198 65.3249 933.168 63.2184 L933.168 70.267 Q929.158 71.9684 924.945 72.8596 Q920.732 73.7508 916.398 73.7508 Q905.541 73.7508 899.181 67.4314 Q892.862 61.1119 892.862 50.3365 Q892.862 39.1965 898.857 32.6746 Q904.893 26.1121 915.101 26.1121 Q924.256 26.1121 929.563 32.0264 Q934.91 37.9003 934.91 48.0275 M927.457 45.84 Q927.376 39.7232 924.013 36.0774 Q920.692 32.4315 915.182 32.4315 Q908.944 32.4315 905.177 35.9558 Q901.45 39.4801 900.883 45.8805 L927.457 45.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M973.434 34.1734 Q972.179 33.4443 970.68 33.1202 Q969.221 32.7556 967.439 32.7556 Q961.12 32.7556 957.717 36.8875 Q954.355 40.9789 954.355 48.6757 L954.355 72.576 L946.86 72.576 L946.86 27.2059 L954.355 27.2059 L954.355 34.2544 Q956.704 30.1225 960.471 28.1376 Q964.239 26.1121 969.627 26.1121 Q970.396 26.1121 971.328 26.2337 Q972.26 26.3147 973.394 26.5172 L973.434 34.1734 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1002.56 12.096 L1010.82 12.096 L1023.54 63.2184 L1036.22 12.096 L1045.42 12.096 L1058.14 63.2184 L1070.82 12.096 L1079.12 12.096 L1063.93 72.576 L1053.64 72.576 L1040.88 20.0763 L1028 72.576 L1017.71 72.576 L1002.56 12.096 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1102.37 32.4315 Q1096.38 32.4315 1092.9 37.1306 Q1089.41 41.7891 1089.41 49.9314 Q1089.41 58.0738 1092.86 62.7728 Q1096.34 67.4314 1102.37 67.4314 Q1108.33 67.4314 1111.81 62.7323 Q1115.3 58.0333 1115.3 49.9314 Q1115.3 41.8701 1111.81 37.1711 Q1108.33 32.4315 1102.37 32.4315 M1102.37 26.1121 Q1112.1 26.1121 1117.65 32.4315 Q1123.2 38.7509 1123.2 49.9314 Q1123.2 61.0714 1117.65 67.4314 Q1112.1 73.7508 1102.37 73.7508 Q1092.61 73.7508 1087.06 67.4314 Q1081.55 61.0714 1081.55 49.9314 Q1081.55 38.7509 1087.06 32.4315 Q1092.61 26.1121 1102.37 26.1121 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1161.84 34.1734 Q1160.59 33.4443 1159.09 33.1202 Q1157.63 32.7556 1155.85 32.7556 Q1149.53 32.7556 1146.12 36.8875 Q1142.76 40.9789 1142.76 48.6757 L1142.76 72.576 L1135.27 72.576 L1135.27 27.2059 L1142.76 27.2059 L1142.76 34.2544 Q1145.11 30.1225 1148.88 28.1376 Q1152.65 26.1121 1158.03 26.1121 Q1158.8 26.1121 1159.74 26.2337 Q1160.67 26.3147 1161.8 26.5172 L1161.84 34.1734 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1169.38 9.54393 L1176.87 9.54393 L1176.87 46.7717 L1199.11 27.2059 L1208.63 27.2059 L1184.57 48.4326 L1209.64 72.576 L1199.92 72.576 L1176.87 50.4176 L1176.87 72.576 L1169.38 72.576 L1169.38 9.54393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1217.7 27.2059 L1225.16 27.2059 L1225.16 72.576 L1217.7 72.576 L1217.7 27.2059 M1217.7 9.54393 L1225.16 9.54393 L1225.16 18.9825 L1217.7 18.9825 L1217.7 9.54393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1278.47 45.1919 L1278.47 72.576 L1271.01 72.576 L1271.01 45.4349 Q1271.01 38.994 1268.5 35.7938 Q1265.99 32.5936 1260.97 32.5936 Q1254.93 32.5936 1251.45 36.4419 Q1247.96 40.2903 1247.96 46.9338 L1247.96 72.576 L1240.47 72.576 L1240.47 27.2059 L1247.96 27.2059 L1247.96 34.2544 Q1250.64 30.163 1254.24 28.1376 Q1257.89 26.1121 1262.63 26.1121 Q1270.45 26.1121 1274.46 30.9732 Q1278.47 35.7938 1278.47 45.1919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1323.19 49.3643 Q1323.19 41.2625 1319.83 36.8065 Q1316.51 32.3505 1310.47 32.3505 Q1304.47 32.3505 1301.11 36.8065 Q1297.79 41.2625 1297.79 49.3643 Q1297.79 57.4256 1301.11 61.8816 Q1304.47 66.3376 1310.47 66.3376 Q1316.51 66.3376 1319.83 61.8816 Q1323.19 57.4256 1323.19 49.3643 M1330.64 66.9452 Q1330.64 78.5308 1325.5 84.1616 Q1320.35 89.8329 1309.74 89.8329 Q1305.81 89.8329 1302.33 89.2252 Q1298.84 88.6581 1295.56 87.4428 L1295.56 80.1917 Q1298.84 81.9741 1302.04 82.8248 Q1305.24 83.6755 1308.57 83.6755 Q1315.9 83.6755 1319.54 79.8271 Q1323.19 76.0193 1323.19 68.282 L1323.19 64.5957 Q1320.88 68.6061 1317.28 70.5911 Q1313.67 72.576 1308.65 72.576 Q1300.3 72.576 1295.2 66.2161 Q1290.09 59.8562 1290.09 49.3643 Q1290.09 38.832 1295.2 32.472 Q1300.3 26.1121 1308.65 26.1121 Q1313.67 26.1121 1317.28 28.0971 Q1320.88 30.082 1323.19 34.0924 L1323.19 27.2059 L1330.64 27.2059 L1330.64 66.9452 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1389.95 32.4315 Q1383.95 32.4315 1380.47 37.1306 Q1376.99 41.7891 1376.99 49.9314 Q1376.99 58.0738 1380.43 62.7728 Q1383.91 67.4314 1389.95 67.4314 Q1395.9 67.4314 1399.39 62.7323 Q1402.87 58.0333 1402.87 49.9314 Q1402.87 41.8701 1399.39 37.1711 Q1395.9 32.4315 1389.95 32.4315 M1389.95 26.1121 Q1399.67 26.1121 1405.22 32.4315 Q1410.77 38.7509 1410.77 49.9314 Q1410.77 61.0714 1405.22 67.4314 Q1399.67 73.7508 1389.95 73.7508 Q1380.19 73.7508 1374.64 67.4314 Q1369.13 61.0714 1369.13 49.9314 Q1369.13 38.7509 1374.64 32.4315 Q1380.19 26.1121 1389.95 26.1121 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1449.42 34.1734 Q1448.16 33.4443 1446.66 33.1202 Q1445.2 32.7556 1443.42 32.7556 Q1437.1 32.7556 1433.7 36.8875 Q1430.34 40.9789 1430.34 48.6757 L1430.34 72.576 L1422.84 72.576 L1422.84 27.2059 L1430.34 27.2059 L1430.34 34.2544 Q1432.69 30.1225 1436.45 28.1376 Q1440.22 26.1121 1445.61 26.1121 Q1446.38 26.1121 1447.31 26.2337 Q1448.24 26.3147 1449.38 26.5172 L1449.42 34.1734 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1483.61 27.2059 L1491.06 27.2059 L1491.06 72.576 L1483.61 72.576 L1483.61 27.2059 M1483.61 9.54393 L1491.06 9.54393 L1491.06 18.9825 L1483.61 18.9825 L1483.61 9.54393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1544.37 45.1919 L1544.37 72.576 L1536.92 72.576 L1536.92 45.4349 Q1536.92 38.994 1534.4 35.7938 Q1531.89 32.5936 1526.87 32.5936 Q1520.83 32.5936 1517.35 36.4419 Q1513.87 40.2903 1513.87 46.9338 L1513.87 72.576 L1506.37 72.576 L1506.37 27.2059 L1513.87 27.2059 L1513.87 34.2544 Q1516.54 30.163 1520.14 28.1376 Q1523.79 26.1121 1528.53 26.1121 Q1536.35 26.1121 1540.36 30.9732 Q1544.37 35.7938 1544.37 45.1919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1614.61 44.2197 Q1617.24 45.1109 1619.72 48.0275 Q1622.23 50.9442 1624.74 56.0483 L1633.04 72.576 L1624.25 72.576 L1616.52 57.061 Q1613.52 50.9847 1610.68 48.9997 Q1607.89 47.0148 1603.03 47.0148 L1594.11 47.0148 L1594.11 72.576 L1585.93 72.576 L1585.93 12.096 L1604.4 12.096 Q1614.77 12.096 1619.88 16.4305 Q1624.98 20.7649 1624.98 29.5149 Q1624.98 35.2267 1622.31 38.994 Q1619.68 42.7613 1614.61 44.2197 M1594.11 18.8205 L1594.11 40.2903 L1604.4 40.2903 Q1610.32 40.2903 1613.32 37.5762 Q1616.35 34.8216 1616.35 29.5149 Q1616.35 24.2082 1613.32 21.5346 Q1610.32 18.8205 1604.4 18.8205 L1594.11 18.8205 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1678.33 48.0275 L1678.33 51.6733 L1644.06 51.6733 Q1644.55 59.3701 1648.68 63.421 Q1652.85 67.4314 1660.27 67.4314 Q1664.56 67.4314 1668.57 66.3781 Q1672.62 65.3249 1676.59 63.2184 L1676.59 70.267 Q1672.58 71.9684 1668.37 72.8596 Q1664.15 73.7508 1659.82 73.7508 Q1648.96 73.7508 1642.6 67.4314 Q1636.28 61.1119 1636.28 50.3365 Q1636.28 39.1965 1642.28 32.6746 Q1648.32 26.1121 1658.52 26.1121 Q1667.68 26.1121 1672.99 32.0264 Q1678.33 37.9003 1678.33 48.0275 M1670.88 45.84 Q1670.8 39.7232 1667.44 36.0774 Q1664.11 32.4315 1658.6 32.4315 Q1652.37 32.4315 1648.6 35.9558 Q1644.87 39.4801 1644.3 45.8805 L1670.88 45.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1697.78 65.7705 L1697.78 89.8329 L1690.28 89.8329 L1690.28 27.2059 L1697.78 27.2059 L1697.78 34.0924 Q1700.13 30.0415 1703.69 28.0971 Q1707.3 26.1121 1712.28 26.1121 Q1720.54 26.1121 1725.69 32.6746 Q1730.87 39.2371 1730.87 49.9314 Q1730.87 60.6258 1725.69 67.1883 Q1720.54 73.7508 1712.28 73.7508 Q1707.3 73.7508 1703.69 71.8063 Q1700.13 69.8214 1697.78 65.7705 M1723.14 49.9314 Q1723.14 41.7081 1719.73 37.0496 Q1716.37 32.3505 1710.46 32.3505 Q1704.54 32.3505 1701.14 37.0496 Q1697.78 41.7081 1697.78 49.9314 Q1697.78 58.1548 1701.14 62.8538 Q1704.54 67.5124 1710.46 67.5124 Q1716.37 67.5124 1719.73 62.8538 Q1723.14 58.1548 1723.14 49.9314 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1763.85 49.7694 Q1754.81 49.7694 1751.33 51.8354 Q1747.85 53.9013 1747.85 58.8839 Q1747.85 62.8538 1750.44 65.2034 Q1753.07 67.5124 1757.57 67.5124 Q1763.77 67.5124 1767.49 63.1374 Q1771.26 58.7219 1771.26 51.4303 L1771.26 49.7694 L1763.85 49.7694 M1778.71 46.6907 L1778.71 72.576 L1771.26 72.576 L1771.26 65.6895 Q1768.71 69.8214 1764.9 71.8063 Q1761.09 73.7508 1755.58 73.7508 Q1748.62 73.7508 1744.48 69.8619 Q1740.39 65.9325 1740.39 59.3701 Q1740.39 51.7138 1745.5 47.825 Q1750.64 43.9361 1760.81 43.9361 L1771.26 43.9361 L1771.26 43.2069 Q1771.26 38.0623 1767.86 35.2672 Q1764.49 32.4315 1758.38 32.4315 Q1754.49 32.4315 1750.8 33.3632 Q1747.12 34.295 1743.71 36.1584 L1743.71 29.2718 Q1747.81 27.692 1751.65 26.9223 Q1755.5 26.1121 1759.15 26.1121 Q1768.99 26.1121 1773.85 31.2163 Q1778.71 36.3204 1778.71 46.6907 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1794.07 27.2059 L1801.52 27.2059 L1801.52 72.576 L1794.07 72.576 L1794.07 27.2059 M1794.07 9.54393 L1801.52 9.54393 L1801.52 18.9825 L1794.07 18.9825 L1794.07 9.54393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1843.41 34.1734 Q1842.15 33.4443 1840.65 33.1202 Q1839.19 32.7556 1837.41 32.7556 Q1831.09 32.7556 1827.69 36.8875 Q1824.33 40.9789 1824.33 48.6757 L1824.33 72.576 L1816.83 72.576 L1816.83 27.2059 L1824.33 27.2059 L1824.33 34.2544 Q1826.68 30.1225 1830.44 28.1376 Q1834.21 26.1121 1839.6 26.1121 Q1840.37 26.1121 1841.3 26.2337 Q1842.23 26.3147 1843.37 26.5172 L1843.41 34.1734 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><circle clip-path=\"url(#clip082)\" cx=\"201.614\" cy=\"1447.87\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"311.534\" cy=\"1447.87\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"421.455\" cy=\"1447.87\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"531.375\" cy=\"1319.29\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"641.296\" cy=\"1447.87\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"751.216\" cy=\"1319.29\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"861.136\" cy=\"1319.29\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"971.057\" cy=\"1062.13\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"1080.98\" cy=\"933.543\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"1190.9\" cy=\"547.795\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"1300.82\" cy=\"933.543\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"1410.74\" cy=\"933.543\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"1520.66\" cy=\"1190.71\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"1630.58\" cy=\"1190.71\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"1740.5\" cy=\"933.543\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"1850.42\" cy=\"1062.13\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"1960.34\" cy=\"1190.71\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"2070.26\" cy=\"1062.13\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"2180.18\" cy=\"1062.13\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"2290.1\" cy=\"1319.29\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"201.614\" cy=\"162.047\" r=\"14.4\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"311.534\" cy=\"162.047\" r=\"14.4\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"421.455\" cy=\"162.047\" r=\"14.4\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"531.375\" cy=\"162.047\" r=\"14.4\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"641.296\" cy=\"162.047\" r=\"14.4\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"751.216\" cy=\"162.047\" r=\"14.4\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"861.136\" cy=\"162.047\" r=\"14.4\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"971.057\" cy=\"162.047\" r=\"14.4\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"1080.98\" cy=\"162.047\" r=\"14.4\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"1190.9\" cy=\"290.63\" r=\"14.4\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"1300.82\" cy=\"162.047\" r=\"14.4\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"1410.74\" cy=\"162.047\" r=\"14.4\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"1520.66\" cy=\"162.047\" r=\"14.4\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"1630.58\" cy=\"162.047\" r=\"14.4\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"1740.5\" cy=\"162.047\" r=\"14.4\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"1850.42\" cy=\"162.047\" r=\"14.4\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"1960.34\" cy=\"162.047\" r=\"14.4\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"2070.26\" cy=\"162.047\" r=\"14.4\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"2180.18\" cy=\"162.047\" r=\"14.4\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip082)\" cx=\"2290.1\" cy=\"162.047\" r=\"14.4\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<path clip-path=\"url(#clip080)\" d=\"M1875.85 1441.02 L2278.96 1441.02 L2278.96 1285.5 L1875.85 1285.5  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1875.85,1441.02 2278.96,1441.02 2278.96,1285.5 1875.85,1285.5 1875.85,1441.02 \"/>\n<circle clip-path=\"url(#clip080)\" cx=\"1974.24\" cy=\"1337.34\" r=\"20.48\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"4.55111\"/>\n<path clip-path=\"url(#clip080)\" d=\"M2087.81 1332.67 Q2087.1 1332.25 2086.24 1332.07 Q2085.41 1331.86 2084.39 1331.86 Q2080.78 1331.86 2078.83 1334.22 Q2076.91 1336.56 2076.91 1340.96 L2076.91 1354.62 L2072.63 1354.62 L2072.63 1328.69 L2076.91 1328.69 L2076.91 1332.72 Q2078.25 1330.36 2080.41 1329.22 Q2082.56 1328.06 2085.64 1328.06 Q2086.08 1328.06 2086.61 1328.13 Q2087.14 1328.18 2087.79 1328.3 L2087.81 1332.67 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2113.42 1340.59 L2113.42 1342.67 L2093.83 1342.67 Q2094.11 1347.07 2096.47 1349.38 Q2098.86 1351.68 2103.09 1351.68 Q2105.55 1351.68 2107.84 1351.07 Q2110.15 1350.47 2112.42 1349.27 L2112.42 1353.3 Q2110.13 1354.27 2107.72 1354.78 Q2105.31 1355.29 2102.84 1355.29 Q2096.63 1355.29 2093 1351.68 Q2089.39 1348.06 2089.39 1341.91 Q2089.39 1335.54 2092.81 1331.81 Q2096.26 1328.06 2102.1 1328.06 Q2107.33 1328.06 2110.36 1331.44 Q2113.42 1334.8 2113.42 1340.59 M2109.16 1339.34 Q2109.11 1335.84 2107.19 1333.76 Q2105.29 1331.68 2102.14 1331.68 Q2098.58 1331.68 2096.43 1333.69 Q2094.3 1335.7 2093.97 1339.36 L2109.16 1339.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2124.53 1350.73 L2124.53 1364.48 L2120.25 1364.48 L2120.25 1328.69 L2124.53 1328.69 L2124.53 1332.62 Q2125.87 1330.31 2127.91 1329.2 Q2129.97 1328.06 2132.81 1328.06 Q2137.54 1328.06 2140.48 1331.81 Q2143.44 1335.56 2143.44 1341.68 Q2143.44 1347.79 2140.48 1351.54 Q2137.54 1355.29 2132.81 1355.29 Q2129.97 1355.29 2127.91 1354.18 Q2125.87 1353.04 2124.53 1350.73 M2139.02 1341.68 Q2139.02 1336.98 2137.07 1334.31 Q2135.15 1331.63 2131.77 1331.63 Q2128.39 1331.63 2126.45 1334.31 Q2124.53 1336.98 2124.53 1341.68 Q2124.53 1346.37 2126.45 1349.06 Q2128.39 1351.72 2131.77 1351.72 Q2135.15 1351.72 2137.07 1349.06 Q2139.02 1346.37 2139.02 1341.68 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2162.28 1341.58 Q2157.12 1341.58 2155.13 1342.76 Q2153.14 1343.94 2153.14 1346.79 Q2153.14 1349.06 2154.62 1350.4 Q2156.12 1351.72 2158.69 1351.72 Q2162.24 1351.72 2164.37 1349.22 Q2166.52 1346.7 2166.52 1342.53 L2166.52 1341.58 L2162.28 1341.58 M2170.78 1339.82 L2170.78 1354.62 L2166.52 1354.62 L2166.52 1350.68 Q2165.06 1353.04 2162.88 1354.18 Q2160.71 1355.29 2157.56 1355.29 Q2153.58 1355.29 2151.22 1353.06 Q2148.88 1350.82 2148.88 1347.07 Q2148.88 1342.69 2151.8 1340.47 Q2154.74 1338.25 2160.55 1338.25 L2166.52 1338.25 L2166.52 1337.83 Q2166.52 1334.89 2164.57 1333.3 Q2162.65 1331.68 2159.16 1331.68 Q2156.93 1331.68 2154.83 1332.21 Q2152.72 1332.74 2150.78 1333.81 L2150.78 1329.87 Q2153.12 1328.97 2155.31 1328.53 Q2157.51 1328.06 2159.6 1328.06 Q2165.22 1328.06 2168 1330.98 Q2170.78 1333.9 2170.78 1339.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2179.55 1328.69 L2183.81 1328.69 L2183.81 1354.62 L2179.55 1354.62 L2179.55 1328.69 M2179.55 1318.6 L2183.81 1318.6 L2183.81 1323.99 L2179.55 1323.99 L2179.55 1318.6 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2207.74 1332.67 Q2207.03 1332.25 2206.17 1332.07 Q2205.34 1331.86 2204.32 1331.86 Q2200.71 1331.86 2198.76 1334.22 Q2196.84 1336.56 2196.84 1340.96 L2196.84 1354.62 L2192.56 1354.62 L2192.56 1328.69 L2196.84 1328.69 L2196.84 1332.72 Q2198.18 1330.36 2200.34 1329.22 Q2202.49 1328.06 2205.57 1328.06 Q2206.01 1328.06 2206.54 1328.13 Q2207.07 1328.18 2207.72 1328.3 L2207.74 1332.67 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><circle clip-path=\"url(#clip080)\" cx=\"1974.24\" cy=\"1389.18\" r=\"20.48\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"4.55111\"/>\n<path clip-path=\"url(#clip080)\" d=\"M2072.63 1380.53 L2076.89 1380.53 L2082.21 1400.76 L2087.51 1380.53 L2092.54 1380.53 L2097.86 1400.76 L2103.16 1380.53 L2107.42 1380.53 L2100.64 1406.46 L2095.62 1406.46 L2090.04 1385.21 L2084.44 1406.46 L2079.41 1406.46 L2072.63 1380.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2123.93 1383.52 Q2120.5 1383.52 2118.51 1386.2 Q2116.52 1388.86 2116.52 1393.52 Q2116.52 1398.17 2118.49 1400.85 Q2120.48 1403.52 2123.93 1403.52 Q2127.33 1403.52 2129.32 1400.83 Q2131.31 1398.15 2131.31 1393.52 Q2131.31 1388.91 2129.32 1386.22 Q2127.33 1383.52 2123.93 1383.52 M2123.93 1379.9 Q2129.48 1379.9 2132.65 1383.52 Q2135.82 1387.13 2135.82 1393.52 Q2135.82 1399.88 2132.65 1403.52 Q2129.48 1407.13 2123.93 1407.13 Q2118.35 1407.13 2115.18 1403.52 Q2112.03 1399.88 2112.03 1393.52 Q2112.03 1387.13 2115.18 1383.52 Q2118.35 1379.9 2123.93 1379.9 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2157.91 1384.51 Q2157.19 1384.09 2156.33 1383.91 Q2155.5 1383.7 2154.48 1383.7 Q2150.87 1383.7 2148.93 1386.06 Q2147 1388.4 2147 1392.8 L2147 1406.46 L2142.72 1406.46 L2142.72 1380.53 L2147 1380.53 L2147 1384.56 Q2148.35 1382.2 2150.5 1381.06 Q2152.65 1379.9 2155.73 1379.9 Q2156.17 1379.9 2156.7 1379.97 Q2157.24 1380.02 2157.88 1380.14 L2157.91 1384.51 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2162.21 1370.44 L2166.5 1370.44 L2166.5 1391.71 L2179.2 1380.53 L2184.64 1380.53 L2170.89 1392.66 L2185.22 1406.46 L2179.67 1406.46 L2166.5 1393.79 L2166.5 1406.46 L2162.21 1406.46 L2162.21 1370.44 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2189.83 1380.53 L2194.09 1380.53 L2194.09 1406.46 L2189.83 1406.46 L2189.83 1380.53 M2189.83 1370.44 L2194.09 1370.44 L2194.09 1375.83 L2189.83 1375.83 L2189.83 1370.44 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2224.55 1390.81 L2224.55 1406.46 L2220.29 1406.46 L2220.29 1390.95 Q2220.29 1387.27 2218.86 1385.44 Q2217.42 1383.61 2214.55 1383.61 Q2211.1 1383.61 2209.11 1385.81 Q2207.12 1388.01 2207.12 1391.8 L2207.12 1406.46 L2202.84 1406.46 L2202.84 1380.53 L2207.12 1380.53 L2207.12 1384.56 Q2208.65 1382.22 2210.71 1381.06 Q2212.79 1379.9 2215.5 1379.9 Q2219.97 1379.9 2222.26 1382.68 Q2224.55 1385.44 2224.55 1390.81 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2250.11 1393.19 Q2250.11 1388.56 2248.18 1386.02 Q2246.29 1383.47 2242.84 1383.47 Q2239.41 1383.47 2237.49 1386.02 Q2235.59 1388.56 2235.59 1393.19 Q2235.59 1397.8 2237.49 1400.34 Q2239.41 1402.89 2242.84 1402.89 Q2246.29 1402.89 2248.18 1400.34 Q2250.11 1397.8 2250.11 1393.19 M2254.36 1403.24 Q2254.36 1409.86 2251.43 1413.08 Q2248.49 1416.32 2242.42 1416.32 Q2240.18 1416.32 2238.18 1415.97 Q2236.19 1415.65 2234.32 1414.95 L2234.32 1410.81 Q2236.19 1411.83 2238.02 1412.31 Q2239.85 1412.8 2241.75 1412.8 Q2245.94 1412.8 2248.02 1410.6 Q2250.11 1408.42 2250.11 1404 L2250.11 1401.9 Q2248.79 1404.19 2246.73 1405.32 Q2244.67 1406.46 2241.8 1406.46 Q2237.03 1406.46 2234.11 1402.82 Q2231.19 1399.19 2231.19 1393.19 Q2231.19 1387.17 2234.11 1383.54 Q2237.03 1379.9 2241.8 1379.9 Q2244.67 1379.9 2246.73 1381.04 Q2248.79 1382.17 2250.11 1384.46 L2250.11 1380.53 L2254.36 1380.53 L2254.36 1403.24 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"reliability/#Distribution-of-Broken-Vehicles-and-Probability-of-Missing-Crew","page":"Reliability","title":"Distribution of Broken Vehicles and Probability of Missing Crew","text":"","category":"section"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"If we were focused more on the small probability that there wouldn't be enough vehicles in the morning to start a full ten, then we want to understand the histogram of how many vehicles are broken on any given day.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"mutable struct ObserveHistogram\n    counts::Array{Int64,2}\n    working::Int64\n    broken::Int64\n    burn::Float64\n    ObserveHistogram(e::Experiment, burn) = new(\n        zeros(Int64, e.workers_max + 1, worker_cnt(e) + 1), 0, 0, burn)\nend\nmust_work(o::ObserveHistogram) = size(o.counts, 1)\ntotal_workers(o::ObserveHistogram) = size(o.counts, 2)\n\nfunction observe(experiment::Experiment, observation::ObserveHistogram, when, which)\n    if when > observation.burn\n        day_start = Int(floor(experiment.time + next_work_time(experiment.time, experiment.start_time)[1]))\n        next_start = Int(floor(when + next_work_time(when, experiment.start_time)[1]))\n        if day_start != next_start\n            observation.counts[observation.working + 1, observation.broken + 1] += 1\n        end\n    end\n\n    who, transition = which\n    if transition == :work\n        observation.working += 1\n    elseif transition == :done\n        observation.working -= 1\n    elseif transition == :break\n        observation.broken += 1\n        observation.working -= 1\n    elseif transition == :repair\n        observation.broken -= 1\n    else\n        @assert transition ∈ (:work, :done, :break, :repair)\n    end\nend;","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"This observer will help us see what happens if we keep the same total number of vehicles but send more out each day for work.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"function compare_across_workers(obs::Vector{ObserveHistogram}, labels, title)\n    firstplot = true\n    cols = palette(:tableau_20, length(obs))\n    for (obs_idx, observation) in enumerate(obs)\n        worker_cnt = total_workers(observation)\n        broken = vec(sum(observation.counts, dims=1))\n        cnt = findlast(broken .> 0)\n        normed = broken[1:cnt] / sum(broken)\n        if firstplot\n            firstplot = false\n            plot(1:cnt, normed, color=cols[obs_idx], seriestype=:scatter, markersize=2.5, label=false)\n            plot!(1:cnt, normed, color=cols[obs_idx], label=labels[obs_idx], legendtitle=\"Crew Size\")\n        else\n            plot!(1:cnt, normed, color=cols[obs_idx], seriestype=:scatter, markersize=2.5, label=false)\n            plot!(1:cnt, normed, color=cols[obs_idx], label=labels[obs_idx])\n        end\n    end\n    xlabel!(\"Count of Broken\")\n    ylabel!(\"Probability Mass\")\n    title!(title)\nend\n\nfunction show_competition_effect()\n    rng = Xoshiro(4377124)\n    observations = ObserveHistogram[]\n    labels = String[]\n    years = 10\n    day_cnt = 365 * years\n    worker_cnt = 20\n    for must_work in [1, 5, 10, 15, 20]\n        experiment = Experiment(worker_cnt, must_work, rng)\n        burn = min(day_cnt ÷ 10, 3650)\n        observation = ObserveHistogram(experiment, burn)\n        run(experiment, observation, day_cnt)\n        push!(observations, observation)\n        push!(labels, string(must_work))\n    end\n\n    compare_across_workers(observations, labels, \"Number Broken as Crew Increases\")\nend\nshow_competition_effect()","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip110\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip110)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip111\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip110)\" d=\"M219.866 1423.18 L2352.76 1423.18 L2352.76 123.472 L219.866 123.472  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip112\">\n    <rect x=\"219\" y=\"123\" width=\"2134\" height=\"1301\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"512.403,1423.18 512.403,123.472 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"899.357,1423.18 899.357,123.472 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1286.31,1423.18 1286.31,123.472 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1673.26,1423.18 1673.26,123.472 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2060.22,1423.18 2060.22,123.472 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"219.866,1423.18 2352.76,1423.18 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"512.403,1423.18 512.403,1404.28 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"899.357,1423.18 899.357,1404.28 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1286.31,1423.18 1286.31,1404.28 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1673.26,1423.18 1673.26,1404.28 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2060.22,1423.18 2060.22,1404.28 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M484.14 1481.64 L500.459 1481.64 L500.459 1485.58 L478.515 1485.58 L478.515 1481.64 Q481.177 1478.89 485.76 1474.26 Q490.366 1469.61 491.547 1468.27 Q493.792 1465.74 494.672 1464.01 Q495.575 1462.25 495.575 1460.56 Q495.575 1457.8 493.63 1456.07 Q491.709 1454.33 488.607 1454.33 Q486.408 1454.33 483.954 1455.09 Q481.524 1455.86 478.746 1457.41 L478.746 1452.69 Q481.57 1451.55 484.024 1450.97 Q486.478 1450.39 488.515 1450.39 Q493.885 1450.39 497.079 1453.08 Q500.274 1455.77 500.274 1460.26 Q500.274 1462.39 499.464 1464.31 Q498.677 1466.2 496.57 1468.8 Q495.991 1469.47 492.89 1472.69 Q489.788 1475.88 484.14 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M510.274 1479.7 L515.158 1479.7 L515.158 1485.58 L510.274 1485.58 L510.274 1479.7 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M525.389 1451.02 L543.746 1451.02 L543.746 1454.96 L529.672 1454.96 L529.672 1463.43 Q530.69 1463.08 531.709 1462.92 Q532.727 1462.73 533.746 1462.73 Q539.533 1462.73 542.912 1465.9 Q546.292 1469.08 546.292 1474.49 Q546.292 1480.07 542.82 1483.17 Q539.348 1486.25 533.028 1486.25 Q530.852 1486.25 528.584 1485.88 Q526.338 1485.51 523.931 1484.77 L523.931 1480.07 Q526.014 1481.2 528.237 1481.76 Q530.459 1482.32 532.936 1482.32 Q536.94 1482.32 539.278 1480.21 Q541.616 1478.1 541.616 1474.49 Q541.616 1470.88 539.278 1468.77 Q536.94 1466.67 532.936 1466.67 Q531.061 1466.67 529.186 1467.08 Q527.334 1467.5 525.389 1468.38 L525.389 1451.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M866.522 1451.02 L884.878 1451.02 L884.878 1454.96 L870.804 1454.96 L870.804 1463.43 Q871.823 1463.08 872.841 1462.92 Q873.86 1462.73 874.878 1462.73 Q880.665 1462.73 884.045 1465.9 Q887.424 1469.08 887.424 1474.49 Q887.424 1480.07 883.952 1483.17 Q880.48 1486.25 874.161 1486.25 Q871.985 1486.25 869.716 1485.88 Q867.471 1485.51 865.063 1484.77 L865.063 1480.07 Q867.147 1481.2 869.369 1481.76 Q871.591 1482.32 874.068 1482.32 Q878.073 1482.32 880.411 1480.21 Q882.749 1478.1 882.749 1474.49 Q882.749 1470.88 880.411 1468.77 Q878.073 1466.67 874.068 1466.67 Q872.193 1466.67 870.318 1467.08 Q868.466 1467.5 866.522 1468.38 L866.522 1451.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M896.637 1479.7 L901.522 1479.7 L901.522 1485.58 L896.637 1485.58 L896.637 1479.7 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M921.707 1454.1 Q918.096 1454.1 916.267 1457.66 Q914.461 1461.2 914.461 1468.33 Q914.461 1475.44 916.267 1479.01 Q918.096 1482.55 921.707 1482.55 Q925.341 1482.55 927.146 1479.01 Q928.975 1475.44 928.975 1468.33 Q928.975 1461.2 927.146 1457.66 Q925.341 1454.1 921.707 1454.1 M921.707 1450.39 Q927.517 1450.39 930.572 1455 Q933.651 1459.58 933.651 1468.33 Q933.651 1477.06 930.572 1481.67 Q927.517 1486.25 921.707 1486.25 Q915.896 1486.25 912.818 1481.67 Q909.762 1477.06 909.762 1468.33 Q909.762 1459.58 912.818 1455 Q915.896 1450.39 921.707 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1252.63 1451.02 L1274.85 1451.02 L1274.85 1453.01 L1262.31 1485.58 L1257.42 1485.58 L1269.23 1454.96 L1252.63 1454.96 L1252.63 1451.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1283.97 1479.7 L1288.86 1479.7 L1288.86 1485.58 L1283.97 1485.58 L1283.97 1479.7 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1299.09 1451.02 L1317.45 1451.02 L1317.45 1454.96 L1303.37 1454.96 L1303.37 1463.43 Q1304.39 1463.08 1305.41 1462.92 Q1306.43 1462.73 1307.45 1462.73 Q1313.23 1462.73 1316.61 1465.9 Q1319.99 1469.08 1319.99 1474.49 Q1319.99 1480.07 1316.52 1483.17 Q1313.05 1486.25 1306.73 1486.25 Q1304.55 1486.25 1302.28 1485.88 Q1300.04 1485.51 1297.63 1484.77 L1297.63 1480.07 Q1299.71 1481.2 1301.94 1481.76 Q1304.16 1482.32 1306.64 1482.32 Q1310.64 1482.32 1312.98 1480.21 Q1315.32 1478.1 1315.32 1474.49 Q1315.32 1470.88 1312.98 1468.77 Q1310.64 1466.67 1306.64 1466.67 Q1304.76 1466.67 1302.89 1467.08 Q1301.03 1467.5 1299.09 1468.38 L1299.09 1451.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1625.34 1481.64 L1632.98 1481.64 L1632.98 1455.28 L1624.67 1456.95 L1624.67 1452.69 L1632.93 1451.02 L1637.61 1451.02 L1637.61 1481.64 L1645.24 1481.64 L1645.24 1485.58 L1625.34 1485.58 L1625.34 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1664.69 1454.1 Q1661.08 1454.1 1659.25 1457.66 Q1657.44 1461.2 1657.44 1468.33 Q1657.44 1475.44 1659.25 1479.01 Q1661.08 1482.55 1664.69 1482.55 Q1668.32 1482.55 1670.13 1479.01 Q1671.96 1475.44 1671.96 1468.33 Q1671.96 1461.2 1670.13 1457.66 Q1668.32 1454.1 1664.69 1454.1 M1664.69 1450.39 Q1670.5 1450.39 1673.55 1455 Q1676.63 1459.58 1676.63 1468.33 Q1676.63 1477.06 1673.55 1481.67 Q1670.5 1486.25 1664.69 1486.25 Q1658.88 1486.25 1655.8 1481.67 Q1652.74 1477.06 1652.74 1468.33 Q1652.74 1459.58 1655.8 1455 Q1658.88 1450.39 1664.69 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1684.85 1479.7 L1689.73 1479.7 L1689.73 1485.58 L1684.85 1485.58 L1684.85 1479.7 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1709.92 1454.1 Q1706.31 1454.1 1704.48 1457.66 Q1702.67 1461.2 1702.67 1468.33 Q1702.67 1475.44 1704.48 1479.01 Q1706.31 1482.55 1709.92 1482.55 Q1713.55 1482.55 1715.36 1479.01 Q1717.19 1475.44 1717.19 1468.33 Q1717.19 1461.2 1715.36 1457.66 Q1713.55 1454.1 1709.92 1454.1 M1709.92 1450.39 Q1715.73 1450.39 1718.79 1455 Q1721.86 1459.58 1721.86 1468.33 Q1721.86 1477.06 1718.79 1481.67 Q1715.73 1486.25 1709.92 1486.25 Q1704.11 1486.25 1701.03 1481.67 Q1697.98 1477.06 1697.98 1468.33 Q1697.98 1459.58 1701.03 1455 Q1704.11 1450.39 1709.92 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2012.79 1481.64 L2020.43 1481.64 L2020.43 1455.28 L2012.12 1456.95 L2012.12 1452.69 L2020.38 1451.02 L2025.06 1451.02 L2025.06 1481.64 L2032.7 1481.64 L2032.7 1485.58 L2012.79 1485.58 L2012.79 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2046.17 1481.64 L2062.49 1481.64 L2062.49 1485.58 L2040.54 1485.58 L2040.54 1481.64 Q2043.2 1478.89 2047.79 1474.26 Q2052.39 1469.61 2053.58 1468.27 Q2055.82 1465.74 2056.7 1464.01 Q2057.6 1462.25 2057.6 1460.56 Q2057.6 1457.8 2055.66 1456.07 Q2053.74 1454.33 2050.64 1454.33 Q2048.44 1454.33 2045.98 1455.09 Q2043.55 1455.86 2040.77 1457.41 L2040.77 1452.69 Q2043.6 1451.55 2046.05 1450.97 Q2048.51 1450.39 2050.54 1450.39 Q2055.91 1450.39 2059.11 1453.08 Q2062.3 1455.77 2062.3 1460.26 Q2062.3 1462.39 2061.49 1464.31 Q2060.7 1466.2 2058.6 1468.8 Q2058.02 1469.47 2054.92 1472.69 Q2051.82 1475.88 2046.17 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2072.3 1479.7 L2077.19 1479.7 L2077.19 1485.58 L2072.3 1485.58 L2072.3 1479.7 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2087.42 1451.02 L2105.77 1451.02 L2105.77 1454.96 L2091.7 1454.96 L2091.7 1463.43 Q2092.72 1463.08 2093.74 1462.92 Q2094.76 1462.73 2095.77 1462.73 Q2101.56 1462.73 2104.94 1465.9 Q2108.32 1469.08 2108.32 1474.49 Q2108.32 1480.07 2104.85 1483.17 Q2101.38 1486.25 2095.06 1486.25 Q2092.88 1486.25 2090.61 1485.88 Q2088.37 1485.51 2085.96 1484.77 L2085.96 1480.07 Q2088.04 1481.2 2090.26 1481.76 Q2092.49 1482.32 2094.96 1482.32 Q2098.97 1482.32 2101.31 1480.21 Q2103.64 1478.1 2103.64 1474.49 Q2103.64 1470.88 2101.31 1468.77 Q2098.97 1466.67 2094.96 1466.67 Q2093.09 1466.67 2091.21 1467.08 Q2089.36 1467.5 2087.42 1468.38 L2087.42 1451.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1066.9 1524.18 L1066.9 1530.96 Q1063.65 1527.94 1059.96 1526.44 Q1056.3 1524.95 1052.16 1524.95 Q1044.02 1524.95 1039.69 1529.95 Q1035.36 1534.91 1035.36 1544.33 Q1035.36 1553.72 1039.69 1558.72 Q1044.02 1563.68 1052.16 1563.68 Q1056.3 1563.68 1059.96 1562.19 Q1063.65 1560.69 1066.9 1557.67 L1066.9 1564.38 Q1063.53 1566.68 1059.74 1567.82 Q1055.98 1568.97 1051.78 1568.97 Q1040.99 1568.97 1034.79 1562.38 Q1028.58 1555.76 1028.58 1544.33 Q1028.58 1532.87 1034.79 1526.28 Q1040.99 1519.66 1051.78 1519.66 Q1056.05 1519.66 1059.8 1520.81 Q1063.59 1521.92 1066.9 1524.18 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1090.39 1536.5 Q1085.68 1536.5 1082.94 1540.19 Q1080.21 1543.85 1080.21 1550.25 Q1080.21 1556.65 1082.91 1560.34 Q1085.65 1564 1090.39 1564 Q1095.07 1564 1097.81 1560.31 Q1100.54 1556.62 1100.54 1550.25 Q1100.54 1543.92 1097.81 1540.23 Q1095.07 1536.5 1090.39 1536.5 M1090.39 1531.54 Q1098.03 1531.54 1102.39 1536.5 Q1106.75 1541.47 1106.75 1550.25 Q1106.75 1559 1102.39 1564 Q1098.03 1568.97 1090.39 1568.97 Q1082.72 1568.97 1078.36 1564 Q1074.03 1559 1074.03 1550.25 Q1074.03 1541.47 1078.36 1536.5 Q1082.72 1531.54 1090.39 1531.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1115.85 1553.98 L1115.85 1532.4 L1121.71 1532.4 L1121.71 1553.75 Q1121.71 1558.81 1123.68 1561.36 Q1125.66 1563.87 1129.6 1563.87 Q1134.35 1563.87 1137.08 1560.85 Q1139.85 1557.83 1139.85 1552.61 L1139.85 1532.4 L1145.71 1532.4 L1145.71 1568.04 L1139.85 1568.04 L1139.85 1562.57 Q1137.72 1565.82 1134.89 1567.41 Q1132.09 1568.97 1128.36 1568.97 Q1122.22 1568.97 1119.04 1565.15 Q1115.85 1561.33 1115.85 1553.98 M1130.59 1531.54 L1130.59 1531.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1187.4 1546.53 L1187.4 1568.04 L1181.55 1568.04 L1181.55 1546.72 Q1181.55 1541.66 1179.57 1539.14 Q1177.6 1536.63 1173.65 1536.63 Q1168.91 1536.63 1166.17 1539.65 Q1163.44 1542.68 1163.44 1547.9 L1163.44 1568.04 L1157.55 1568.04 L1157.55 1532.4 L1163.44 1532.4 L1163.44 1537.93 Q1165.54 1534.72 1168.37 1533.13 Q1171.24 1531.54 1174.96 1531.54 Q1181.1 1531.54 1184.25 1535.36 Q1187.4 1539.14 1187.4 1546.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1204.88 1522.27 L1204.88 1532.4 L1216.94 1532.4 L1216.94 1536.95 L1204.88 1536.95 L1204.88 1556.3 Q1204.88 1560.66 1206.06 1561.9 Q1207.26 1563.14 1210.93 1563.14 L1216.94 1563.14 L1216.94 1568.04 L1210.93 1568.04 Q1204.15 1568.04 1201.57 1565.53 Q1198.99 1562.98 1198.99 1556.3 L1198.99 1536.95 L1194.69 1536.95 L1194.69 1532.4 L1198.99 1532.4 L1198.99 1522.27 L1204.88 1522.27 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1259.18 1536.5 Q1254.47 1536.5 1251.73 1540.19 Q1248.99 1543.85 1248.99 1550.25 Q1248.99 1556.65 1251.7 1560.34 Q1254.43 1564 1259.18 1564 Q1263.86 1564 1266.59 1560.31 Q1269.33 1556.62 1269.33 1550.25 Q1269.33 1543.92 1266.59 1540.23 Q1263.86 1536.5 1259.18 1536.5 M1259.18 1531.54 Q1266.82 1531.54 1271.18 1536.5 Q1275.54 1541.47 1275.54 1550.25 Q1275.54 1559 1271.18 1564 Q1266.82 1568.97 1259.18 1568.97 Q1251.51 1568.97 1247.15 1564 Q1242.82 1559 1242.82 1550.25 Q1242.82 1541.47 1247.15 1536.5 Q1251.51 1531.54 1259.18 1531.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1303.29 1518.52 L1303.29 1523.39 L1297.69 1523.39 Q1294.54 1523.39 1293.3 1524.66 Q1292.09 1525.93 1292.09 1529.24 L1292.09 1532.4 L1301.73 1532.4 L1301.73 1536.95 L1292.09 1536.95 L1292.09 1568.04 L1286.2 1568.04 L1286.2 1536.95 L1280.6 1536.95 L1280.6 1532.4 L1286.2 1532.4 L1286.2 1529.91 Q1286.2 1523.96 1288.97 1521.26 Q1291.74 1518.52 1297.75 1518.52 L1303.29 1518.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1335.6 1545.35 L1335.6 1562.76 L1345.91 1562.76 Q1351.1 1562.76 1353.58 1560.63 Q1356.1 1558.46 1356.1 1554.04 Q1356.1 1549.58 1353.58 1547.48 Q1351.1 1545.35 1345.91 1545.35 L1335.6 1545.35 M1335.6 1525.81 L1335.6 1540.13 L1345.11 1540.13 Q1349.82 1540.13 1352.12 1538.38 Q1354.44 1536.6 1354.44 1532.97 Q1354.44 1529.37 1352.12 1527.59 Q1349.82 1525.81 1345.11 1525.81 L1335.6 1525.81 M1329.17 1520.52 L1345.59 1520.52 Q1352.94 1520.52 1356.92 1523.58 Q1360.9 1526.63 1360.9 1532.27 Q1360.9 1536.63 1358.86 1539.21 Q1356.83 1541.79 1352.88 1542.42 Q1357.62 1543.44 1360.23 1546.69 Q1362.87 1549.9 1362.87 1554.74 Q1362.87 1561.11 1358.55 1564.57 Q1354.22 1568.04 1346.23 1568.04 L1329.17 1568.04 L1329.17 1520.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1394.29 1537.87 Q1393.3 1537.3 1392.13 1537.04 Q1390.98 1536.76 1389.58 1536.76 Q1384.61 1536.76 1381.94 1540 Q1379.3 1543.22 1379.3 1549.27 L1379.3 1568.04 L1373.41 1568.04 L1373.41 1532.4 L1379.3 1532.4 L1379.3 1537.93 Q1381.14 1534.69 1384.1 1533.13 Q1387.06 1531.54 1391.3 1531.54 Q1391.9 1531.54 1392.63 1531.63 Q1393.37 1531.7 1394.26 1531.85 L1394.29 1537.87 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1412.81 1536.5 Q1408.1 1536.5 1405.37 1540.19 Q1402.63 1543.85 1402.63 1550.25 Q1402.63 1556.65 1405.33 1560.34 Q1408.07 1564 1412.81 1564 Q1417.49 1564 1420.23 1560.31 Q1422.97 1556.62 1422.97 1550.25 Q1422.97 1543.92 1420.23 1540.23 Q1417.49 1536.5 1412.81 1536.5 M1412.81 1531.54 Q1420.45 1531.54 1424.81 1536.5 Q1429.17 1541.47 1429.17 1550.25 Q1429.17 1559 1424.81 1564 Q1420.45 1568.97 1412.81 1568.97 Q1405.14 1568.97 1400.78 1564 Q1396.45 1559 1396.45 1550.25 Q1396.45 1541.47 1400.78 1536.5 Q1405.14 1531.54 1412.81 1531.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1438.66 1518.52 L1444.55 1518.52 L1444.55 1547.77 L1462.02 1532.4 L1469.5 1532.4 L1450.59 1549.07 L1470.3 1568.04 L1462.66 1568.04 L1444.55 1550.63 L1444.55 1568.04 L1438.66 1568.04 L1438.66 1518.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1504.8 1548.76 L1504.8 1551.62 L1477.87 1551.62 Q1478.25 1557.67 1481.5 1560.85 Q1484.78 1564 1490.6 1564 Q1493.98 1564 1497.13 1563.17 Q1500.31 1562.35 1503.43 1560.69 L1503.43 1566.23 Q1500.28 1567.57 1496.97 1568.27 Q1493.66 1568.97 1490.25 1568.97 Q1481.72 1568.97 1476.73 1564 Q1471.76 1559.04 1471.76 1550.57 Q1471.76 1541.82 1476.47 1536.69 Q1481.21 1531.54 1489.23 1531.54 Q1496.43 1531.54 1500.6 1536.18 Q1504.8 1540.8 1504.8 1548.76 M1498.94 1547.04 Q1498.88 1542.23 1496.24 1539.37 Q1493.63 1536.5 1489.3 1536.5 Q1484.4 1536.5 1481.44 1539.27 Q1478.51 1542.04 1478.06 1547.07 L1498.94 1547.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1544.04 1546.53 L1544.04 1568.04 L1538.19 1568.04 L1538.19 1546.72 Q1538.19 1541.66 1536.21 1539.14 Q1534.24 1536.63 1530.29 1536.63 Q1525.55 1536.63 1522.81 1539.65 Q1520.08 1542.68 1520.08 1547.9 L1520.08 1568.04 L1514.19 1568.04 L1514.19 1532.4 L1520.08 1532.4 L1520.08 1537.93 Q1522.18 1534.72 1525.01 1533.13 Q1527.87 1531.54 1531.6 1531.54 Q1537.74 1531.54 1540.89 1535.36 Q1544.04 1539.14 1544.04 1546.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"219.866,1386.92 2352.76,1386.92 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"219.866,1045.43 2352.76,1045.43 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"219.866,703.937 2352.76,703.937 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"219.866,362.447 2352.76,362.447 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"219.866,1423.18 219.866,123.472 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"219.866,1386.92 238.764,1386.92 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"219.866,1045.43 238.764,1045.43 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"219.866,703.937 238.764,703.937 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"219.866,362.447 238.764,362.447 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M126.691 1372.71 Q123.08 1372.71 121.251 1376.28 Q119.445 1379.82 119.445 1386.95 Q119.445 1394.06 121.251 1397.62 Q123.08 1401.16 126.691 1401.16 Q130.325 1401.16 132.13 1397.62 Q133.959 1394.06 133.959 1386.95 Q133.959 1379.82 132.13 1376.28 Q130.325 1372.71 126.691 1372.71 M126.691 1369.01 Q132.501 1369.01 135.556 1373.62 Q138.635 1378.2 138.635 1386.95 Q138.635 1395.68 135.556 1400.28 Q132.501 1404.87 126.691 1404.87 Q120.88 1404.87 117.802 1400.28 Q114.746 1395.68 114.746 1386.95 Q114.746 1378.2 117.802 1373.62 Q120.88 1369.01 126.691 1369.01 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M146.853 1398.32 L151.737 1398.32 L151.737 1404.2 L146.853 1404.2 L146.853 1398.32 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M171.922 1372.71 Q168.311 1372.71 166.482 1376.28 Q164.677 1379.82 164.677 1386.95 Q164.677 1394.06 166.482 1397.62 Q168.311 1401.16 171.922 1401.16 Q175.556 1401.16 177.362 1397.62 Q179.19 1394.06 179.19 1386.95 Q179.19 1379.82 177.362 1376.28 Q175.556 1372.71 171.922 1372.71 M171.922 1369.01 Q177.732 1369.01 180.788 1373.62 Q183.866 1378.2 183.866 1386.95 Q183.866 1395.68 180.788 1400.28 Q177.732 1404.87 171.922 1404.87 Q166.112 1404.87 163.033 1400.28 Q159.978 1395.68 159.978 1386.95 Q159.978 1378.2 163.033 1373.62 Q166.112 1369.01 171.922 1369.01 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M128.288 1031.22 Q124.677 1031.22 122.848 1034.79 Q121.043 1038.33 121.043 1045.46 Q121.043 1052.57 122.848 1056.13 Q124.677 1059.67 128.288 1059.67 Q131.922 1059.67 133.728 1056.13 Q135.556 1052.57 135.556 1045.46 Q135.556 1038.33 133.728 1034.79 Q131.922 1031.22 128.288 1031.22 M128.288 1027.52 Q134.098 1027.52 137.154 1032.13 Q140.232 1036.71 140.232 1045.46 Q140.232 1054.19 137.154 1058.79 Q134.098 1063.38 128.288 1063.38 Q122.478 1063.38 119.399 1058.79 Q116.343 1054.19 116.343 1045.46 Q116.343 1036.71 119.399 1032.13 Q122.478 1027.52 128.288 1027.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M148.45 1056.83 L153.334 1056.83 L153.334 1062.71 L148.45 1062.71 L148.45 1056.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M167.547 1058.77 L183.866 1058.77 L183.866 1062.71 L161.922 1062.71 L161.922 1058.77 Q164.584 1056.02 169.167 1051.39 Q173.774 1046.73 174.954 1045.39 Q177.2 1042.87 178.079 1041.13 Q178.982 1039.37 178.982 1037.68 Q178.982 1034.93 177.038 1033.19 Q175.116 1031.46 172.014 1031.46 Q169.815 1031.46 167.362 1032.22 Q164.931 1032.98 162.153 1034.53 L162.153 1029.81 Q164.977 1028.68 167.431 1028.1 Q169.885 1027.52 171.922 1027.52 Q177.292 1027.52 180.487 1030.21 Q183.681 1032.89 183.681 1037.38 Q183.681 1039.51 182.871 1041.43 Q182.084 1043.33 179.977 1045.92 Q179.399 1046.59 176.297 1049.81 Q173.195 1053.01 167.547 1058.77 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M126.205 689.735 Q122.593 689.735 120.765 693.3 Q118.959 696.842 118.959 703.971 Q118.959 711.078 120.765 714.643 Q122.593 718.184 126.205 718.184 Q129.839 718.184 131.644 714.643 Q133.473 711.078 133.473 703.971 Q133.473 696.842 131.644 693.3 Q129.839 689.735 126.205 689.735 M126.205 686.032 Q132.015 686.032 135.07 690.638 Q138.149 695.221 138.149 703.971 Q138.149 712.698 135.07 717.305 Q132.015 721.888 126.205 721.888 Q120.394 721.888 117.316 717.305 Q114.26 712.698 114.26 703.971 Q114.26 695.221 117.316 690.638 Q120.394 686.032 126.205 686.032 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M146.366 715.337 L151.251 715.337 L151.251 721.217 L146.366 721.217 L146.366 715.337 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M174.283 690.731 L162.477 709.18 L174.283 709.18 L174.283 690.731 M173.056 686.657 L178.936 686.657 L178.936 709.18 L183.866 709.18 L183.866 713.068 L178.936 713.068 L178.936 721.217 L174.283 721.217 L174.283 713.068 L158.681 713.068 L158.681 708.555 L173.056 686.657 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M126.529 348.246 Q122.918 348.246 121.089 351.811 Q119.283 355.352 119.283 362.482 Q119.283 369.588 121.089 373.153 Q122.918 376.695 126.529 376.695 Q130.163 376.695 131.968 373.153 Q133.797 369.588 133.797 362.482 Q133.797 355.352 131.968 351.811 Q130.163 348.246 126.529 348.246 M126.529 344.542 Q132.339 344.542 135.394 349.149 Q138.473 353.732 138.473 362.482 Q138.473 371.209 135.394 375.815 Q132.339 380.398 126.529 380.398 Q120.718 380.398 117.64 375.815 Q114.584 371.209 114.584 362.482 Q114.584 353.732 117.64 349.149 Q120.718 344.542 126.529 344.542 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M146.691 373.848 L151.575 373.848 L151.575 379.727 L146.691 379.727 L146.691 373.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M172.339 360.584 Q169.19 360.584 167.339 362.737 Q165.51 364.889 165.51 368.639 Q165.51 372.366 167.339 374.542 Q169.19 376.695 172.339 376.695 Q175.487 376.695 177.315 374.542 Q179.167 372.366 179.167 368.639 Q179.167 364.889 177.315 362.737 Q175.487 360.584 172.339 360.584 M181.621 345.931 L181.621 350.19 Q179.862 349.357 178.056 348.917 Q176.274 348.477 174.514 348.477 Q169.885 348.477 167.431 351.602 Q165.001 354.727 164.653 361.047 Q166.019 359.033 168.079 357.968 Q170.139 356.88 172.616 356.88 Q177.825 356.88 180.834 360.051 Q183.866 363.199 183.866 368.639 Q183.866 373.963 180.718 377.181 Q177.57 380.398 172.339 380.398 Q166.343 380.398 163.172 375.815 Q160.001 371.209 160.001 362.482 Q160.001 354.287 163.89 349.426 Q167.778 344.542 174.329 344.542 Q176.089 344.542 177.871 344.889 Q179.676 345.237 181.621 345.931 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M21.7677 1026.81 L39.6235 1026.81 L39.6235 1018.72 Q39.6235 1014.24 37.3 1011.79 Q34.9765 1009.33 30.6797 1009.33 Q26.4147 1009.33 24.0912 1011.79 Q21.7677 1014.24 21.7677 1018.72 L21.7677 1026.81 M16.4842 1033.24 L16.4842 1018.72 Q16.4842 1010.74 20.1126 1006.66 Q23.7092 1002.56 30.6797 1002.56 Q37.7138 1002.56 41.3104 1006.66 Q44.907 1010.74 44.907 1018.72 L44.907 1026.81 L64.0042 1026.81 L64.0042 1033.24 L16.4842 1033.24 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M33.8307 974.673 Q33.2578 975.66 33.0032 976.838 Q32.7167 977.983 32.7167 979.384 Q32.7167 984.349 35.9632 987.023 Q39.1779 989.665 45.2253 989.665 L64.0042 989.665 L64.0042 995.553 L28.3562 995.553 L28.3562 989.665 L33.8944 989.665 Q30.6479 987.818 29.0883 984.858 Q27.4968 981.898 27.4968 977.665 Q27.4968 977.06 27.5923 976.328 Q27.656 975.596 27.8151 974.705 L33.8307 974.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M32.4621 956.149 Q32.4621 960.86 36.1542 963.597 Q39.8145 966.334 46.212 966.334 Q52.6095 966.334 56.3017 963.629 Q59.9619 960.892 59.9619 956.149 Q59.9619 951.47 56.2698 948.733 Q52.5777 945.996 46.212 945.996 Q39.8781 945.996 36.186 948.733 Q32.4621 951.47 32.4621 956.149 M27.4968 956.149 Q27.4968 948.51 32.4621 944.15 Q37.4273 939.789 46.212 939.789 Q54.9649 939.789 59.9619 944.15 Q64.9272 948.51 64.9272 956.149 Q64.9272 963.82 59.9619 968.18 Q54.9649 972.509 46.212 972.509 Q37.4273 972.509 32.4621 968.18 Q27.4968 963.82 27.4968 956.149 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M46.212 904.491 Q39.7508 904.491 36.0905 907.165 Q32.3984 909.807 32.3984 914.454 Q32.3984 919.101 36.0905 921.774 Q39.7508 924.416 46.212 924.416 Q52.6732 924.416 56.3653 921.774 Q60.0256 919.101 60.0256 914.454 Q60.0256 909.807 56.3653 907.165 Q52.6732 904.491 46.212 904.491 M33.7671 924.416 Q30.5842 922.57 29.0564 919.769 Q27.4968 916.936 27.4968 913.021 Q27.4968 906.528 32.6531 902.486 Q37.8093 898.412 46.212 898.412 Q54.6147 898.412 59.771 902.486 Q64.9272 906.528 64.9272 913.021 Q64.9272 916.936 63.3994 919.769 Q61.8398 922.57 58.657 924.416 L64.0042 924.416 L64.0042 930.304 L14.479 930.304 L14.479 924.416 L33.7671 924.416 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M46.0847 872.504 Q46.0847 879.601 47.7079 882.339 Q49.3312 885.076 53.2461 885.076 Q56.3653 885.076 58.2114 883.039 Q60.0256 880.97 60.0256 877.437 Q60.0256 872.567 56.5881 869.639 Q53.1188 866.679 47.3897 866.679 L46.0847 866.679 L46.0847 872.504 M43.6657 860.823 L64.0042 860.823 L64.0042 866.679 L58.5933 866.679 Q61.8398 868.684 63.3994 871.676 Q64.9272 874.668 64.9272 878.997 Q64.9272 884.471 61.8716 887.718 Q58.7843 890.932 53.6281 890.932 Q47.6125 890.932 44.5569 886.922 Q41.5014 882.88 41.5014 874.891 L41.5014 866.679 L40.9285 866.679 Q36.8862 866.679 34.6901 869.353 Q32.4621 871.994 32.4621 876.801 Q32.4621 879.856 33.1941 882.752 Q33.9262 885.649 35.3903 888.322 L29.9795 888.322 Q28.7381 885.108 28.1334 882.084 Q27.4968 879.06 27.4968 876.196 Q27.4968 868.461 31.5072 864.642 Q35.5176 860.823 43.6657 860.823 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M46.212 823.169 Q39.7508 823.169 36.0905 825.843 Q32.3984 828.485 32.3984 833.132 Q32.3984 837.779 36.0905 840.452 Q39.7508 843.094 46.212 843.094 Q52.6732 843.094 56.3653 840.452 Q60.0256 837.779 60.0256 833.132 Q60.0256 828.485 56.3653 825.843 Q52.6732 823.169 46.212 823.169 M33.7671 843.094 Q30.5842 841.248 29.0564 838.447 Q27.4968 835.614 27.4968 831.7 Q27.4968 825.206 32.6531 821.164 Q37.8093 817.09 46.212 817.09 Q54.6147 817.09 59.771 821.164 Q64.9272 825.206 64.9272 831.7 Q64.9272 835.614 63.3994 838.447 Q61.8398 841.248 58.657 843.094 L64.0042 843.094 L64.0042 848.982 L14.479 848.982 L14.479 843.094 L33.7671 843.094 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M28.3562 807.383 L28.3562 801.526 L64.0042 801.526 L64.0042 807.383 L28.3562 807.383 M14.479 807.383 L14.479 801.526 L21.895 801.526 L21.895 807.383 L14.479 807.383 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M14.479 789.272 L14.479 783.416 L64.0042 783.416 L64.0042 789.272 L14.479 789.272 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M28.3562 771.162 L28.3562 765.305 L64.0042 765.305 L64.0042 771.162 L28.3562 771.162 M14.479 771.162 L14.479 765.305 L21.895 765.305 L21.895 771.162 L14.479 771.162 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M18.2347 747.258 L28.3562 747.258 L28.3562 735.195 L32.9077 735.195 L32.9077 747.258 L52.2594 747.258 Q56.6199 747.258 57.8613 746.081 Q59.1026 744.871 59.1026 741.211 L59.1026 735.195 L64.0042 735.195 L64.0042 741.211 Q64.0042 747.99 61.4897 750.569 Q58.9434 753.147 52.2594 753.147 L32.9077 753.147 L32.9077 757.444 L28.3562 757.444 L28.3562 753.147 L18.2347 753.147 L18.2347 747.258 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M67.3143 712.661 Q73.68 715.143 75.6216 717.499 Q77.5631 719.854 77.5631 723.801 L77.5631 728.48 L72.6615 728.48 L72.6615 725.042 Q72.6615 722.623 71.5157 721.286 Q70.3699 719.95 66.1048 718.326 L63.4312 717.276 L28.3562 731.694 L28.3562 725.488 L56.238 714.348 L28.3562 703.208 L28.3562 697.001 L67.3143 712.661 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M16.4842 667.942 L16.4842 658.361 L48.8219 646.235 L16.4842 634.044 L16.4842 624.464 L64.0042 624.464 L64.0042 630.734 L22.277 630.734 L54.8694 642.988 L54.8694 649.449 L22.277 661.703 L64.0042 661.703 L64.0042 667.942 L16.4842 667.942 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M46.0847 595.755 Q46.0847 602.852 47.7079 605.59 Q49.3312 608.327 53.2461 608.327 Q56.3653 608.327 58.2114 606.29 Q60.0256 604.221 60.0256 600.688 Q60.0256 595.818 56.5881 592.89 Q53.1188 589.93 47.3897 589.93 L46.0847 589.93 L46.0847 595.755 M43.6657 584.074 L64.0042 584.074 L64.0042 589.93 L58.5933 589.93 Q61.8398 591.935 63.3994 594.927 Q64.9272 597.919 64.9272 602.248 Q64.9272 607.722 61.8716 610.969 Q58.7843 614.183 53.6281 614.183 Q47.6125 614.183 44.5569 610.173 Q41.5014 606.131 41.5014 598.142 L41.5014 589.93 L40.9285 589.93 Q36.8862 589.93 34.6901 592.604 Q32.4621 595.245 32.4621 600.051 Q32.4621 603.107 33.1941 606.003 Q33.9262 608.9 35.3903 611.573 L29.9795 611.573 Q28.7381 608.359 28.1334 605.335 Q27.4968 602.311 27.4968 599.447 Q27.4968 591.712 31.5072 587.893 Q35.5176 584.074 43.6657 584.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M29.4065 549.285 L34.9447 549.285 Q33.6716 551.768 33.035 554.441 Q32.3984 557.115 32.3984 559.979 Q32.3984 564.34 33.7352 566.536 Q35.072 568.7 37.7456 568.7 Q39.7826 568.7 40.9603 567.141 Q42.1061 565.581 43.1565 560.871 L43.6021 558.865 Q44.9389 552.627 47.3897 550.017 Q49.8086 547.375 54.1691 547.375 Q59.1344 547.375 62.0308 551.322 Q64.9272 555.237 64.9272 562.112 Q64.9272 564.976 64.3543 568.096 Q63.8132 571.183 62.6992 574.62 L56.6518 574.62 Q58.3387 571.374 59.198 568.223 Q60.0256 565.072 60.0256 561.985 Q60.0256 557.847 58.6251 555.619 Q57.1929 553.391 54.6147 553.391 Q52.2276 553.391 50.9545 555.014 Q49.6813 556.606 48.5037 562.048 L48.0262 564.085 Q46.8804 569.528 44.5251 571.947 Q42.138 574.366 38.0002 574.366 Q32.9713 574.366 30.2341 570.801 Q27.4968 567.236 27.4968 560.68 Q27.4968 557.433 27.9743 554.568 Q28.4517 551.704 29.4065 549.285 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M29.4065 515.324 L34.9447 515.324 Q33.6716 517.807 33.035 520.48 Q32.3984 523.154 32.3984 526.018 Q32.3984 530.379 33.7352 532.575 Q35.072 534.739 37.7456 534.739 Q39.7826 534.739 40.9603 533.18 Q42.1061 531.62 43.1565 526.909 L43.6021 524.904 Q44.9389 518.666 47.3897 516.056 Q49.8086 513.414 54.1691 513.414 Q59.1344 513.414 62.0308 517.361 Q64.9272 521.276 64.9272 528.151 Q64.9272 531.015 64.3543 534.135 Q63.8132 537.222 62.6992 540.659 L56.6518 540.659 Q58.3387 537.413 59.198 534.262 Q60.0256 531.111 60.0256 528.023 Q60.0256 523.886 58.6251 521.658 Q57.1929 519.43 54.6147 519.43 Q52.2276 519.43 50.9545 521.053 Q49.6813 522.644 48.5037 528.087 L48.0262 530.124 Q46.8804 535.567 44.5251 537.986 Q42.138 540.405 38.0002 540.405 Q32.9713 540.405 30.2341 536.84 Q27.4968 533.275 27.4968 526.719 Q27.4968 523.472 27.9743 520.607 Q28.4517 517.743 29.4065 515.324 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M579.955 12.096 L590.973 12.096 L617.79 62.6918 L617.79 12.096 L625.73 12.096 L625.73 72.576 L614.712 72.576 L587.895 21.9802 L587.895 72.576 L579.955 72.576 L579.955 12.096 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M640.921 54.671 L640.921 27.2059 L648.375 27.2059 L648.375 54.3874 Q648.375 60.8284 650.886 64.0691 Q653.398 67.2693 658.421 67.2693 Q664.457 67.2693 667.941 63.421 Q671.465 59.5726 671.465 52.9291 L671.465 27.2059 L678.919 27.2059 L678.919 72.576 L671.465 72.576 L671.465 65.6084 Q668.751 69.7404 665.145 71.7658 Q661.581 73.7508 656.841 73.7508 Q649.023 73.7508 644.972 68.8897 Q640.921 64.0286 640.921 54.671 M659.677 26.1121 L659.677 26.1121 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M729.595 35.9153 Q732.39 30.8922 736.279 28.5022 Q740.168 26.1121 745.434 26.1121 Q752.523 26.1121 756.372 31.0947 Q760.22 36.0368 760.22 45.1919 L760.22 72.576 L752.726 72.576 L752.726 45.4349 Q752.726 38.913 750.417 35.7533 Q748.108 32.5936 743.368 32.5936 Q737.576 32.5936 734.213 36.4419 Q730.851 40.2903 730.851 46.9338 L730.851 72.576 L723.357 72.576 L723.357 45.4349 Q723.357 38.8725 721.048 35.7533 Q718.739 32.5936 713.918 32.5936 Q708.207 32.5936 704.844 36.4824 Q701.482 40.3308 701.482 46.9338 L701.482 72.576 L693.988 72.576 L693.988 27.2059 L701.482 27.2059 L701.482 34.2544 Q704.034 30.082 707.599 28.0971 Q711.164 26.1121 716.065 26.1121 Q721.007 26.1121 724.451 28.6237 Q727.934 31.1352 729.595 35.9153 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M807.656 49.9314 Q807.656 41.7081 804.253 37.0496 Q800.891 32.3505 794.977 32.3505 Q789.063 32.3505 785.66 37.0496 Q782.298 41.7081 782.298 49.9314 Q782.298 58.1548 785.66 62.8538 Q789.063 67.5124 794.977 67.5124 Q800.891 67.5124 804.253 62.8538 Q807.656 58.1548 807.656 49.9314 M782.298 34.0924 Q784.647 30.0415 788.212 28.0971 Q791.817 26.1121 796.8 26.1121 Q805.064 26.1121 810.208 32.6746 Q815.393 39.2371 815.393 49.9314 Q815.393 60.6258 810.208 67.1883 Q805.064 73.7508 796.8 73.7508 Q791.817 73.7508 788.212 71.8063 Q784.647 69.8214 782.298 65.7705 L782.298 72.576 L774.803 72.576 L774.803 9.54393 L782.298 9.54393 L782.298 34.0924 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M866.556 48.0275 L866.556 51.6733 L832.286 51.6733 Q832.772 59.3701 836.904 63.421 Q841.076 67.4314 848.489 67.4314 Q852.783 67.4314 856.794 66.3781 Q860.845 65.3249 864.815 63.2184 L864.815 70.267 Q860.804 71.9684 856.591 72.8596 Q852.378 73.7508 848.044 73.7508 Q837.187 73.7508 830.827 67.4314 Q824.508 61.1119 824.508 50.3365 Q824.508 39.1965 830.503 32.6746 Q836.539 26.1121 846.747 26.1121 Q855.903 26.1121 861.209 32.0264 Q866.556 37.9003 866.556 48.0275 M859.103 45.84 Q859.022 39.7232 855.659 36.0774 Q852.338 32.4315 846.828 32.4315 Q840.59 32.4315 836.823 35.9558 Q833.096 39.4801 832.529 45.8805 L859.103 45.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M905.08 34.1734 Q903.825 33.4443 902.326 33.1202 Q900.868 32.7556 899.085 32.7556 Q892.766 32.7556 889.363 36.8875 Q886.001 40.9789 886.001 48.6757 L886.001 72.576 L878.507 72.576 L878.507 27.2059 L886.001 27.2059 L886.001 34.2544 Q888.35 30.1225 892.118 28.1376 Q895.885 26.1121 901.273 26.1121 Q902.042 26.1121 902.974 26.2337 Q903.906 26.3147 905.04 26.5172 L905.08 34.1734 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M947.777 43.6931 L947.777 65.8515 L960.902 65.8515 Q967.505 65.8515 970.665 63.1374 Q973.865 60.3828 973.865 54.752 Q973.865 49.0808 970.665 46.4072 Q967.505 43.6931 960.902 43.6931 L947.777 43.6931 M947.777 18.8205 L947.777 37.0496 L959.889 37.0496 Q965.885 37.0496 968.801 34.8216 Q971.758 32.5531 971.758 27.935 Q971.758 23.3575 968.801 21.089 Q965.885 18.8205 959.889 18.8205 L947.777 18.8205 M939.594 12.096 L960.497 12.096 Q969.854 12.096 974.918 15.9849 Q979.982 19.8737 979.982 27.0438 Q979.982 32.5936 977.389 35.8748 Q974.797 39.156 969.773 39.9662 Q975.809 41.2625 979.131 45.3944 Q982.493 49.4858 982.493 55.6432 Q982.493 63.745 976.984 68.1605 Q971.475 72.576 961.307 72.576 L939.594 72.576 L939.594 12.096 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1022.48 34.1734 Q1021.22 33.4443 1019.72 33.1202 Q1018.26 32.7556 1016.48 32.7556 Q1010.16 32.7556 1006.76 36.8875 Q1003.4 40.9789 1003.4 48.6757 L1003.4 72.576 L995.902 72.576 L995.902 27.2059 L1003.4 27.2059 L1003.4 34.2544 Q1005.75 30.1225 1009.51 28.1376 Q1013.28 26.1121 1018.67 26.1121 Q1019.44 26.1121 1020.37 26.2337 Q1021.3 26.3147 1022.44 26.5172 L1022.48 34.1734 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1046.05 32.4315 Q1040.06 32.4315 1036.57 37.1306 Q1033.09 41.7891 1033.09 49.9314 Q1033.09 58.0738 1036.53 62.7728 Q1040.02 67.4314 1046.05 67.4314 Q1052.01 67.4314 1055.49 62.7323 Q1058.97 58.0333 1058.97 49.9314 Q1058.97 41.8701 1055.49 37.1711 Q1052.01 32.4315 1046.05 32.4315 M1046.05 26.1121 Q1055.77 26.1121 1061.32 32.4315 Q1066.87 38.7509 1066.87 49.9314 Q1066.87 61.0714 1061.32 67.4314 Q1055.77 73.7508 1046.05 73.7508 Q1036.29 73.7508 1030.74 67.4314 Q1025.23 61.0714 1025.23 49.9314 Q1025.23 38.7509 1030.74 32.4315 Q1036.29 26.1121 1046.05 26.1121 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1078.95 9.54393 L1086.44 9.54393 L1086.44 46.7717 L1108.68 27.2059 L1118.2 27.2059 L1094.14 48.4326 L1119.21 72.576 L1109.49 72.576 L1086.44 50.4176 L1086.44 72.576 L1078.95 72.576 L1078.95 9.54393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1163.12 48.0275 L1163.12 51.6733 L1128.85 51.6733 Q1129.34 59.3701 1133.47 63.421 Q1137.64 67.4314 1145.06 67.4314 Q1149.35 67.4314 1153.36 66.3781 Q1157.41 65.3249 1161.38 63.2184 L1161.38 70.267 Q1157.37 71.9684 1153.16 72.8596 Q1148.94 73.7508 1144.61 73.7508 Q1133.75 73.7508 1127.39 67.4314 Q1121.07 61.1119 1121.07 50.3365 Q1121.07 39.1965 1127.07 32.6746 Q1133.11 26.1121 1143.31 26.1121 Q1152.47 26.1121 1157.78 32.0264 Q1163.12 37.9003 1163.12 48.0275 M1155.67 45.84 Q1155.59 39.7232 1152.23 36.0774 Q1148.9 32.4315 1143.4 32.4315 Q1137.16 32.4315 1133.39 35.9558 Q1129.66 39.4801 1129.1 45.8805 L1155.67 45.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1213.07 45.1919 L1213.07 72.576 L1205.62 72.576 L1205.62 45.4349 Q1205.62 38.994 1203.11 35.7938 Q1200.59 32.5936 1195.57 32.5936 Q1189.53 32.5936 1186.05 36.4419 Q1182.57 40.2903 1182.57 46.9338 L1182.57 72.576 L1175.07 72.576 L1175.07 27.2059 L1182.57 27.2059 L1182.57 34.2544 Q1185.24 30.163 1188.85 28.1376 Q1192.49 26.1121 1197.23 26.1121 Q1205.05 26.1121 1209.06 30.9732 Q1213.07 35.7938 1213.07 45.1919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1274.93 49.7694 Q1265.89 49.7694 1262.41 51.8354 Q1258.93 53.9013 1258.93 58.8839 Q1258.93 62.8538 1261.52 65.2034 Q1264.15 67.5124 1268.65 67.5124 Q1274.85 67.5124 1278.57 63.1374 Q1282.34 58.7219 1282.34 51.4303 L1282.34 49.7694 L1274.93 49.7694 M1289.79 46.6907 L1289.79 72.576 L1282.34 72.576 L1282.34 65.6895 Q1279.79 69.8214 1275.98 71.8063 Q1272.17 73.7508 1266.66 73.7508 Q1259.7 73.7508 1255.56 69.8619 Q1251.47 65.9325 1251.47 59.3701 Q1251.47 51.7138 1256.58 47.825 Q1261.72 43.9361 1271.89 43.9361 L1282.34 43.9361 L1282.34 43.2069 Q1282.34 38.0623 1278.94 35.2672 Q1275.58 32.4315 1269.46 32.4315 Q1265.57 32.4315 1261.88 33.3632 Q1258.2 34.295 1254.8 36.1584 L1254.8 29.2718 Q1258.89 27.692 1262.73 26.9223 Q1266.58 26.1121 1270.23 26.1121 Q1280.07 26.1121 1284.93 31.2163 Q1289.79 36.3204 1289.79 46.6907 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1334.07 28.5427 L1334.07 35.5912 Q1330.91 33.9709 1327.51 33.1607 Q1324.11 32.3505 1320.46 32.3505 Q1314.91 32.3505 1312.12 34.0519 Q1309.36 35.7533 1309.36 39.156 Q1309.36 41.7486 1311.35 43.2475 Q1313.33 44.7058 1319.33 46.0426 L1321.88 46.6097 Q1329.82 48.3111 1333.14 51.4303 Q1336.5 54.509 1336.5 60.0587 Q1336.5 66.3781 1331.48 70.0644 Q1326.5 73.7508 1317.75 73.7508 Q1314.1 73.7508 1310.13 73.0216 Q1306.2 72.3329 1301.83 70.9151 L1301.83 63.2184 Q1305.96 65.3654 1309.97 66.4591 Q1313.98 67.5124 1317.91 67.5124 Q1323.17 67.5124 1326.01 65.73 Q1328.85 63.9071 1328.85 60.6258 Q1328.85 57.5877 1326.78 55.9673 Q1324.75 54.3469 1317.83 52.8481 L1315.23 52.2405 Q1308.31 50.7821 1305.23 47.7845 Q1302.15 44.7463 1302.15 39.4801 Q1302.15 33.0797 1306.69 29.5959 Q1311.22 26.1121 1319.57 26.1121 Q1323.7 26.1121 1327.35 26.7198 Q1330.99 27.3274 1334.07 28.5427 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1420.36 16.7545 L1420.36 25.383 Q1416.22 21.5346 1411.52 19.6307 Q1406.87 17.7268 1401.6 17.7268 Q1391.23 17.7268 1385.72 24.0867 Q1380.21 30.4061 1380.21 42.3968 Q1380.21 54.3469 1385.72 60.7069 Q1391.23 67.0263 1401.6 67.0263 Q1406.87 67.0263 1411.52 65.1223 Q1416.22 63.2184 1420.36 59.3701 L1420.36 67.9175 Q1416.06 70.8341 1411.24 72.2924 Q1406.46 73.7508 1401.11 73.7508 Q1387.38 73.7508 1379.48 65.3654 Q1371.58 56.9395 1371.58 42.3968 Q1371.58 27.8135 1379.48 19.4281 Q1387.38 11.0023 1401.11 11.0023 Q1406.54 11.0023 1411.32 12.4606 Q1416.14 13.8784 1420.36 16.7545 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1458.96 34.1734 Q1457.7 33.4443 1456.21 33.1202 Q1454.75 32.7556 1452.97 32.7556 Q1446.65 32.7556 1443.24 36.8875 Q1439.88 40.9789 1439.88 48.6757 L1439.88 72.576 L1432.39 72.576 L1432.39 27.2059 L1439.88 27.2059 L1439.88 34.2544 Q1442.23 30.1225 1446 28.1376 Q1449.77 26.1121 1455.15 26.1121 Q1455.92 26.1121 1456.85 26.2337 Q1457.79 26.3147 1458.92 26.5172 L1458.96 34.1734 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1503.76 48.0275 L1503.76 51.6733 L1469.49 51.6733 Q1469.98 59.3701 1474.11 63.421 Q1478.28 67.4314 1485.7 67.4314 Q1489.99 67.4314 1494 66.3781 Q1498.05 65.3249 1502.02 63.2184 L1502.02 70.267 Q1498.01 71.9684 1493.8 72.8596 Q1489.59 73.7508 1485.25 73.7508 Q1474.39 73.7508 1468.03 67.4314 Q1461.72 61.1119 1461.72 50.3365 Q1461.72 39.1965 1467.71 32.6746 Q1473.75 26.1121 1483.95 26.1121 Q1493.11 26.1121 1498.42 32.0264 Q1503.76 37.9003 1503.76 48.0275 M1496.31 45.84 Q1496.23 39.7232 1492.87 36.0774 Q1489.54 32.4315 1484.04 32.4315 Q1477.8 32.4315 1474.03 35.9558 Q1470.3 39.4801 1469.74 45.8805 L1496.31 45.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1511.66 27.2059 L1519.12 27.2059 L1528.43 62.6108 L1537.71 27.2059 L1546.5 27.2059 L1555.82 62.6108 L1565.09 27.2059 L1572.55 27.2059 L1560.68 72.576 L1551.89 72.576 L1542.13 35.3887 L1532.32 72.576 L1523.53 72.576 L1511.66 27.2059 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1610.55 12.096 L1618.73 12.096 L1618.73 72.576 L1610.55 72.576 L1610.55 12.096 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1672.4 45.1919 L1672.4 72.576 L1664.95 72.576 L1664.95 45.4349 Q1664.95 38.994 1662.44 35.7938 Q1659.93 32.5936 1654.9 32.5936 Q1648.87 32.5936 1645.38 36.4419 Q1641.9 40.2903 1641.9 46.9338 L1641.9 72.576 L1634.41 72.576 L1634.41 27.2059 L1641.9 27.2059 L1641.9 34.2544 Q1644.57 30.163 1648.18 28.1376 Q1651.82 26.1121 1656.56 26.1121 Q1664.38 26.1121 1668.39 30.9732 Q1672.4 35.7938 1672.4 45.1919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1719.92 28.9478 L1719.92 35.9153 Q1716.76 34.1734 1713.56 33.3227 Q1710.4 32.4315 1707.16 32.4315 Q1699.91 32.4315 1695.9 37.0496 Q1691.89 41.6271 1691.89 49.9314 Q1691.89 58.2358 1695.9 62.8538 Q1699.91 67.4314 1707.16 67.4314 Q1710.4 67.4314 1713.56 66.5807 Q1716.76 65.6895 1719.92 63.9476 L1719.92 70.8341 Q1716.8 72.2924 1713.44 73.0216 Q1710.12 73.7508 1706.35 73.7508 Q1696.1 73.7508 1690.06 67.3098 Q1684.03 60.8689 1684.03 49.9314 Q1684.03 38.832 1690.11 32.472 Q1696.22 26.1121 1706.84 26.1121 Q1710.28 26.1121 1713.56 26.8413 Q1716.84 27.5299 1719.92 28.9478 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1759.17 34.1734 Q1757.92 33.4443 1756.42 33.1202 Q1754.96 32.7556 1753.18 32.7556 Q1746.86 32.7556 1743.46 36.8875 Q1740.09 40.9789 1740.09 48.6757 L1740.09 72.576 L1732.6 72.576 L1732.6 27.2059 L1740.09 27.2059 L1740.09 34.2544 Q1742.44 30.1225 1746.21 28.1376 Q1749.98 26.1121 1755.37 26.1121 Q1756.13 26.1121 1757.07 26.2337 Q1758 26.3147 1759.13 26.5172 L1759.17 34.1734 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1803.98 48.0275 L1803.98 51.6733 L1769.71 51.6733 Q1770.19 59.3701 1774.32 63.421 Q1778.5 67.4314 1785.91 67.4314 Q1790.2 67.4314 1794.21 66.3781 Q1798.26 65.3249 1802.23 63.2184 L1802.23 70.267 Q1798.22 71.9684 1794.01 72.8596 Q1789.8 73.7508 1785.46 73.7508 Q1774.61 73.7508 1768.25 67.4314 Q1761.93 61.1119 1761.93 50.3365 Q1761.93 39.1965 1767.92 32.6746 Q1773.96 26.1121 1784.17 26.1121 Q1793.32 26.1121 1798.63 32.0264 Q1803.98 37.9003 1803.98 48.0275 M1796.52 45.84 Q1796.44 39.7232 1793.08 36.0774 Q1789.76 32.4315 1784.25 32.4315 Q1778.01 32.4315 1774.24 35.9558 Q1770.52 39.4801 1769.95 45.8805 L1796.52 45.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1836.83 49.7694 Q1827.8 49.7694 1824.31 51.8354 Q1820.83 53.9013 1820.83 58.8839 Q1820.83 62.8538 1823.42 65.2034 Q1826.05 67.5124 1830.55 67.5124 Q1836.75 67.5124 1840.47 63.1374 Q1844.24 58.7219 1844.24 51.4303 L1844.24 49.7694 L1836.83 49.7694 M1851.7 46.6907 L1851.7 72.576 L1844.24 72.576 L1844.24 65.6895 Q1841.69 69.8214 1837.88 71.8063 Q1834.07 73.7508 1828.57 73.7508 Q1821.6 73.7508 1817.47 69.8619 Q1813.37 65.9325 1813.37 59.3701 Q1813.37 51.7138 1818.48 47.825 Q1823.62 43.9361 1833.79 43.9361 L1844.24 43.9361 L1844.24 43.2069 Q1844.24 38.0623 1840.84 35.2672 Q1837.48 32.4315 1831.36 32.4315 Q1827.47 32.4315 1823.79 33.3632 Q1820.1 34.295 1816.7 36.1584 L1816.7 29.2718 Q1820.79 27.692 1824.64 26.9223 Q1828.48 26.1121 1832.13 26.1121 Q1841.97 26.1121 1846.83 31.2163 Q1851.7 36.3204 1851.7 46.6907 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1895.97 28.5427 L1895.97 35.5912 Q1892.81 33.9709 1889.41 33.1607 Q1886.01 32.3505 1882.36 32.3505 Q1876.81 32.3505 1874.02 34.0519 Q1871.26 35.7533 1871.26 39.156 Q1871.26 41.7486 1873.25 43.2475 Q1875.23 44.7058 1881.23 46.0426 L1883.78 46.6097 Q1891.72 48.3111 1895.04 51.4303 Q1898.4 54.509 1898.4 60.0587 Q1898.4 66.3781 1893.38 70.0644 Q1888.4 73.7508 1879.65 73.7508 Q1876 73.7508 1872.03 73.0216 Q1868.1 72.3329 1863.73 70.9151 L1863.73 63.2184 Q1867.86 65.3654 1871.87 66.4591 Q1875.88 67.5124 1879.81 67.5124 Q1885.08 67.5124 1887.91 65.73 Q1890.75 63.9071 1890.75 60.6258 Q1890.75 57.5877 1888.68 55.9673 Q1886.66 54.3469 1879.73 52.8481 L1877.14 52.2405 Q1870.21 50.7821 1867.13 47.7845 Q1864.05 44.7463 1864.05 39.4801 Q1864.05 33.0797 1868.59 29.5959 Q1873.13 26.1121 1881.47 26.1121 Q1885.6 26.1121 1889.25 26.7198 Q1892.89 27.3274 1895.97 28.5427 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1949.08 48.0275 L1949.08 51.6733 L1914.81 51.6733 Q1915.29 59.3701 1919.43 63.421 Q1923.6 67.4314 1931.01 67.4314 Q1935.31 67.4314 1939.32 66.3781 Q1943.37 65.3249 1947.34 63.2184 L1947.34 70.267 Q1943.33 71.9684 1939.11 72.8596 Q1934.9 73.7508 1930.57 73.7508 Q1919.71 73.7508 1913.35 67.4314 Q1907.03 61.1119 1907.03 50.3365 Q1907.03 39.1965 1913.03 32.6746 Q1919.06 26.1121 1929.27 26.1121 Q1938.43 26.1121 1943.73 32.0264 Q1949.08 37.9003 1949.08 48.0275 M1941.63 45.84 Q1941.54 39.7232 1938.18 36.0774 Q1934.86 32.4315 1929.35 32.4315 Q1923.11 32.4315 1919.35 35.9558 Q1915.62 39.4801 1915.05 45.8805 L1941.63 45.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1990.24 28.5427 L1990.24 35.5912 Q1987.08 33.9709 1983.67 33.1607 Q1980.27 32.3505 1976.63 32.3505 Q1971.08 32.3505 1968.28 34.0519 Q1965.53 35.7533 1965.53 39.156 Q1965.53 41.7486 1967.51 43.2475 Q1969.5 44.7058 1975.49 46.0426 L1978.04 46.6097 Q1985.98 48.3111 1989.31 51.4303 Q1992.67 54.509 1992.67 60.0587 Q1992.67 66.3781 1987.64 70.0644 Q1982.66 73.7508 1973.91 73.7508 Q1970.27 73.7508 1966.3 73.0216 Q1962.37 72.3329 1957.99 70.9151 L1957.99 63.2184 Q1962.12 65.3654 1966.13 66.4591 Q1970.14 67.5124 1974.07 67.5124 Q1979.34 67.5124 1982.18 65.73 Q1985.01 63.9071 1985.01 60.6258 Q1985.01 57.5877 1982.95 55.9673 Q1980.92 54.3469 1973.99 52.8481 L1971.4 52.2405 Q1964.47 50.7821 1961.39 47.7845 Q1958.32 44.7463 1958.32 39.4801 Q1958.32 33.0797 1962.85 29.5959 Q1967.39 26.1121 1975.73 26.1121 Q1979.87 26.1121 1983.51 26.7198 Q1987.16 27.3274 1990.24 28.5427 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><circle clip-path=\"url(#clip112)\" cx=\"280.231\" cy=\"160.256\" r=\"9\" fill=\"#4e79a7\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"435.013\" cy=\"969.539\" r=\"9\" fill=\"#4e79a7\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"589.794\" cy=\"1329.74\" r=\"9\" fill=\"#4e79a7\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"744.576\" cy=\"1380.68\" r=\"9\" fill=\"#4e79a7\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#4e79a7; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"280.231,160.256 435.013,969.539 589.794,1329.74 744.576,1380.68 \"/>\n<circle clip-path=\"url(#clip112)\" cx=\"280.231\" cy=\"1054.78\" r=\"9\" fill=\"#f78b89\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"435.013\" cy=\"852.591\" r=\"9\" fill=\"#f78b89\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"589.794\" cy=\"912.884\" r=\"9\" fill=\"#f78b89\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"744.576\" cy=\"1149.9\" r=\"9\" fill=\"#f78b89\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"899.357\" cy=\"1294.92\" r=\"9\" fill=\"#f78b89\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"1054.14\" cy=\"1355.73\" r=\"9\" fill=\"#f78b89\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"1208.92\" cy=\"1380.16\" r=\"9\" fill=\"#f78b89\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#f78b89; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"280.231,1054.78 435.013,852.591 589.794,912.884 744.576,1149.9 899.357,1294.92 1054.14,1355.73 1208.92,1380.16 \"/>\n<circle clip-path=\"url(#clip112)\" cx=\"280.231\" cy=\"1329.74\" r=\"9\" fill=\"#a1b455\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"435.013\" cy=\"1196.16\" r=\"9\" fill=\"#a1b455\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"589.794\" cy=\"1037.11\" r=\"9\" fill=\"#a1b455\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"744.576\" cy=\"976.816\" r=\"9\" fill=\"#a1b455\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"899.357\" cy=\"1063.62\" r=\"9\" fill=\"#a1b455\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"1054.14\" cy=\"1175.89\" r=\"9\" fill=\"#a1b455\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"1208.92\" cy=\"1286.6\" r=\"9\" fill=\"#a1b455\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"1363.7\" cy=\"1345.85\" r=\"9\" fill=\"#a1b455\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"1518.48\" cy=\"1367.68\" r=\"9\" fill=\"#a1b455\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"1673.26\" cy=\"1382.76\" r=\"9\" fill=\"#a1b455\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"1828.05\" cy=\"1386.4\" r=\"9\" fill=\"#a1b455\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#a1b455; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"280.231,1329.74 435.013,1196.16 589.794,1037.11 744.576,976.816 899.357,1063.62 1054.14,1175.89 1208.92,1286.6 1363.7,1345.85 1518.48,1367.68 1673.26,1382.76 1828.05,1386.4 \"/>\n<circle clip-path=\"url(#clip112)\" cx=\"280.231\" cy=\"1373.92\" r=\"9\" fill=\"#dc85a4\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"435.013\" cy=\"1317.27\" r=\"9\" fill=\"#dc85a4\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"589.794\" cy=\"1235.14\" r=\"9\" fill=\"#dc85a4\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"744.576\" cy=\"1128.07\" r=\"9\" fill=\"#dc85a4\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"899.357\" cy=\"1052.18\" r=\"9\" fill=\"#dc85a4\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"1054.14\" cy=\"1054.78\" r=\"9\" fill=\"#dc85a4\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"1208.92\" cy=\"1137.43\" r=\"9\" fill=\"#dc85a4\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"1363.7\" cy=\"1229.42\" r=\"9\" fill=\"#dc85a4\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"1518.48\" cy=\"1307.39\" r=\"9\" fill=\"#dc85a4\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"1673.26\" cy=\"1345.85\" r=\"9\" fill=\"#dc85a4\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"1828.05\" cy=\"1372.88\" r=\"9\" fill=\"#dc85a4\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"1982.83\" cy=\"1382.24\" r=\"9\" fill=\"#dc85a4\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"2137.61\" cy=\"1386.4\" r=\"9\" fill=\"#dc85a4\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"2292.39\" cy=\"1386.4\" r=\"9\" fill=\"#dc85a4\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#dc85a4; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"280.231,1373.92 435.013,1317.27 589.794,1235.14 744.576,1128.07 899.357,1052.18 1054.14,1054.78 1208.92,1137.43 1363.7,1229.42 1518.48,1307.39 1673.26,1345.85 1828.05,1372.88 1982.83,1382.24 2137.61,1386.4 2292.39,1386.4 \"/>\n<circle clip-path=\"url(#clip112)\" cx=\"280.231\" cy=\"1381.2\" r=\"9\" fill=\"#bab0ac\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"435.013\" cy=\"1345.85\" r=\"9\" fill=\"#bab0ac\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"589.794\" cy=\"1258.01\" r=\"9\" fill=\"#bab0ac\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"744.576\" cy=\"1141.58\" r=\"9\" fill=\"#bab0ac\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"899.357\" cy=\"1046.47\" r=\"9\" fill=\"#bab0ac\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"1054.14\" cy=\"1029.31\" r=\"9\" fill=\"#bab0ac\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"1208.92\" cy=\"1118.71\" r=\"9\" fill=\"#bab0ac\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"1363.7\" cy=\"1208.11\" r=\"9\" fill=\"#bab0ac\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"1518.48\" cy=\"1294.4\" r=\"9\" fill=\"#bab0ac\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"1673.26\" cy=\"1358.33\" r=\"9\" fill=\"#bab0ac\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"1828.05\" cy=\"1371.32\" r=\"9\" fill=\"#bab0ac\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"1982.83\" cy=\"1382.76\" r=\"9\" fill=\"#bab0ac\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip112)\" cx=\"2137.61\" cy=\"1386.4\" r=\"9\" fill=\"#bab0ac\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#bab0ac; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"280.231,1381.2 435.013,1345.85 589.794,1258.01 744.576,1141.58 899.357,1046.47 1054.14,1029.31 1208.92,1118.71 1363.7,1208.11 1518.48,1294.4 1673.26,1358.33 1828.05,1371.32 1982.83,1382.76 2137.61,1386.4 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M1756.67 665.756 L2281.66 665.756 L2281.66 166.796 L1756.67 166.796  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1756.67,665.756 2281.66,665.756 2281.66,166.796 1756.67,166.796 1756.67,665.756 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M1913.49 217.976 L1913.49 224.755 Q1910.24 221.732 1906.55 220.236 Q1902.89 218.74 1898.75 218.74 Q1890.6 218.74 1886.28 223.737 Q1881.95 228.702 1881.95 238.123 Q1881.95 247.513 1886.28 252.51 Q1890.6 257.475 1898.75 257.475 Q1902.89 257.475 1906.55 255.979 Q1910.24 254.483 1913.49 251.46 L1913.49 258.175 Q1910.12 260.467 1906.33 261.613 Q1902.57 262.759 1898.37 262.759 Q1887.58 262.759 1881.37 256.17 Q1875.17 249.55 1875.17 238.123 Q1875.17 226.665 1881.37 220.077 Q1887.58 213.456 1898.37 213.456 Q1902.64 213.456 1906.39 214.602 Q1910.18 215.716 1913.49 217.976 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1943.82 231.662 Q1942.84 231.089 1941.66 230.835 Q1940.51 230.548 1939.11 230.548 Q1934.15 230.548 1931.47 233.795 Q1928.83 237.009 1928.83 243.057 L1928.83 261.836 L1922.94 261.836 L1922.94 226.188 L1928.83 226.188 L1928.83 231.726 Q1930.68 228.479 1933.64 226.92 Q1936.6 225.328 1940.83 225.328 Q1941.43 225.328 1942.17 225.424 Q1942.9 225.488 1943.79 225.647 L1943.82 231.662 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1979.02 242.548 L1979.02 245.412 L1952.1 245.412 Q1952.48 251.46 1955.73 254.642 Q1959 257.793 1964.83 257.793 Q1968.2 257.793 1971.35 256.966 Q1974.54 256.138 1977.66 254.483 L1977.66 260.021 Q1974.5 261.358 1971.19 262.059 Q1967.88 262.759 1964.48 262.759 Q1955.95 262.759 1950.95 257.793 Q1945.99 252.828 1945.99 244.362 Q1945.99 235.609 1950.7 230.485 Q1955.44 225.328 1963.46 225.328 Q1970.65 225.328 1974.82 229.975 Q1979.02 234.59 1979.02 242.548 M1973.17 240.829 Q1973.1 236.023 1970.46 233.158 Q1967.85 230.294 1963.52 230.294 Q1958.62 230.294 1955.66 233.063 Q1952.73 235.832 1952.29 240.861 L1973.17 240.829 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1985.23 226.188 L1991.09 226.188 L1998.41 254.006 L2005.7 226.188 L2012.6 226.188 L2019.92 254.006 L2027.21 226.188 L2033.07 226.188 L2023.74 261.836 L2016.84 261.836 L2009.17 232.617 L2001.46 261.836 L1994.56 261.836 L1985.23 226.188 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2091.41 215.875 L2091.41 222.146 Q2087.75 220.395 2084.5 219.536 Q2081.26 218.676 2078.23 218.676 Q2072.98 218.676 2070.12 220.713 Q2067.28 222.75 2067.28 226.506 Q2067.28 229.657 2069.16 231.28 Q2071.07 232.872 2076.36 233.858 L2080.24 234.654 Q2087.43 236.023 2090.84 239.492 Q2094.28 242.93 2094.28 248.722 Q2094.28 255.629 2089.63 259.194 Q2085.01 262.759 2076.07 262.759 Q2072.7 262.759 2068.88 261.995 Q2065.09 261.231 2061.01 259.735 L2061.01 253.115 Q2064.93 255.311 2068.69 256.425 Q2072.44 257.539 2076.07 257.539 Q2081.58 257.539 2084.57 255.375 Q2087.56 253.21 2087.56 249.2 Q2087.56 245.699 2085.4 243.725 Q2083.26 241.752 2078.36 240.765 L2074.45 240.001 Q2067.25 238.569 2064.04 235.514 Q2060.82 232.458 2060.82 227.015 Q2060.82 220.713 2065.25 217.085 Q2069.7 213.456 2077.5 213.456 Q2080.84 213.456 2084.31 214.061 Q2087.78 214.666 2091.41 215.875 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2104.05 226.188 L2109.9 226.188 L2109.9 261.836 L2104.05 261.836 L2104.05 226.188 M2104.05 212.311 L2109.9 212.311 L2109.9 219.727 L2104.05 219.727 L2104.05 212.311 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2119.61 226.188 L2147.43 226.188 L2147.43 231.535 L2125.4 257.157 L2147.43 257.157 L2147.43 261.836 L2118.82 261.836 L2118.82 256.489 L2140.84 230.867 L2119.61 230.867 L2119.61 226.188 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2186.86 242.548 L2186.86 245.412 L2159.94 245.412 Q2160.32 251.46 2163.57 254.642 Q2166.84 257.793 2172.67 257.793 Q2176.04 257.793 2179.19 256.966 Q2182.38 256.138 2185.5 254.483 L2185.5 260.021 Q2182.34 261.358 2179.03 262.059 Q2175.72 262.759 2172.32 262.759 Q2163.79 262.759 2158.79 257.793 Q2153.83 252.828 2153.83 244.362 Q2153.83 235.609 2158.54 230.485 Q2163.28 225.328 2171.3 225.328 Q2178.49 225.328 2182.66 229.975 Q2186.86 234.59 2186.86 242.548 M2181.01 240.829 Q2180.94 236.023 2178.3 233.158 Q2175.69 230.294 2171.36 230.294 Q2166.46 230.294 2163.5 233.063 Q2160.57 235.832 2160.13 240.861 L2181.01 240.829 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip110)\" style=\"stroke:#4e79a7; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1780.37,309.356 1922.57,309.356 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M1946.94 322.701 L1954.57 322.701 L1954.57 296.335 L1946.26 298.002 L1946.26 293.742 L1954.53 292.076 L1959.2 292.076 L1959.2 322.701 L1966.84 322.701 L1966.84 326.636 L1946.94 326.636 L1946.94 322.701 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip110)\" style=\"stroke:#f78b89; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1780.37,380.636 1922.57,380.636 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M1947.72 363.356 L1966.08 363.356 L1966.08 367.291 L1952 367.291 L1952 375.763 Q1953.02 375.416 1954.04 375.254 Q1955.06 375.069 1956.08 375.069 Q1961.87 375.069 1965.25 378.24 Q1968.62 381.411 1968.62 386.828 Q1968.62 392.406 1965.15 395.508 Q1961.68 398.587 1955.36 398.587 Q1953.19 398.587 1950.92 398.217 Q1948.67 397.846 1946.26 397.106 L1946.26 392.406 Q1948.35 393.541 1950.57 394.096 Q1952.79 394.652 1955.27 394.652 Q1959.27 394.652 1961.61 392.545 Q1963.95 390.439 1963.95 386.828 Q1963.95 383.217 1961.61 381.11 Q1959.27 379.004 1955.27 379.004 Q1953.39 379.004 1951.52 379.42 Q1949.67 379.837 1947.72 380.717 L1947.72 363.356 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip110)\" style=\"stroke:#a1b455; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1780.37,451.916 1922.57,451.916 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M1946.94 465.261 L1954.57 465.261 L1954.57 438.895 L1946.26 440.562 L1946.26 436.302 L1954.53 434.636 L1959.2 434.636 L1959.2 465.261 L1966.84 465.261 L1966.84 469.196 L1946.94 469.196 L1946.94 465.261 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1986.29 437.714 Q1982.68 437.714 1980.85 441.279 Q1979.04 444.821 1979.04 451.95 Q1979.04 459.057 1980.85 462.622 Q1982.68 466.163 1986.29 466.163 Q1989.92 466.163 1991.73 462.622 Q1993.56 459.057 1993.56 451.95 Q1993.56 444.821 1991.73 441.279 Q1989.92 437.714 1986.29 437.714 M1986.29 434.011 Q1992.1 434.011 1995.15 438.617 Q1998.23 443.2 1998.23 451.95 Q1998.23 460.677 1995.15 465.284 Q1992.1 469.867 1986.29 469.867 Q1980.48 469.867 1977.4 465.284 Q1974.34 460.677 1974.34 451.95 Q1974.34 443.2 1977.4 438.617 Q1980.48 434.011 1986.29 434.011 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip110)\" style=\"stroke:#dc85a4; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1780.37,523.196 1922.57,523.196 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M1946.94 536.541 L1954.57 536.541 L1954.57 510.175 L1946.26 511.842 L1946.26 507.582 L1954.53 505.916 L1959.2 505.916 L1959.2 536.541 L1966.84 536.541 L1966.84 540.476 L1946.94 540.476 L1946.94 536.541 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1976.33 505.916 L1994.69 505.916 L1994.69 509.851 L1980.62 509.851 L1980.62 518.323 Q1981.63 517.976 1982.65 517.814 Q1983.67 517.629 1984.69 517.629 Q1990.48 517.629 1993.86 520.8 Q1997.24 523.971 1997.24 529.388 Q1997.24 534.966 1993.76 538.068 Q1990.29 541.147 1983.97 541.147 Q1981.8 541.147 1979.53 540.777 Q1977.28 540.406 1974.87 539.666 L1974.87 534.966 Q1976.96 536.101 1979.18 536.656 Q1981.4 537.212 1983.88 537.212 Q1987.88 537.212 1990.22 535.105 Q1992.56 532.999 1992.56 529.388 Q1992.56 525.777 1990.22 523.67 Q1987.88 521.564 1983.88 521.564 Q1982 521.564 1980.13 521.98 Q1978.28 522.397 1976.33 523.277 L1976.33 505.916 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip110)\" style=\"stroke:#bab0ac; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1780.37,594.476 1922.57,594.476 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M1951.89 607.821 L1968.21 607.821 L1968.21 611.756 L1946.26 611.756 L1946.26 607.821 Q1948.93 605.066 1953.51 600.436 Q1958.12 595.784 1959.3 594.441 Q1961.54 591.918 1962.42 590.182 Q1963.32 588.423 1963.32 586.733 Q1963.32 583.978 1961.38 582.242 Q1959.46 580.506 1956.36 580.506 Q1954.16 580.506 1951.7 581.27 Q1949.27 582.034 1946.5 583.585 L1946.5 578.862 Q1949.32 577.728 1951.77 577.149 Q1954.23 576.571 1956.26 576.571 Q1961.63 576.571 1964.83 579.256 Q1968.02 581.941 1968.02 586.432 Q1968.02 588.561 1967.21 590.483 Q1966.43 592.381 1964.32 594.973 Q1963.74 595.645 1960.64 598.862 Q1957.54 602.057 1951.89 607.821 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1988.02 580.274 Q1984.41 580.274 1982.58 583.839 Q1980.78 587.381 1980.78 594.51 Q1980.78 601.617 1982.58 605.182 Q1984.41 608.723 1988.02 608.723 Q1991.66 608.723 1993.46 605.182 Q1995.29 601.617 1995.29 594.51 Q1995.29 587.381 1993.46 583.839 Q1991.66 580.274 1988.02 580.274 M1988.02 576.571 Q1993.83 576.571 1996.89 581.177 Q1999.97 585.76 1999.97 594.51 Q1999.97 603.237 1996.89 607.844 Q1993.83 612.427 1988.02 612.427 Q1982.21 612.427 1979.13 607.844 Q1976.08 603.237 1976.08 594.51 Q1976.08 585.76 1979.13 581.177 Q1982.21 576.571 1988.02 576.571 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"reliability/#References","page":"Reliability","title":"References","text":"","category":"section"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"Limnios, Nikolaos, and Gheorghe Oprisan. Semi-Markov processes and reliability. Springer Science & Business Media, 2012.\nZimmermann, Armin. Stochastic discrete event systems. Springer, Berlin Heidelberg New York, 2007.","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"","category":"page"},{"location":"reliability/","page":"Reliability","title":"Reliability","text":"This page was generated using Literate.jl.","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"CurrentModule = CompetingClocks","category":"page"},{"location":"interface/#Interface","page":"Interface","title":"Interface","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"These are methods which are defined for any samplers subtyping <:SSA, the abstract sampler type.","category":"page"},{"location":"interface/#Use-a-Sampler","page":"Interface","title":"Use a Sampler","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"enable!\ndisable!\nnext\nreset!","category":"page"},{"location":"interface/#CompetingClocks.enable!","page":"Interface","title":"CompetingClocks.enable!","text":"enable!(sampler, clock, distribution, enablingtime, currenttime, RNG)\n\nTell the sampler to start a clock.\n\nsampler::SSA{KeyType,TimeType} - The sampler to tell.\nclock::KeyType - The ID of the clock. Can be a string, integer, tuple, etc.\ndistribution::Distributions.UnivariateDistribution\nenablingtime::TimeType - The zero time for the clock's distribution, in absolute time. Usually equal to when.\nwhen::TimeType - The current time of the simulation.\nrng::AbstractRNG - A random number generator.\n\n\n\n\n\nenable!(dc::DirectCall, clock::T, distribution::Exponential, when, rng)\n\nTell the DirectCall sampler to enable this clock. The clock argument is an identifier for the clock. The distribution is a univariate distribution in time. In Julia, distributions are always relative to time t=0, but ours start at some absolute enabling time, t_e, so we provide that here. The when argument is the time at which this clock is enabled, which may be later than when it was first enabled. The rng is a random number generator.\n\nIf a particular clock had one rate before an event and it has another rate after the event, call enable! to update the rate.\n\n\n\n\n\n","category":"function"},{"location":"interface/#CompetingClocks.disable!","page":"Interface","title":"CompetingClocks.disable!","text":"disable!(sampler, clock, when)\n\nTell the sampler to forget a clock. We include the current simulation time because some Next Reaction methods use this to optimize sampling.\n\n\n\n\n\ndisable!(dc::DirectCall, clock::T, when)\n\nTell the DirectCall sampler to disable this clock. The clock argument is an identifier for the clock. The when argument is the time at which this clock is enabled.\n\n\n\n\n\n","category":"function"},{"location":"interface/#CompetingClocks.next","page":"Interface","title":"CompetingClocks.next","text":"next(sampler, when, rng)\n\nAsk the sampler for what happens next, in the form of (when, which)::Tuple{TimeType,KeyType}. rng is a random number generator.\n\n\n\n\n\nnext(dc::DirectCall, when::TimeType, rng::AbstractRNG)\n\nAsk the sampler what clock will be the next to fire and at what time. This does not change the sampler. You can call this multiple times and get multiple answers. Each answer is a tuple of (when, which clock). If there is no clock to fire, then the response will be (Inf, nothing). That's a good sign the simulation is done.\n\n\n\n\n\nnext(multiple_direct, when, rng)\n\nSelects the next transition to fire and when it fires.\n\nThere are two main algorithms for this selection. This implementation handles the case when there are a lot of clocks or when some clocks have much smaller hazards. It first draws a random number to choose which subset of hazards will be used, and then it asks that subset to draw a random number to choose which particular hazard is used. When there are many hazards, it is possible that a random number generator will never choose a particular value because there is no guarantee that a random number generator covers every combination of bits. Using more draws decreases the likelihood of this problem.\n\n\n\n\n\nFor the first reaction sampler, you can call next() multiple times and get different, valid, answers. That isn't the case here. When you call next() on a CombinedNextReaction sampler, it returns the key associated with the clock that fires and marks that clock as fired. Calling next() again would return a nonsensical value.\n\n\n\n\n\n","category":"function"},{"location":"interface/#CompetingClocks.reset!","page":"Interface","title":"CompetingClocks.reset!","text":"reset!(sampler)\n\nAfter a sampler is used for a simulation run, it has internal state. This function resets that internal state to the initial value in preparation for another sample run.\n\n\n\n\n\nreset!(recorder::CommonRandomRecorder)\n\nThe common random recorder records the state of the random number generator for each clock, but the same clock can be enabled multiple times in one simulation, so it records the generator state for each (clock, index of the enabling of that clock). The reset! function says we are starting a new simulation run, so all clocks haven't been seen.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Query-a-Sampler","page":"Interface","title":"Query a Sampler","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"getindex\nkeys\nkeytype\nlength","category":"page"},{"location":"interface/#Base.getindex","page":"Interface","title":"Base.getindex","text":"getindex(sampler, clock::KeyType)\n\nReturn stored state for a particular clock. If the clock does not exist, a KeyError will be thrown.\n\n\n\n\n\ngetindex(sampler::FirstReaction{K,T}, clock::K)\n\nFor the FirstReaction sampler, returns the distribution object associated to the clock.\n\n\n\n\n\ngetindex(sampler::FirstToFire{K,T}, clock::K)\n\nFor the FirstToFire sampler, returns the stored firing time associated to the clock.\n\n\n\n\n\ngetindex(sampler::DirectCall{K,T}, clock::K)\n\nFor the DirectCall sampler, returns the rate parameter associated to the clock.\n\n\n\n\n\ngetindex(sampler::CombinedNextReaction{K,T}, clock::K)\n\nFor the CombinedNextReaction sampler, returns the stored firing time associated to the clock.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Base.keys","page":"Interface","title":"Base.keys","text":"keys(sampler)\n\nReturn all stored clocks as a vector.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Base.keytype","page":"Interface","title":"Base.keytype","text":"keytype(sampler)\n\nReturn the type of clock keys.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Base.length","page":"Interface","title":"Base.length","text":"length(sampler)::Int64\n\nReturn the number of stored clocks.\n\n\n\n\n\n","category":"function"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"EditURL = \"simple_board.jl\"","category":"page"},{"location":"mainloop/#Sample-Main-Loop","page":"Sample Main Loop","title":"Sample Main Loop","text":"","category":"section"},{"location":"mainloop/#Introduction","page":"Sample Main Loop","title":"Introduction","text":"","category":"section"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"Let's walk through a small simulation so that we can see how CompetingClocks could appear in the main loop. This models individuals wandering around on a checkerboard, where no two individuals can occupy the same space. First, let's import libraries.","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"import Base\nusing Distributions\nusing Random\nusing SparseArrays\nusing Test\nusing CompetingClocks","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"There is a physical state for the model, separate from the state of the bag of clocks and separate from the time. Most of the board is empty, so let's use a spare matrix to represent the locations of individuals.","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"mutable struct PhysicalState\n    board::SparseMatrixCSC{Int64, Int64}\nend\n\n# They can move in any of four directions.\n@enum Direction Up Left Down Right\nconst DirectionDelta = Dict(\n    Up => CartesianIndex(-1, 0),\n    Left => CartesianIndex(0, -1),\n    Down => CartesianIndex(1, 0),\n    Right => CartesianIndex(0, 1),\n    );","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"The simulation, itself, carries the state of the clocks in the sampler, as well as the physical state. We'll call it a finite state machine (FSM) because it has the traits of a Moore machine.","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"mutable struct SimulationFSM{Sampler}\n    physical::PhysicalState\n    sampler::Sampler\n    when::Float64\n    rng::Xoshiro\nend","category":"page"},{"location":"mainloop/#Main-Loop","page":"Sample Main Loop","title":"Main Loop","text":"","category":"section"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"The main loop will ask what event happens next to the state. When that event changes the state, the loop will update the set of possible next events by disabling outdated ones and enabling new ones. The calls to CompetingClocks are:","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"next(sampler, current time, random number generator (RNG))\nenable!(sampler, event ID, distribution, current time, start time of clock, RNG)\ndisable!(sampler, event ID, current time)","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"There are a lot of samplers in CompetingClocks to choose from. This example uses CombinedNextReaction algorithm, which has good performance for a variety of distributions. Samplers in CompetingClocks require two type parameters, a key type for clocks and the type used to represent time. In this case, the clock key type fully represents an event, giving the ID of the individual, where they start, and which direction they may move.","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"const ClockKey = Tuple{Int,CartesianIndex{2},Direction}\n\nfunction run(event_count)\n    Sampler = CombinedNextReaction{ClockKey,Float64}\n    physical = PhysicalState(zeros(Int, 10, 10))\n    @test showable(MIME(\"text/plain\"), physical)\n    sim = SimulationFSM{Sampler}(\n        physical,\n        Sampler(),\n        0.0,\n        Xoshiro(2947223)\n    )\n    initialize!(sim.physical, 9, sim.rng)\n    current_events = allowed_moves(sim.physical)\n    for event_id in current_events\n        enable!(sim.sampler, event_id, Weibull(1.0), 0.0, 0.0, sim.rng)\n    end\n\n    for i in 1:event_count\n        (when, what) = next(sim.sampler, sim.when, sim.rng)\n        if isfinite(when) && !isnothing(what)\n            sim.when = when\n            move!(sim.physical, what)\n            next_events = allowed_moves(sim.physical)\n            for remove_event in setdiff(current_events, next_events)\n                disable!(sim.sampler, remove_event, when)\n            end\n            for add_event in setdiff(next_events, current_events)\n                enable!(sim.sampler, add_event, Weibull(1.0), when, when, sim.rng)\n            end\n            current_events = next_events\n            @show (when, what)\n        end\n    end\nend;","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"For this checkerboard with wandering individuals, the allowed moves are moves by any individual to any free square on the board. The set of allowed moves is precisely the set of enabled clocks, so it stores ClockKeys.","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"function allowed_moves(physical::PhysicalState)\n    allowed = Set{ClockKey}()\n    row, col, value = findnz(physical.board)\n    for ind_idx in eachindex(value)\n        location = CartesianIndex((row[ind_idx], col[ind_idx]))\n        for (direction, offset) in DirectionDelta\n            if checkbounds(Bool, physical.board, location + offset)\n                if physical.board[location + offset] == 0\n                    push!(allowed, (value[ind_idx], location, direction))\n                end\n            end\n        end\n    end\n    return allowed\nend;","category":"page"},{"location":"mainloop/#Changes-to-the-state-of-the-board","page":"Sample Main Loop","title":"Changes to the state of the board","text":"","category":"section"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"We set up the board with an initializer that places individuals at random. We move one individual at a time, when their next event happens.","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"function initialize!(physical::PhysicalState, individuals::Int, rng)\n    physical.board .= 0\n    dropzeros!(physical.board)\n    locations = zeros(CartesianIndex{2}, individuals)\n    for ind_idx in 1:individuals\n        loc = rand(rng, CartesianIndices(physical.board))\n        while physical.board[loc] != 0\n            loc = rand(rng, CartesianIndices(physical.board))\n        end\n        locations[ind_idx] = loc\n        physical.board[loc] = ind_idx\n    end\nend;\n\n\nfunction move!(physical::PhysicalState, event_id)\n    (individual, previous_location, direction) = event_id\n    next_location = previous_location + DirectionDelta[direction]\n    # This sets the previous board value to zero.\n    SparseArrays.dropstored!(physical.board, previous_location.I...)\n    physical.board[next_location] = individual\nend;","category":"page"},{"location":"mainloop/#How-it-runs","page":"Sample Main Loop","title":"How it runs","text":"","category":"section"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"A run of this simulation produces a sequence of moves, no two happening at the same time because this is a continuous-time simulation.","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"run(10)","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"(when, what) = (0.07319364933011555, (7, CartesianIndex(7, 6), Main.var\"##225\".Left))\n(when, what) = (0.10866577949385807, (9, CartesianIndex(1, 3), Main.var\"##225\".Right))\n(when, what) = (0.15079187330778177, (9, CartesianIndex(1, 4), Main.var\"##225\".Left))\n(when, what) = (0.1682581650543986, (9, CartesianIndex(1, 3), Main.var\"##225\".Right))\n(when, what) = (0.16874877793434204, (3, CartesianIndex(1, 8), Main.var\"##225\".Left))\n(when, what) = (0.18888751327810988, (3, CartesianIndex(1, 7), Main.var\"##225\".Left))\n(when, what) = (0.20347320994043128, (4, CartesianIndex(9, 1), Main.var\"##225\".Down))\n(when, what) = (0.2118081725791219, (1, CartesianIndex(7, 10), Main.var\"##225\".Down))\n(when, what) = (0.25491091983943764, (3, CartesianIndex(1, 6), Main.var\"##225\".Left))\n(when, what) = (0.2634608206635203, (8, CartesianIndex(2, 10), Main.var\"##225\".Down))\n","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"This page was generated using Literate.jl.","category":"page"},{"location":"guide/#Competing-Clocks","page":"Competing Clocks","title":"Competing Clocks","text":"","category":"section"},{"location":"guide/","page":"Competing Clocks","title":"Competing Clocks","text":"A discrete event simulation tracks the effects of individual events in time. We classify discrete event simulations by the pace of advances in time. If time advances in steps of the same size, it is a discrete-time simulation. If time advances to the next event, whenever that event might happen, it is continuous-time simulation. This library supports continuous-time discrete-event simulations.","category":"page"},{"location":"guide/","page":"Competing Clocks","title":"Competing Clocks","text":"We write discrete event simulations by defining the state of a system and events that can act on that state. The state of a system can be the count of each chemical species for a chemical reaction system. It can be different numbers of chickens at different weights in different chicken coops for a farming simulation. It can be the age of each widget in an engine for a reliability simulation. These states are called the physical state of the system and vary widely in what they represent.","category":"page"},{"location":"guide/","page":"Competing Clocks","title":"Competing Clocks","text":"An event is an observable change of state at a time. It is a function where the argument is the current state of the system and the return value is the new state of the system. We say an event occurs, happens, or fires when we apply that function to the state. How that state changes is up to the model and how it defines the state, but what about when that state changes?","category":"page"},{"location":"guide/","page":"Competing Clocks","title":"Competing Clocks","text":"Given the current state of the system, there is a set of possible next events which could happen. We call the possible next events enabled. Think of the moment in time just after the simulation has begun or an event has just happened. At this moment, there may be multiple enabled events. Which one is next depends on how often that event happens. If our simulation includes both the radioactive decay of an unstable element and decay of iron, the unstable element will usually decay first. We describe the rates of these events using probability distributions in time. Each event has an associated continuous univariate distribution where the variable is time.","category":"page"},{"location":"guide/","page":"Competing Clocks","title":"Competing Clocks","text":"We can think of all event distributions in a model as a bag of clocks. The next one to ring is the next event to occur. When that event occurs, the state changes. When the state changes, it will enable some events and disable others. Enabled events are added to the bag of clocks. Disabled ones are removed. CompetingClocks is responsible for managing this bag of clocks.","category":"page"},{"location":"guide/#Sets-of-Clocks","page":"Competing Clocks","title":"Sets of Clocks","text":"","category":"section"},{"location":"guide/","page":"Competing Clocks","title":"Competing Clocks","text":"In CompetingClocks, clocks can be either enabled or disabled. The firing of clocks triggers events, which change the state of the system. This in turn changes the set of clocks that are enabled. This is the basic algorithm to sample models that are phrased as continuous-time discrete-event systems.","category":"page"},{"location":"guide/","page":"Competing Clocks","title":"Competing Clocks","text":"It is worth examining what happens at a state update in more detail. Let E^* be the set of clocks (typically, just a single clock) that fires, and whose associated event updates state from S to S^. There are then three basic sets of clocks to consider: E(S), the set of clocks enabled in S, E(S^), the set of clocks enabled in S^, and E^*, the set of clocks that fired.","category":"page"},{"location":"guide/","page":"Competing Clocks","title":"Competing Clocks","text":"Newly enabled clocks are those that are enabled in S^ not part of the set that was enabled in S and remains enabled in S^. Newly disabled clocks are those that were enabled in S but are not enabled in S^. Finally old clocks are those that were enabled in S, and remain so in S^.","category":"page"},{"location":"guide/","page":"Competing Clocks","title":"Competing Clocks","text":"All these sets are visualized in the figure below, reproduced from \"Stochastic petri nets: Modelling, stability, simulation\" by Peter J. Haas (2002).","category":"page"},{"location":"guide/","page":"Competing Clocks","title":"Competing Clocks","text":"(Image: )","category":"page"},{"location":"guide/","page":"Competing Clocks","title":"Competing Clocks","text":"CompetingClocks is responsible for knowing E^*, but it is the main event loop of the simulation using CompetingClocks that decides which clocks to disable and enable.","category":"page"},{"location":"guide/#References","page":"Competing Clocks","title":"References","text":"","category":"section"},{"location":"guide/","page":"Competing Clocks","title":"Competing Clocks","text":"[Haas:2006]\tPJ. Haas, “Stochastic petri nets: Modelling, stability, simulation,” Springer Science & Business Media, 2006.","category":"page"},{"location":"vas/#Vector-Addition-System","page":"Vector Addition System","title":"Vector Addition System","text":"","category":"section"},{"location":"vas/","page":"Vector Addition System","title":"Vector Addition System","text":"One way to understand how to use CompetingClocks is to look at a very simple simulation. A vector addition system (VAS) is a lot like chemical simulations, but it's free of some of the assumptions about chemical rates. The physical state of the system is a vector of integers. Such a simple physical state can make it easier to understand possible complications in how we define events.","category":"page"},{"location":"vas/","page":"Vector Addition System","title":"Vector Addition System","text":"There are variations on how to define a vector addition system. Let's begin with one and introduce variations as they become interesting.","category":"page"},{"location":"vas/","page":"Vector Addition System","title":"Vector Addition System","text":"A vector addition system is","category":"page"},{"location":"vas/","page":"Vector Addition System","title":"Vector Addition System","text":"a physical state p which is a set of d integers, labeled (p_1 p_2cdots p_d).\na system time, t\na finite set of events E where each event has an enabling rule, a distribution, and a firing rule.\na rule for when the event is enabled, where the rule is an invariant on the physical state, such as r_i(p)ge 0. When the invariant is met, the event is enabled. When the invariant is not met, the event is disabled. For a vector addition system, this rule must be expressible as a matrix multiplication, so Mcdot vecp ge 0, where the ge means we are checking elementwise that every element is non-negative.\na distribution in time, where the distribution is determined at enabling time and is a function of the physical state and system time at enabling. The distribution in time can have shocks, such as a delta function, but it may not have a shock at time zero, must have a measure-zero probability of firing at the same moment it is enabled.\na rule for how the event changes physical state when it happens. The domain and co-domain of the rule are physical states of the system. Let's limit this model to require all events to modify the state, so that we exclude events that don't modify the state. As with enabling, this must be expressible as a matrix operation on the physical states to produce a new physical state.\nFrom the rules, we see that an event's state is either disabled or enabled at an enabling time t_e.","category":"page"},{"location":"vas/","page":"Vector Addition System","title":"Vector Addition System","text":"How would we implement this system? It's set up so that enabling rules and firing rules can be done with linear algebra. We can write this in Julia code ","category":"page"},{"location":"vas/","page":"Vector Addition System","title":"Vector Addition System","text":"Simulation using the VAS requires concrete implementation of the interface:","category":"page"},{"location":"vas/","page":"Vector Addition System","title":"Vector Addition System","text":"zero_state(vas::VectorAdditionSystem)\nvas_delta(vas::VectorAdditionSystem, transition_idx)\nvas_initial(vas::VectorAdditionSystem, initial_state)\nfire!(visitor, vas::VectorAdditionSystem, state, modify_state, rng)\nsimstep!(fsm::VectorAdditionFSM, state_update::Function, rng::AbstractRNG)","category":"page"},{"location":"vas/","page":"Vector Addition System","title":"Vector Addition System","text":"The method fire! first modifies state, then, for each clock in the system, it checks whether it has been newly enabled or disabled.","category":"page"},{"location":"vas/","page":"Vector Addition System","title":"Vector Addition System","text":"newly disabled: visitor is called to disable that transition\nnewly enabled: visitor is called to enable that transition and cache its newly calculated intensity\nstill enabled: we check if the new intensity differs from the old and if so use visitor to update the intensity","category":"page"},{"location":"vas/","page":"Vector Addition System","title":"Vector Addition System","text":"The method simstep! first applies fire!, followed by next.","category":"page"},{"location":"reference/","page":"Samplers","title":"Samplers","text":"CurrentModule = CompetingClocks","category":"page"},{"location":"reference/#Samplers","page":"Samplers","title":"Samplers","text":"","category":"section"},{"location":"reference/","page":"Samplers","title":"Samplers","text":"The choice of sampler determines specific algorithms that are used to sample, update, and disable clocks. Helpers also exist that are useful for logging, utilizing common random numbers, and hierarchical sampling.","category":"page"},{"location":"reference/#Sampler-Supertype","page":"Samplers","title":"Sampler Supertype","text":"","category":"section"},{"location":"reference/","page":"Samplers","title":"Samplers","text":"SSA","category":"page"},{"location":"reference/#CompetingClocks.SSA","page":"Samplers","title":"CompetingClocks.SSA","text":"SSA{KeyType,TimeType}\n\nThis abstract type represents a stochastic simulation algorithm (SSA). It is parametrized by the clock ID, or key, and the type used for the time, which is typically a Float64. The type of the key can be anything you would use as a dictionary key. This excludes mutable values but includes a wide range of identifiers useful for simulation. For instance, it could be a String, but it could be a Tuple{Int64,Int64,Int64}, so that it indexes into a complicated simulation state.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Sampler-Types","page":"Samplers","title":"Sampler Types","text":"","category":"section"},{"location":"reference/","page":"Samplers","title":"Samplers","text":"FirstReaction\nFirstToFire\nDirectCall\nCombinedNextReaction","category":"page"},{"location":"reference/#CompetingClocks.FirstReaction","page":"Samplers","title":"CompetingClocks.FirstReaction","text":"FirstReaction{KeyType,TimeType}()\n\nThis is the classic first reaction method for general distributions.  Every time you sample, this goes to each distribution and asks when it would fire. Then it takes the soonest and throws out the rest of the sampled times until the next sample. It can also be very fast when there are only a few clocks to sample.\n\nOne interesting property of this sampler is that you can call next() multiple times in order to get a distribution of next firing clocks and their times to fire.\n\n\n\n\n\n","category":"type"},{"location":"reference/#CompetingClocks.FirstToFire","page":"Samplers","title":"CompetingClocks.FirstToFire","text":"FirstToFire{KeyType,TimeType}()\n\nThis sampler is often the fastest for non-exponential distributions. When a clock is first enabled, this sampler asks the clock when it would fire and saves that time in a sorted heap of future times. Then it works through the heap, one by one. When a clock is disabled, its future firing time is removed from the list. There is no memory of previous firing times.\n\n\n\n\n\n","category":"type"},{"location":"reference/#CompetingClocks.DirectCall","page":"Samplers","title":"CompetingClocks.DirectCall","text":"DirectCall{KeyType,TimeType,TreeType}()\n\nDirectCall is responsible for sampling among Exponential distributions. It samples using the Direct method. In this case, there is no optimization to that Direct method, so we call it DirectCall because it recalculates everything every time you call it.\n\nThe algorithm for the Direct Method relies heavily on what data structure it uses to maintain a list of hazard rates, such that it can know the sum of those hazards and index into them using a random value. This struct has a default constructor that chooses a data structure for you, but there are several options.\n\nExample\n\nIf we know that our simulation will only use a small number of different clock keys, then it would make sense to use a data structure that disables clocks by zeroing them out, instead of removing them from the list. This will greatly reduce memory churn. We can do that by changing the underlying data structure.\n\nprefix_tree = BinaryTreePrefixSearch{T}()\nkeyed_prefix_tree = KeyedKeepPrefixSearch{K,typeof(prefix_tree)}(prefix_tree)\nsampler_noremove = DirectCall{K,T,typeof(keyed_prefix_tree)}(keyed_prefix_tree)\n\n\n\n\n\n","category":"type"},{"location":"reference/#CompetingClocks.CombinedNextReaction","page":"Samplers","title":"CompetingClocks.CombinedNextReaction","text":"CombinedNextReaction{KeyType,TimeType}()\n\nThis combines Next Reaction Method and Modified Next Reaction Method. The Next Reaction Method is from Gibson and Bruck in their 2000 paper called \"Efficient Exact Stochastic Simulation of Chemical Systems with Many Species and Many Channels\".  The Modified Next Reaction Method is from David F. Anderson's 2007 paper,  \"A modified Next Reaction Method for simulating chemical systems with time dependent propensities and delays\".  Both methods reuse draws of random numbers. The former works by accumulating  survival of a distribution in a linear space and the latter works by accumulating  survival of a distribution in a log space.\n\nEach enabled clock specifies a univariate distribution from the Distributions package. Every distribution is more precise being sampled in the manner of the Next Reaction method (linear space) or the manner of the Modified Next Reaction method (log space). This sampler chooses which space to use depending on the type of the UnivariateDistribution and based on performance timings that are done during package testing. Defaults are set for those distributions included in the Distributions.jl package. If you want to add a distribution, then define:\n\nsampling_space(::MyDistribution) = LogSampling\n\nIf you want to override a choice in the library, then create a sub-type of the given distribution, and specify its sampling space.\n\nstruct LinearGamma <: Distributions.Gamma end\nsampling_space(::LinearGamma) = LinearSampling\n\nIf you want to test a distribution, look at tests/nrmetric.jl to see how distributions are timed.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Sampling-Helpers","page":"Samplers","title":"Sampling Helpers","text":"","category":"section"},{"location":"reference/","page":"Samplers","title":"Samplers","text":"CommonRandomRecorder\nfreeze\nmisscount\nmisses\nMultiSampler\nSingleSampler\nChatReaction\nDebugWatcher\nTrackWatcher\nconsume_survival\nsampling_space","category":"page"},{"location":"reference/#CompetingClocks.CommonRandomRecorder","page":"Samplers","title":"CompetingClocks.CommonRandomRecorder","text":"Common random variates, also called common random numbers (CRN), are a technique for reducing variance when repeating runs of simulations with different parameters. The idea is to record the randomness of one simulation and replay the same choices in subsequent runs. This particular implementation does this by saving the state of the random number generator every time it's used by a sampler.\n\nThe Xoshiro sampler has a relatively small state (32 bytes), which is saved every time the sampler uses random numbers. This CRN recorder saves data in memory, but we could save that to a memory-mapped file so that the operating system will optimize transfer of that memory to disk.\n\nWhat happens when replays of simulation runs use more draws than the first, recorded simulation? Those simulations draw from a fresh random number generator. This is not an exact approach.\n\nExample\n\nThe goal is to run the simulation with ten different parameter sets and measure how much different parameters change the mean of some quantity determined by the trajectories.\n\nusing Random: Xoshiro\nusing CompetingClocks\nexample_clock = (3, 7)  # We will use clock IDs that are a tuple of 2 integers.\nsampler = FirstToFire{typeof(example_clock)}()\ncrn_sampler = CommonRandomRecorder(sampler, typeof(example_clock), Xoshiro)\nfor trial_idx in 1:100\n    run_simulation(model, crn_sampler)\n    reset!(crn_sampler)\nend\nfor param_idx in 1:10\n    each_model = modify_model!(model, param_idx)\n    run_simulation(each_model, crn_sampler)\n    reset!(crn_sampler)\nend\n\n\n\n\n\n","category":"type"},{"location":"reference/#CompetingClocks.freeze","page":"Samplers","title":"CompetingClocks.freeze","text":"freeze(cr::CommonRandomRecorder)::FrozenCommonRandomRecorder\n\nThe CommonRandomRecorder records every time it sees a clock request random number generation. It continues to do that every time it runs, which is a problem if you run simulations for comparison on multiple threads. If you want to use CRN and to use multiple threads for subsequent simulation runs, then first run the simulation a bunch of times on one thread. Then freeze the simulation, and then the frozen version will stop remembering new threads.\n\nThere is one part of the frozen recorder that will be mutable because it's useful for debugging, the record of missed clocks. Freeze a recorder for each thread, and each thread will track its own misses. They will all work from the same copy of the recorded random number generator states.\n\n\n\n\n\n","category":"function"},{"location":"reference/#CompetingClocks.misscount","page":"Samplers","title":"CompetingClocks.misscount","text":"misscount(recorder::CommonRandomRecorder)\n\nThe common random recorder watches a simulation and replays the states of the random number generator on subsequent runs. This counts the number of times during the most recent run that a clock event happened that could not be replayed.\n\n\n\n\n\n","category":"function"},{"location":"reference/#CompetingClocks.misses","page":"Samplers","title":"CompetingClocks.misses","text":"misses(recorder::CommonRandomRecorder)\n\nThis iterates over pairs of misses in the common random recorder during the most recent simulation run, where the start of a simulation run was marked by calling reset!.\n\n\n\n\n\n","category":"function"},{"location":"reference/#CompetingClocks.MultiSampler","page":"Samplers","title":"CompetingClocks.MultiSampler","text":"MultiSampler{SamplerKey,Key,Time}(which_sampler::Function)\n\nThis makes a sampler that uses multiple stochastic sampling algorithms (SSA) to determine the next transition to fire. It returns the soonest transition of all of the algorithms. The which_sampler function looks at the clock ID, or key, and chooses which sampler should sample this clock. Add algorithms to this sampler like you would add them to a dictionary.\n\nOnce a clock is first enabled, it will always go to the same sampler. This sampler remembers the associations, which could increase memory for simulations with semi-infinite clocks.\n\nExamples\n\nLet's make one sampler for exponential distributions, one for a few clocks we know will be fast and one for slower clocks. We can name them with symbols. The trick is that we need to direct each kind of distribution to the correct sampler. Use a Float64 for time and each clock can be identified with an Int64.\n\nusing CompetingClocks\nusing Distributions: Exponential, UnivariateDistribution\n\nstruct ByDistribution <: SamplerChoice{Int64,Symbol} end\n\nfunction CompetingClocks.choose_sampler(\n    chooser::ByDistribution, clock::Int64, distribution::Exponential\n    )::Symbol\n    return :direct\nend\nfunction CompetingClocks.choose_sampler(\n    chooser::ByDistribution, clock::Int64, distribution::UnivariateDistribution\n    )::Symbol\n    if clock < 100\n        return :fast\n    else\n        return :slow\n    end\nend\nsampler = MultiSampler{Symbol,Int64,Float64}(ByDistribution())\nsampler[:direct] = OptimizedDirect{Int64,Float64}()\nsampler[:fast] = FirstToFire{Int64,Float64}()\nsampler[:slow] = FirstToFire{Int64,Float64}()\n\n\n\n\n\n","category":"type"},{"location":"reference/#CompetingClocks.SingleSampler","page":"Samplers","title":"CompetingClocks.SingleSampler","text":"SingleSampler{SSA,Time}(propagator::SSA)\n\nThis makes a sampler from a single stochastic simulation algorithm. It combines the core algorithm with the rest of the state of the system, which is just the time.\n\n\n\n\n\n","category":"type"},{"location":"reference/#CompetingClocks.ChatReaction","page":"Samplers","title":"CompetingClocks.ChatReaction","text":"This sampler can help if it's the first time you're trying a model. It checks all of the things and uses Julia's logger to communicate them. It samples using the first reaction algorithm.\n\n\n\n\n\n","category":"type"},{"location":"reference/#CompetingClocks.DebugWatcher","page":"Samplers","title":"CompetingClocks.DebugWatcher","text":"DebugWatcher()\n\nFor debugging, it helps to have visibility into the simulation. This Watcher records everything that is enabled or disabled as a list of all enables and all disabled. It's the complete event history, and you can think of it as the filtration for the process going forward.\n\nwatcher = DebugWatcher{String}()\n# enable and disable some things.\n(watcher.enabled[1].clock,\nwatcher.enabled[1].distribution,\nwatcher.enabled[1].te,\nwatcher.enabled[1].when)\n\n\n\n\n\n","category":"type"},{"location":"reference/#CompetingClocks.TrackWatcher","page":"Samplers","title":"CompetingClocks.TrackWatcher","text":"TrackWatcher{K,T}()\n\nThis Watcher doesn't sample. It records everything enabled. You can iterate over enabled clocks with a for-loop. If we think of the model as providing changes in which transitions are enabled or disabled, this Watcher accumulates those changes to provide a consistent list of all enabled transitions. Together, a model and this Watcher provide the Semi-Markov core matrix, or the row of it that is currently known.\n\nfor entry in tracker\n    entry.clock\n    entry.distribution\n    entry.te\n    entry.when\nend\n\n\n\n\n\n","category":"type"},{"location":"reference/#CompetingClocks.consume_survival","page":"Samplers","title":"CompetingClocks.consume_survival","text":"This updates the survival for a transition in the linear space, according to Gibson and Bruck. Transition was enabled between time record t0 and tn. Divide the survival by the conditional survival between t0 and tn. te can be before t0, at t0, between t0 and tn, or at tn, or after t_n.\n\nu=expleft(-int_t_e^t_nlambda_0(s-t_e)dsright)expleft(-int_t_n^taulambda_n(s-t_e)dsright)\n\n\n\n\n\nThis updates the survival for a transition in log space, according to Anderson's method.\n\nln u=-int_t_e^t_nlambda_0(s-t_e)ds - int_t_n^taulambda_n(s-t_e)ds\n\n\n\n\n\n","category":"function"},{"location":"reference/#CompetingClocks.sampling_space","page":"Samplers","title":"CompetingClocks.sampling_space","text":"This function decides whether a particular distribution can be sampled faster and more accurately using its cumulative distribution function or using the log of its cumulative distribution function, also called the integrated hazard. The former is used for the Next Reaction method by Gibson and Bruck. The latter is used by the Modified Next Reaction method of Anderson. We are calling the first a linear space and the second a logarithmic space.\n\n\n\n\n\n","category":"function"},{"location":"distrib/#Notation-for-Distributions","page":"Notation for Distributions","title":"Notation for Distributions","text":"","category":"section"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"This defines notation for subsequent sections.","category":"page"},{"location":"distrib/#Notation","page":"Notation for Distributions","title":"Notation","text":"","category":"section"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"First, let's affix notation. The cumulative distribution function of every regular distribution can be written as an integral over its hazard rate, lambda","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"F(t)=1-e^-int_0^t lambda(s)ds","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"All algorithms for stochastic simulation treat distributions as being defined in absolute time, specified as an enabling time, t_e,","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"F(t t_e)=1-e^-int_0^t-t_e lambda(s)ds","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"Working with distributions in absolute time is a simple shift of the time scale and will be ignored in further discussions, although the enabling time, t_e, will certainly appear in code.","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"The density function is the derivative of the cumulative distribution function,","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"f(t)=fracdF(t)dt=lambda(t)e^-int_0^t lambda(s)ds","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"The survival is","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"G(t)=1-F(t)=e^-int_0^t lambda(s)ds","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"Because survival is multiplicative, we further label the survival from time t_0 to t_1 as","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"G(t_0 t_1)=fracG(t_1)G(t_0)=e^-int_t_0^t_1 lambda(s)ds","category":"page"},{"location":"distrib/#Using-Julia's-Distributions","page":"Notation for Distributions","title":"Using Julia's Distributions","text":"","category":"section"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"Julia's continuous univariate distributions support a common interface.","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"In this table, d is the distribution, t is the time, and q is a quantile.","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"Julia call Notation\ncdf(d,t) F(t)\nquantile(d,q) F^-1(q)\nlogcdf(d,t) ln(F(t))\nccdf(d,t) G(t)\nlogccdf(d,t) -int_0^t lambda(s)ds\nquantile(d,q) F^-1(q)\ncquantile(d,q) F^-1(1-q)=G^-1(q)\ninvlogcdf(d,lp) F^-1(e^l_p)\ninvlogccdf(d,lp) G^-1(e^l_p) or -int_0^t(l_p)lambda(s)ds=l_p\nrandexp(rng) -ln(1-U)","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"CurrentModule = CompetingClocks","category":"page"},{"location":"algorithms/#Algorithms","page":"Algorithms","title":"Algorithms","text":"","category":"section"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"Many samplers depend on data structures to allow efficient querying of clocks ordered with respect to some value, usually the firing time. These types and methods implement them for CompetingClocks.","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"CumSumPrefixSearch\nBinaryTreePrefixSearch\nKeyedKeepPrefixSearch\nKeyedRemovalPrefixSearch\nchoose\nsetindex!\nrand\nset_multiple!","category":"page"},{"location":"algorithms/#CompetingClocks.CumSumPrefixSearch","page":"Algorithms","title":"CompetingClocks.CumSumPrefixSearch","text":"CumSumPrefixSearch{T}()\n\nThis stores hazard rates in order to make it easier for the Direct method to sample them. This version is the dumbest possible, but it can be faster when there are few hazards enabled. It uses a simple array and, each time the Direct method samples, this evaluates the cumulative sum of the array.\n\n\n\n\n\n","category":"type"},{"location":"algorithms/#CompetingClocks.BinaryTreePrefixSearch","page":"Algorithms","title":"CompetingClocks.BinaryTreePrefixSearch","text":"BinaryTreePrefixSearch{T}(N=32)\n\nThis stores hazard rates to make them faster for the Direct method to sample. This is a binary tree where the leaves are values and the nodes are sums of those values. It is meant to make it easier to find the leaf such that the sum of it and all previous leaves is greater than a given value.\n\n\n\n\n\n","category":"type"},{"location":"algorithms/#CompetingClocks.KeyedKeepPrefixSearch","page":"Algorithms","title":"CompetingClocks.KeyedKeepPrefixSearch","text":"This decorator turns a Prefix Search algorithm into one that works for arbitrary keys. This version only adds entries, so disabling a clock sets its hazard to zero without removing it. If a simulation re-enables the same set of clocks, this is the faster choice.\n\n\n\n\n\n","category":"type"},{"location":"algorithms/#CompetingClocks.KeyedRemovalPrefixSearch","page":"Algorithms","title":"CompetingClocks.KeyedRemovalPrefixSearch","text":"This decorator turns a Prefix Search algorithm into one that works for arbitrary keys. This version reuses entries in the prefix search after their clocks have been disabled. If the simulation moves through a large key space, this will use less memory.\n\n\n\n\n\n","category":"type"},{"location":"algorithms/#CompetingClocks.choose","page":"Algorithms","title":"CompetingClocks.choose","text":"choose(pst::BinaryTreePrefixSearch, value)\n\nFind the minimum index such that the prefix is greater than the given value.\n\nPrecondition: The value must be strictly less than the total for the tree.\n\n\n\n\n\n","category":"function"},{"location":"algorithms/#Base.setindex!","page":"Algorithms","title":"Base.setindex!","text":"setindex!(A, X, inds...)\n\n\n\n\n\n","category":"function"},{"location":"algorithms/#Base.rand","page":"Algorithms","title":"Base.rand","text":"rand(rng, sampler::SamplerTrivial{BinaryTreePrefixSearch})\n\nThis method overload allows the machinery of Random to generate random variates from the BinaryTreePrefixSearch set of values.\n\n\n\n\n\nrand(rng, sampler::SamplerTrivial{CumSumPrefixSearch})\n\nThis method overload allows the machinery of Random to generate random variates from the CumSumPrefixSearch set of values.\n\n\n\n\n\nDrawing a random number from a left-truncated exponential is particularly simple.\n\n\n\n\n\n","category":"function"},{"location":"algorithms/#CompetingClocks.set_multiple!","page":"Algorithms","title":"CompetingClocks.set_multiple!","text":"If there are multiple values to enter, then present them at once as pairs of tuples, (index, value).\n\n\n\n\n\n","category":"function"},{"location":"objects/#Objects-in-CompetingClocks","page":"Objects in CompetingClocks","title":"Objects in CompetingClocks","text":"","category":"section"},{"location":"objects/","page":"Objects in CompetingClocks","title":"Objects in CompetingClocks","text":"This describes the kinds of objects in CompetingClocks in order to explain how they work together.","category":"page"},{"location":"objects/#Distribution","page":"Objects in CompetingClocks","title":"Distribution","text":"","category":"section"},{"location":"objects/","page":"Objects in CompetingClocks","title":"Objects in CompetingClocks","text":"At the heart of simulations are probability distributions. When this code refers to a distribution, it means a probability distribution function in time. When we sample a distribution, we randomly draw a time at which an event will happen.","category":"page"},{"location":"objects/","page":"Objects in CompetingClocks","title":"Objects in CompetingClocks","text":"Let's take a Gamma distribution as an example. For the Gamma distribution, the probability distribution function, as you see it in Wikipedia's description,","category":"page"},{"location":"objects/","page":"Objects in CompetingClocks","title":"Objects in CompetingClocks","text":"f(x) = fracbeta^alphaGamma(alpha)x^alpha - 1e^-beta x","category":"page"},{"location":"objects/","page":"Objects in CompetingClocks","title":"Objects in CompetingClocks","text":"For a simulation, we think of the distribution as being over time, and it's over the time since it was first possible for the event to happen, called t_e. We can write the Gamma distribution for t-t_e.","category":"page"},{"location":"objects/","page":"Objects in CompetingClocks","title":"Objects in CompetingClocks","text":"f(t-t_e) = fracbeta^alphaGamma(alpha)(t-t_e)^alpha - 1e^-beta (t-t_e)","category":"page"},{"location":"objects/","page":"Objects in CompetingClocks","title":"Objects in CompetingClocks","text":"In Julia, the univariate distributions don't carry their enabling time as a parameter, so we store it separately.","category":"page"},{"location":"objects/#Competing-Clocks","page":"Objects in CompetingClocks","title":"Competing Clocks","text":"","category":"section"},{"location":"objects/","page":"Objects in CompetingClocks","title":"Objects in CompetingClocks","text":"Let's say you make a simulation of rabbits eating kibble. A rabbit just picked up a piece of kibble, and the simulation decides there is a Gamma-distributed time at which it will be ready to eat the next bit of kibble. Meanwhile, another rabbit eats the last bit of kibble. That makes it impossible for the first rabbit to eat any kibble, so we say that its event is interrupted. That interruption was a result of the rabbits competing, but what the simulation sees is distributions competing to fire first, and we call them competing clocks.","category":"page"},{"location":"objects/","page":"Objects in CompetingClocks","title":"Objects in CompetingClocks","text":"We have a small naming problem because, while simulations use distributions in time, they sometimes turn them on or off. This combination of a known distribution (such as an Exponential or Gamma distribution) and the ability to temporarily pause it creates its own probability distribution, which we call a clock.","category":"page"},{"location":"objects/","page":"Objects in CompetingClocks","title":"Objects in CompetingClocks","text":"For example, let's make a model of a random walker on a chessboard. Given that the walker is at a grid location, (i j), that walker can move to one of four directions, (i-1 j), (i+1 j), (i j-1), or (i j+1). In order to simulate this, we might choose four Exponential distributions, one for each direction. When the walker reaches the side of the chessboard, it doesn't make sense to let it walk off the chessboard, so, at that moment, the simulation disables the ability to walk left. There is an Exponential distribution associated with walking left, but its hazard rate will be zero while the piece is at the side of the chessboard. The simulation considers \"move left\" a clock with an Exponential distribution whose firing is disabled.","category":"page"},{"location":"objects/#Sampler","page":"Objects in CompetingClocks","title":"Sampler","text":"","category":"section"},{"location":"objects/","page":"Objects in CompetingClocks","title":"Objects in CompetingClocks","text":"The main responsibility of CompetingClocks.jl is to provide samplers of competing clocks. Given a list of enabled distributions, decide which one is next to fire and when it will fire.","category":"page"},{"location":"objects/","page":"Objects in CompetingClocks","title":"Objects in CompetingClocks","text":"In order to decide which clock fires next, a sampler needs some information.","category":"page"},{"location":"objects/#Initialization","page":"Objects in CompetingClocks","title":"Initialization","text":"","category":"section"},{"location":"objects/","page":"Objects in CompetingClocks","title":"Objects in CompetingClocks","text":"The sampler may have a constructor to configure its memory usage or other resources.","category":"page"},{"location":"objects/#Update-Clock-State","page":"Objects in CompetingClocks","title":"Update Clock State","text":"","category":"section"},{"location":"objects/","page":"Objects in CompetingClocks","title":"Objects in CompetingClocks","text":"For a continuous-time simulation, each event happens at a distinct time. Right after an event happens, the simulation is changed, and there are three possible ways clocks are affected.","category":"page"},{"location":"objects/","page":"Objects in CompetingClocks","title":"Objects in CompetingClocks","text":"A clock may be disabled. For instance, if the event was crashing a car, you can no longer crash a crashed car.\nA clock may be enabled. For instance, once a person is infected, they can now infect all neighboring people.\nThe rate of a clock may change. We discussed moves on a chessboard earlier. Maybe there's now a breeze so that the rate to move right is greater than the rate to move left. The Exponential distributions would change accordingly.","category":"page"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"EditURL = \"gsmp.jl\"","category":"page"},{"location":"gsmp/#Generalized-Semi-Markov-processes","page":"GSMP","title":"Generalized Semi-Markov processes","text":"","category":"section"},{"location":"gsmp/#Definition","page":"GSMP","title":"Definition","text":"","category":"section"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"We said that a semi-Markov process is a set of random variables representing states and times of a system, X_iT_i. For each state at time T_i, the probability of the next state and time is some distribution, PX_i+1T_i+1X_iT_i. A generalized semi-Markov process (GSMP) also has the same states and times an the same distribution of next states and times, but it's more specific about how to calculate the probability.","category":"page"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"For a GSMP, every change in state of the system, from X_i to X_i+1, is the result of an event E_j. Each event is associated with a distribution of event times, also called firing times, and those times are distributed as f_j(tau) where tau=t-T_i. The probability of the next state and time is determined by the minimum firing time of all events enabled at (X_iT_i). The distributions of these events are our competing clocks. When one event fires, it changes the state of the system, and, as a result, some events may be disabled and new events may be enabled.","category":"page"},{"location":"gsmp/#Considerations","page":"GSMP","title":"Considerations","text":"","category":"section"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"Once we create this separate object, the event, it raises questions about corner cases. If two events change the state in the same way, then they are the same as one event whose hazard rate is the sum of the two events. If an event does not change the state, then this is like a self-loop in a Markov chain, and it complicates how we count states. As with the semi-Markov process, there remains the question of events which are immediate. If an event can happen at T_i+1=T_i, then it is possible for a system to fail to progress to a later time, and that's a problem.","category":"page"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"The GSMP is a specific form of a semi-Markov process that requires PT_i+1X_iT_i (note the X_i+1 isn't on the left side) be determined by the minimum time to the next event, so it is determined solely by the f_j(tau). Each event is also defined by how it changes the state. If events change the state in a deterministic way, such that there is some function X_i+1=chi_j(X_i), then the likelihood of the system is the product of PX_i+1T_i+1X_iT_i for each time step, determined by the mimimum of event times. It is traditional to define generalized stochastic Petri nets [Haas:2002] this way, and Anderson and Kurtz's excellent short manuscript presents GSMP in the same light using counting processes [Anderson:2015]. However, Haas describes GSMP as allowing events to be stochastic. This means the likelihood has two terms, PE_jT_i+1X_iT_iPX_i+1E_j T_i+1 X_iT_i.","category":"page"},{"location":"gsmp/#Events-and-Physical-State","page":"GSMP","title":"Events and Physical State","text":"","category":"section"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"Glynn presented GSMP by distinguishing the physical state of the system from the clock state [Glynn:1989], and Shedler is known for having the clearest presentation [Shedler:1987]. He represented the physical state as a set of states p=(p_1p_2p_3). Then each event, E_j, is defined in relation to those physical states:","category":"page"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"An event is enabled by an enabling function which depends on a subset of physical states. This is a function e(p_lT_i)rightarrow textbool. In this notation, the curly bracked  indicate a \"set of\" something.\nWhen the event is not enabled, it is disabled.\nThe distribution of event times for an event is determined by a subset of physical states. This is a function f(p_mT_i)rightarrow textpdf.\nAn event creates a new state by changing some subset of the physical state, and that function can depend on another subset of the physical state, which isn't changed. This is a function chi(p_jp_kT_iT_i+1)rightarrow p_j.","category":"page"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"Look at all the subsets. There is a subset for enabling, transition rates, modified state, and catalyst state (which affects the action but isn't modified). If we think of the physical state as nodes in a graph and the events as nodes in a graph, then each subset associated with an event forms a different kind of edge in a bipartite graph.","category":"page"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"The state of the system at any time is more than the physical state. It's the physical state plus the history of when each event clock was enabled. It is even reasonable to include in the state of the system every past event that fired and the time it fired, which is called the filtration of the stochastic process.","category":"page"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"The idea behind introducing the notion of physical state and subsets of the physical state is to help think about a semi-Markov process where events live longer than a single time step. Glynn wanted to attach those long-lived competing processes to some state because, in practice, there is something about the state of the world that remains the same at each time step. The brilliance of Anderson and Kurtz's monograph is that they start their model as a set of counting processes [Anderson:2015]. Any state of the system is a predictable function of the filtration (event history) of the counting processes.","category":"page"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"In the nomenclature of the GSMP, an event defines a change to substates, and every possible pair of states (X_i+1X_i) defines a transition. In general, the number of possible transitions is combinatorially larger than the number of possible events, as Haas covers in detail [Haas:2002].","category":"page"},{"location":"gsmp/#Formalisms-of-GSMP","page":"GSMP","title":"Formalisms of GSMP","text":"","category":"section"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"There are many frameworks for simulation where the simulation is in continuous-time and the next event is determined by competition among clocks.","category":"page"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"Simulations of chemical reactions. Here, the physical state is chemical components and simulations are usually, but not always, Exponentially-distributed.\nQueueing theory models of networks, production, and computation. Here, the state is in queues and the events are reprsented by servers.\nEpidemiological models of disease spread among individuals. These models are often hand-coded, but they look a lot like chemical simulation with non-Exponential distributions.\nVector-addition systems are an older form of simulation where the state is a vector of integers and every event gives or takes from the vector of integers. Again, it looks a lot like chemical simulation.\nGeneralized stochastic Petri nets are what happens when engineers use GSMP. There is a strong vocabulary used to define the state as marking and places, but they conform to what is described above.","category":"page"},{"location":"gsmp/#Extensions-to-GSMP","page":"GSMP","title":"Extensions to GSMP","text":"","category":"section"},{"location":"gsmp/#Atomic-Hazards-and-Differential-Equations","page":"GSMP","title":"Atomic Hazards and Differential Equations","text":"","category":"section"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"Most presentations of GSMP assume that the distribution times of events are continuous distributions that are well-behaved, but the structure of the stochastic process remains well-defined if we allow distributions that have jumps. Examples of such distributions are delta functions. We could for instance, say that an event has a 1/3 chance of happening in 2 minutes an a 2/3 chance of happening in 5 minutes.","category":"page"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"More commonly, what if the next step in a simulation were determined by an ordinary differential equation (ODE) that depends on the current state and time? A simulation could, at the enabling time, integrate the ODE to find when it predicts the next event and then enable a distribution that is a delta function centered at that predicted time.","category":"page"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"The caveat for atomic hazards it's possible for two atomic hazards to happen at exactly the same time. CompetingClocks doesn't have a way to guarantee which of those events happen first. It certainly doesn't have a way to randomly select which event should happen from a configurable probability distribution. This is a feature specific to samplers that allow instantaneous and simultaneous events. The way we handle the possiblility of simultaneous events is to schedule atomic events relative to continuous-time events or to ensure that there is only one atomic hazard in a whole simulation.","category":"page"},{"location":"gsmp/#Markov-Decision-Process","page":"GSMP","title":"Markov Decision Process","text":"","category":"section"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"In reinforcement learning, there is a model for how the world changes and a model for how to make decisions that depend on the world's history. For a GSMP-based decision process, there are two terms in the likelihood for the next state and time.","category":"page"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"PX_i+1T_i+1X_iT_iPA_j","category":"page"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"The additional stochastic variable A_j is the decision at each step.","category":"page"},{"location":"gsmp/#Piecewise-deterministic-Markov-Process","page":"GSMP","title":"Piecewise-deterministic Markov Process","text":"","category":"section"},{"location":"gsmp/#References","page":"GSMP","title":"References","text":"","category":"section"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"[Anderson:2015] Anderson, David F., and Thomas G. Kurtz. Stochastic analysis of biochemical systems. Vol. 674. Berlin, Germany: Springer International Publishing, 2015.","category":"page"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"[Haas:2002] P. J. Haas, Stochastic Petri Nets: Modelling, Stability, Simulation, Springer-Verlag, New York, New York, USA, 2002.","category":"page"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"[Glynn:1989] P. Glynn, A GSMP formalism for discrete event systems, Proceedings of the IEEE 77 (1) (1989) 14– 23, ISSN 00189219, URL.","category":"page"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"[Shedler:1987] Shedler, Gerald S. Regeneration and networks of queues. Vol. 3. Springer Science & Business Media, 1987.","category":"page"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"","category":"page"},{"location":"gsmp/","page":"GSMP","title":"GSMP","text":"This page was generated using Literate.jl.","category":"page"},{"location":"memory/","page":"Transitions with Memory","title":"Transitions with Memory","text":"EditURL = \"memory.jl\"","category":"page"},{"location":"memory/#Transitions-with-Memory","page":"Transitions with Memory","title":"Transitions with Memory","text":"","category":"section"},{"location":"memory/","page":"Transitions with Memory","title":"Transitions with Memory","text":"Some transitions can be paused and restarted. These transitions are said to have memory [Zimmerman:2007]. For instance, let's say there is an industrial process that takes a Gamma-distributed amount of time.","category":"page"},{"location":"memory/","page":"Transitions with Memory","title":"Transitions with Memory","text":"using Distributions\nusing Plots\nbottler = Gamma(7.5, 1.0)\nx = 0.0:0.05:12.0\nplot(x, pdf.(bottler, x), xlims=(0.0, 12.0))","category":"page"},{"location":"memory/","page":"Transitions with Memory","title":"Transitions with Memory","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip140\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip140)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip141\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip140)\" d=\"M186.274 1486.45 L2352.76 1486.45 L2352.76 47.2441 L186.274 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip142\">\n    <rect x=\"186\" y=\"47\" width=\"2167\" height=\"1440\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"186.274,1486.45 186.274,47.2441 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"547.354,1486.45 547.354,47.2441 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"908.435,1486.45 908.435,47.2441 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1269.51,1486.45 1269.51,47.2441 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1630.6,1486.45 1630.6,47.2441 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1991.68,1486.45 1991.68,47.2441 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2352.76,1486.45 2352.76,47.2441 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"186.274,1486.45 2352.76,1486.45 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"186.274,1486.45 186.274,1467.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"547.354,1486.45 547.354,1467.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"908.435,1486.45 908.435,1467.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1269.51,1486.45 1269.51,1467.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1630.6,1486.45 1630.6,1467.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1991.68,1486.45 1991.68,1467.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2352.76,1486.45 2352.76,1467.55 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M186.274 1517.37 Q182.663 1517.37 180.834 1520.93 Q179.029 1524.47 179.029 1531.6 Q179.029 1538.71 180.834 1542.27 Q182.663 1545.82 186.274 1545.82 Q189.908 1545.82 191.714 1542.27 Q193.542 1538.71 193.542 1531.6 Q193.542 1524.47 191.714 1520.93 Q189.908 1517.37 186.274 1517.37 M186.274 1513.66 Q192.084 1513.66 195.14 1518.27 Q198.218 1522.85 198.218 1531.6 Q198.218 1540.33 195.14 1544.94 Q192.084 1549.52 186.274 1549.52 Q180.464 1549.52 177.385 1544.94 Q174.33 1540.33 174.33 1531.6 Q174.33 1522.85 177.385 1518.27 Q180.464 1513.66 186.274 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M542.007 1544.91 L558.326 1544.91 L558.326 1548.85 L536.382 1548.85 L536.382 1544.91 Q539.044 1542.16 543.627 1537.53 Q548.234 1532.88 549.414 1531.53 Q551.66 1529.01 552.539 1527.27 Q553.442 1525.51 553.442 1523.82 Q553.442 1521.07 551.498 1519.33 Q549.577 1517.6 546.475 1517.6 Q544.276 1517.6 541.822 1518.36 Q539.391 1519.13 536.614 1520.68 L536.614 1515.95 Q539.438 1514.82 541.891 1514.24 Q544.345 1513.66 546.382 1513.66 Q551.752 1513.66 554.947 1516.35 Q558.141 1519.03 558.141 1523.52 Q558.141 1525.65 557.331 1527.57 Q556.544 1529.47 554.438 1532.07 Q553.859 1532.74 550.757 1535.95 Q547.655 1539.15 542.007 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M911.444 1518.36 L899.638 1536.81 L911.444 1536.81 L911.444 1518.36 M910.217 1514.29 L916.097 1514.29 L916.097 1536.81 L921.027 1536.81 L921.027 1540.7 L916.097 1540.7 L916.097 1548.85 L911.444 1548.85 L911.444 1540.7 L895.842 1540.7 L895.842 1536.19 L910.217 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1269.92 1529.7 Q1266.77 1529.7 1264.92 1531.86 Q1263.09 1534.01 1263.09 1537.76 Q1263.09 1541.49 1264.92 1543.66 Q1266.77 1545.82 1269.92 1545.82 Q1273.07 1545.82 1274.9 1543.66 Q1276.75 1541.49 1276.75 1537.76 Q1276.75 1534.01 1274.9 1531.86 Q1273.07 1529.7 1269.92 1529.7 M1279.2 1515.05 L1279.2 1519.31 Q1277.44 1518.48 1275.64 1518.04 Q1273.86 1517.6 1272.1 1517.6 Q1267.47 1517.6 1265.01 1520.72 Q1262.58 1523.85 1262.23 1530.17 Q1263.6 1528.15 1265.66 1527.09 Q1267.72 1526 1270.2 1526 Q1275.41 1526 1278.42 1529.17 Q1281.45 1532.32 1281.45 1537.76 Q1281.45 1543.08 1278.3 1546.3 Q1275.15 1549.52 1269.92 1549.52 Q1263.92 1549.52 1260.75 1544.94 Q1257.58 1540.33 1257.58 1531.6 Q1257.58 1523.41 1261.47 1518.55 Q1265.36 1513.66 1271.91 1513.66 Q1273.67 1513.66 1275.45 1514.01 Q1277.26 1514.36 1279.2 1515.05 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1630.6 1532.44 Q1627.26 1532.44 1625.34 1534.22 Q1623.44 1536 1623.44 1539.13 Q1623.44 1542.25 1625.34 1544.03 Q1627.26 1545.82 1630.6 1545.82 Q1633.93 1545.82 1635.85 1544.03 Q1637.77 1542.23 1637.77 1539.13 Q1637.77 1536 1635.85 1534.22 Q1633.95 1532.44 1630.6 1532.44 M1625.92 1530.45 Q1622.91 1529.7 1621.22 1527.64 Q1619.55 1525.58 1619.55 1522.62 Q1619.55 1518.48 1622.49 1516.07 Q1625.46 1513.66 1630.6 1513.66 Q1635.76 1513.66 1638.7 1516.07 Q1641.64 1518.48 1641.64 1522.62 Q1641.64 1525.58 1639.95 1527.64 Q1638.28 1529.7 1635.29 1530.45 Q1638.67 1531.23 1640.55 1533.52 Q1642.45 1535.82 1642.45 1539.13 Q1642.45 1544.15 1639.37 1546.83 Q1636.31 1549.52 1630.6 1549.52 Q1624.88 1549.52 1621.8 1546.83 Q1618.74 1544.15 1618.74 1539.13 Q1618.74 1535.82 1620.64 1533.52 Q1622.54 1531.23 1625.92 1530.45 M1624.21 1523.06 Q1624.21 1525.75 1625.87 1527.25 Q1627.56 1528.76 1630.6 1528.76 Q1633.6 1528.76 1635.29 1527.25 Q1637.01 1525.75 1637.01 1523.06 Q1637.01 1520.38 1635.29 1518.87 Q1633.6 1517.37 1630.6 1517.37 Q1627.56 1517.37 1625.87 1518.87 Q1624.21 1520.38 1624.21 1523.06 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1966.36 1544.91 L1974 1544.91 L1974 1518.55 L1965.69 1520.21 L1965.69 1515.95 L1973.96 1514.29 L1978.63 1514.29 L1978.63 1544.91 L1986.27 1544.91 L1986.27 1548.85 L1966.36 1548.85 L1966.36 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2005.71 1517.37 Q2002.1 1517.37 2000.28 1520.93 Q1998.47 1524.47 1998.47 1531.6 Q1998.47 1538.71 2000.28 1542.27 Q2002.1 1545.82 2005.71 1545.82 Q2009.35 1545.82 2011.15 1542.27 Q2012.98 1538.71 2012.98 1531.6 Q2012.98 1524.47 2011.15 1520.93 Q2009.35 1517.37 2005.71 1517.37 M2005.71 1513.66 Q2011.53 1513.66 2014.58 1518.27 Q2017.66 1522.85 2017.66 1531.6 Q2017.66 1540.33 2014.58 1544.94 Q2011.53 1549.52 2005.71 1549.52 Q1999.9 1549.52 1996.83 1544.94 Q1993.77 1540.33 1993.77 1531.6 Q1993.77 1522.85 1996.83 1518.27 Q1999.9 1513.66 2005.71 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2328.24 1544.91 L2335.88 1544.91 L2335.88 1518.55 L2327.57 1520.21 L2327.57 1515.95 L2335.83 1514.29 L2340.51 1514.29 L2340.51 1544.91 L2348.15 1544.91 L2348.15 1548.85 L2328.24 1548.85 L2328.24 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2361.62 1544.91 L2377.94 1544.91 L2377.94 1548.85 L2356 1548.85 L2356 1544.91 Q2358.66 1542.16 2363.24 1537.53 Q2367.85 1532.88 2369.03 1531.53 Q2371.27 1529.01 2372.15 1527.27 Q2373.06 1525.51 2373.06 1523.82 Q2373.06 1521.07 2371.11 1519.33 Q2369.19 1517.6 2366.09 1517.6 Q2363.89 1517.6 2361.44 1518.36 Q2359.01 1519.13 2356.23 1520.68 L2356.23 1515.95 Q2359.05 1514.82 2361.51 1514.24 Q2363.96 1513.66 2366 1513.66 Q2371.37 1513.66 2374.56 1516.35 Q2377.76 1519.03 2377.76 1523.52 Q2377.76 1525.65 2376.95 1527.57 Q2376.16 1529.47 2374.05 1532.07 Q2373.47 1532.74 2370.37 1535.95 Q2367.27 1539.15 2361.62 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"186.274,1445.72 2352.76,1445.72 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"186.274,1006.28 2352.76,1006.28 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"186.274,566.842 2352.76,566.842 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"186.274,127.405 2352.76,127.405 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"186.274,1486.45 186.274,47.2441 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"186.274,1445.72 205.172,1445.72 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"186.274,1006.28 205.172,1006.28 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"186.274,566.842 205.172,566.842 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"186.274,127.405 205.172,127.405 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M62.9365 1431.51 Q59.3254 1431.51 57.4967 1435.08 Q55.6912 1438.62 55.6912 1445.75 Q55.6912 1452.86 57.4967 1456.42 Q59.3254 1459.96 62.9365 1459.96 Q66.5707 1459.96 68.3763 1456.42 Q70.205 1452.86 70.205 1445.75 Q70.205 1438.62 68.3763 1435.08 Q66.5707 1431.51 62.9365 1431.51 M62.9365 1427.81 Q68.7467 1427.81 71.8022 1432.42 Q74.8809 1437 74.8809 1445.75 Q74.8809 1454.48 71.8022 1459.08 Q68.7467 1463.67 62.9365 1463.67 Q57.1264 1463.67 54.0477 1459.08 Q50.9921 1454.48 50.9921 1445.75 Q50.9921 1437 54.0477 1432.42 Q57.1264 1427.81 62.9365 1427.81 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M83.0984 1457.12 L87.9827 1457.12 L87.9827 1463 L83.0984 1463 L83.0984 1457.12 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M108.168 1431.51 Q104.557 1431.51 102.728 1435.08 Q100.922 1438.62 100.922 1445.75 Q100.922 1452.86 102.728 1456.42 Q104.557 1459.96 108.168 1459.96 Q111.802 1459.96 113.608 1456.42 Q115.436 1452.86 115.436 1445.75 Q115.436 1438.62 113.608 1435.08 Q111.802 1431.51 108.168 1431.51 M108.168 1427.81 Q113.978 1427.81 117.033 1432.42 Q120.112 1437 120.112 1445.75 Q120.112 1454.48 117.033 1459.08 Q113.978 1463.67 108.168 1463.67 Q102.358 1463.67 99.2789 1459.08 Q96.2234 1454.48 96.2234 1445.75 Q96.2234 1437 99.2789 1432.42 Q102.358 1427.81 108.168 1427.81 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M138.33 1431.51 Q134.719 1431.51 132.89 1435.08 Q131.084 1438.62 131.084 1445.75 Q131.084 1452.86 132.89 1456.42 Q134.719 1459.96 138.33 1459.96 Q141.964 1459.96 143.769 1456.42 Q145.598 1452.86 145.598 1445.75 Q145.598 1438.62 143.769 1435.08 Q141.964 1431.51 138.33 1431.51 M138.33 1427.81 Q144.14 1427.81 147.195 1432.42 Q150.274 1437 150.274 1445.75 Q150.274 1454.48 147.195 1459.08 Q144.14 1463.67 138.33 1463.67 Q132.519 1463.67 129.441 1459.08 Q126.385 1454.48 126.385 1445.75 Q126.385 1437 129.441 1432.42 Q132.519 1427.81 138.33 1427.81 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M63.9319 992.077 Q60.3208 992.077 58.4921 995.642 Q56.6865 999.184 56.6865 1006.31 Q56.6865 1013.42 58.4921 1016.98 Q60.3208 1020.53 63.9319 1020.53 Q67.5661 1020.53 69.3717 1016.98 Q71.2004 1013.42 71.2004 1006.31 Q71.2004 999.184 69.3717 995.642 Q67.5661 992.077 63.9319 992.077 M63.9319 988.374 Q69.742 988.374 72.7976 992.98 Q75.8763 997.564 75.8763 1006.31 Q75.8763 1015.04 72.7976 1019.65 Q69.742 1024.23 63.9319 1024.23 Q58.1217 1024.23 55.043 1019.65 Q51.9875 1015.04 51.9875 1006.31 Q51.9875 997.564 55.043 992.98 Q58.1217 988.374 63.9319 988.374 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M84.0938 1017.68 L88.978 1017.68 L88.978 1023.56 L84.0938 1023.56 L84.0938 1017.68 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M109.163 992.077 Q105.552 992.077 103.723 995.642 Q101.918 999.184 101.918 1006.31 Q101.918 1013.42 103.723 1016.98 Q105.552 1020.53 109.163 1020.53 Q112.797 1020.53 114.603 1016.98 Q116.432 1013.42 116.432 1006.31 Q116.432 999.184 114.603 995.642 Q112.797 992.077 109.163 992.077 M109.163 988.374 Q114.973 988.374 118.029 992.98 Q121.107 997.564 121.107 1006.31 Q121.107 1015.04 118.029 1019.65 Q114.973 1024.23 109.163 1024.23 Q103.353 1024.23 100.274 1019.65 Q97.2187 1015.04 97.2187 1006.31 Q97.2187 997.564 100.274 992.98 Q103.353 988.374 109.163 988.374 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M129.371 988.999 L147.728 988.999 L147.728 992.934 L133.654 992.934 L133.654 1001.41 Q134.672 1001.06 135.691 1000.9 Q136.709 1000.71 137.728 1000.71 Q143.515 1000.71 146.894 1003.88 Q150.274 1007.05 150.274 1012.47 Q150.274 1018.05 146.802 1021.15 Q143.33 1024.23 137.01 1024.23 Q134.834 1024.23 132.566 1023.86 Q130.32 1023.49 127.913 1022.75 L127.913 1018.05 Q129.996 1019.18 132.219 1019.74 Q134.441 1020.29 136.918 1020.29 Q140.922 1020.29 143.26 1018.19 Q145.598 1016.08 145.598 1012.47 Q145.598 1008.86 143.26 1006.75 Q140.922 1004.65 136.918 1004.65 Q135.043 1004.65 133.168 1005.06 Q131.316 1005.48 129.371 1006.36 L129.371 988.999 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M62.9365 552.641 Q59.3254 552.641 57.4967 556.205 Q55.6912 559.747 55.6912 566.877 Q55.6912 573.983 57.4967 577.548 Q59.3254 581.089 62.9365 581.089 Q66.5707 581.089 68.3763 577.548 Q70.205 573.983 70.205 566.877 Q70.205 559.747 68.3763 556.205 Q66.5707 552.641 62.9365 552.641 M62.9365 548.937 Q68.7467 548.937 71.8022 553.543 Q74.8809 558.127 74.8809 566.877 Q74.8809 575.603 71.8022 580.21 Q68.7467 584.793 62.9365 584.793 Q57.1264 584.793 54.0477 580.21 Q50.9921 575.603 50.9921 566.877 Q50.9921 558.127 54.0477 553.543 Q57.1264 548.937 62.9365 548.937 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M83.0984 578.242 L87.9827 578.242 L87.9827 584.122 L83.0984 584.122 L83.0984 578.242 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M98.978 580.187 L106.617 580.187 L106.617 553.821 L98.3067 555.488 L98.3067 551.228 L106.571 549.562 L111.246 549.562 L111.246 580.187 L118.885 580.187 L118.885 584.122 L98.978 584.122 L98.978 580.187 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M138.33 552.641 Q134.719 552.641 132.89 556.205 Q131.084 559.747 131.084 566.877 Q131.084 573.983 132.89 577.548 Q134.719 581.089 138.33 581.089 Q141.964 581.089 143.769 577.548 Q145.598 573.983 145.598 566.877 Q145.598 559.747 143.769 556.205 Q141.964 552.641 138.33 552.641 M138.33 548.937 Q144.14 548.937 147.195 553.543 Q150.274 558.127 150.274 566.877 Q150.274 575.603 147.195 580.21 Q144.14 584.793 138.33 584.793 Q132.519 584.793 129.441 580.21 Q126.385 575.603 126.385 566.877 Q126.385 558.127 129.441 553.543 Q132.519 548.937 138.33 548.937 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M63.9319 113.204 Q60.3208 113.204 58.4921 116.768 Q56.6865 120.31 56.6865 127.44 Q56.6865 134.546 58.4921 138.111 Q60.3208 141.652 63.9319 141.652 Q67.5661 141.652 69.3717 138.111 Q71.2004 134.546 71.2004 127.44 Q71.2004 120.31 69.3717 116.768 Q67.5661 113.204 63.9319 113.204 M63.9319 109.5 Q69.742 109.5 72.7976 114.106 Q75.8763 118.69 75.8763 127.44 Q75.8763 136.166 72.7976 140.773 Q69.742 145.356 63.9319 145.356 Q58.1217 145.356 55.043 140.773 Q51.9875 136.166 51.9875 127.44 Q51.9875 118.69 55.043 114.106 Q58.1217 109.5 63.9319 109.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M84.0938 138.805 L88.978 138.805 L88.978 144.685 L84.0938 144.685 L84.0938 138.805 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M99.9733 140.75 L107.612 140.75 L107.612 114.384 L99.3021 116.051 L99.3021 111.792 L107.566 110.125 L112.242 110.125 L112.242 140.75 L119.881 140.75 L119.881 144.685 L99.9733 144.685 L99.9733 140.75 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M129.371 110.125 L147.728 110.125 L147.728 114.06 L133.654 114.06 L133.654 122.532 Q134.672 122.185 135.691 122.023 Q136.709 121.838 137.728 121.838 Q143.515 121.838 146.894 125.009 Q150.274 128.18 150.274 133.597 Q150.274 139.176 146.802 142.277 Q143.33 145.356 137.01 145.356 Q134.834 145.356 132.566 144.986 Q130.32 144.615 127.913 143.875 L127.913 139.176 Q129.996 140.31 132.219 140.865 Q134.441 141.421 136.918 141.421 Q140.922 141.421 143.26 139.315 Q145.598 137.208 145.598 133.597 Q145.598 129.986 143.26 127.879 Q140.922 125.773 136.918 125.773 Q135.043 125.773 133.168 126.19 Q131.316 126.606 129.371 127.486 L129.371 110.125 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip142)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"186.274,1445.72 195.301,1445.72 204.328,1445.72 213.355,1445.72 222.382,1445.72 231.409,1445.72 240.436,1445.71 249.463,1445.71 258.49,1445.71 267.517,1445.7 276.544,1445.68 285.571,1445.66 294.598,1445.62 303.625,1445.57 312.652,1445.49 321.679,1445.37 330.706,1445.22 339.733,1445.02 348.76,1444.75 357.787,1444.41 366.814,1443.99 375.841,1443.46 384.868,1442.81 393.895,1442.03 402.922,1441.09 411.949,1439.98 420.976,1438.67 430.003,1437.15 439.03,1435.4 448.057,1433.39 457.084,1431.1 466.111,1428.51 475.138,1425.59 484.165,1422.34 493.192,1418.71 502.219,1414.7 511.246,1410.29 520.273,1405.45 529.3,1400.16 538.327,1394.41 547.354,1388.18 556.381,1381.46 565.408,1374.23 574.435,1366.48 583.462,1358.2 592.489,1349.37 601.516,1340 610.543,1330.07 619.57,1319.57 628.597,1308.52 637.624,1296.89 646.651,1284.71 655.678,1271.95 664.705,1258.64 673.732,1244.78 682.759,1230.36 691.786,1215.41 700.813,1199.94 709.84,1183.94 718.867,1167.44 727.894,1150.46 736.921,1133 745.948,1115.09 754.976,1096.75 764.003,1077.99 773.03,1058.83 782.057,1039.31 791.084,1019.43 800.111,999.232 809.138,978.732 818.165,957.957 827.192,936.933 836.219,915.686 845.246,894.245 854.273,872.636 863.3,850.886 872.327,829.024 881.354,807.078 890.381,785.075 899.408,763.044 908.435,741.013 917.462,719.01 926.489,697.061 935.516,675.195 944.543,653.438 953.57,631.817 962.597,610.358 971.624,589.086 980.651,568.027 989.678,547.205 998.705,526.643 1007.73,506.365 1016.76,486.392 1025.79,466.747 1034.81,447.451 1043.84,428.523 1052.87,409.982 1061.89,391.846 1070.92,374.134 1079.95,356.861 1088.97,340.044 1098,323.696 1107.03,307.832 1116.06,292.464 1125.08,277.605 1134.11,263.265 1143.14,249.454 1152.16,236.182 1161.19,223.457 1170.22,211.287 1179.24,199.677 1188.27,188.633 1197.3,178.161 1206.33,168.263 1215.35,158.943 1224.38,150.204 1233.41,142.046 1242.43,134.47 1251.46,127.476 1260.49,121.064 1269.51,115.231 1278.54,109.975 1287.57,105.294 1296.6,101.184 1305.62,97.6411 1314.65,94.6597 1323.68,92.235 1332.7,90.3609 1341.73,89.0311 1350.76,88.2387 1359.79,87.9763 1368.81,88.236 1377.84,89.0097 1386.87,90.2887 1395.89,92.064 1404.92,94.3263 1413.95,97.0659 1422.97,100.273 1432,103.937 1441.03,108.048 1450.06,112.595 1459.08,117.566 1468.11,122.952 1477.14,128.741 1486.16,134.921 1495.19,141.481 1504.22,148.409 1513.24,155.694 1522.27,163.324 1531.3,171.287 1540.33,179.571 1549.35,188.165 1558.38,197.056 1567.41,206.234 1576.43,215.685 1585.46,225.399 1594.49,235.364 1603.51,245.568 1612.54,255.999 1621.57,266.647 1630.6,277.501 1639.62,288.548 1648.65,299.778 1657.68,311.18 1666.7,322.743 1675.73,334.458 1684.76,346.312 1693.78,358.297 1702.81,370.401 1711.84,382.616 1720.87,394.931 1729.89,407.337 1738.92,419.825 1747.95,432.385 1756.97,445.009 1766,457.687 1775.03,470.412 1784.05,483.176 1793.08,495.969 1802.11,508.784 1811.14,521.614 1820.16,534.451 1829.19,547.288 1838.22,560.118 1847.24,572.934 1856.27,585.73 1865.3,598.5 1874.32,611.236 1883.35,623.934 1892.38,636.587 1901.41,649.19 1910.43,661.739 1919.46,674.227 1928.49,686.65 1937.51,699.003 1946.54,711.282 1955.57,723.483 1964.59,735.601 1973.62,747.633 1982.65,759.574 1991.68,771.422 2000.7,783.173 2009.73,794.824 2018.76,806.373 2027.78,817.815 2036.81,829.148 2045.84,840.371 2054.86,851.481 2063.89,862.475 2072.92,873.352 2081.95,884.109 2090.97,894.746 2100,905.26 2109.03,915.65 2118.05,925.914 2127.08,936.053 2136.11,946.064 2145.13,955.946 2154.16,965.699 2163.19,975.323 2172.22,984.815 2181.24,994.177 2190.27,1003.41 2199.3,1012.51 2208.32,1021.47 2217.35,1030.31 2226.38,1039.01 2235.4,1047.59 2244.43,1056.03 2253.46,1064.34 2262.49,1072.51 2271.51,1080.56 2280.54,1088.48 2289.57,1096.27 2298.59,1103.93 2307.62,1111.46 2316.65,1118.86 2325.67,1126.14 2334.7,1133.29 2343.73,1140.32 2352.76,1147.22 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M2011.46 198.898 L2280.54 198.898 L2280.54 95.2176 L2011.46 95.2176  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2011.46,198.898 2280.54,198.898 2280.54,95.2176 2011.46,95.2176 2011.46,198.898 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2035.53,147.058 2179.97,147.058 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M2217.88 166.745 Q2216.07 171.375 2214.36 172.787 Q2212.65 174.199 2209.78 174.199 L2206.38 174.199 L2206.38 170.634 L2208.88 170.634 Q2210.63 170.634 2211.61 169.8 Q2212.58 168.967 2213.76 165.865 L2214.52 163.921 L2204.04 138.412 L2208.55 138.412 L2216.65 158.689 L2224.76 138.412 L2229.27 138.412 L2217.88 166.745 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2236.56 160.402 L2244.2 160.402 L2244.2 134.037 L2235.89 135.703 L2235.89 131.444 L2244.15 129.778 L2248.83 129.778 L2248.83 160.402 L2256.47 160.402 L2256.47 164.338 L2236.56 164.338 L2236.56 160.402 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"memory/","page":"Transitions with Memory","title":"Transitions with Memory","text":"Then that process is interrupted, maybe because the machinery is required for a different process with higher priority, and then we restart the industrial process. What is the distribution of the restarted process, assuming it picks up where it left off? It's shifted to the left. Shifting the distribution doesn't just translate the pdf. It rescales the pdf so that the area under the curve is one and also changes the shape.","category":"page"},{"location":"memory/","page":"Transitions with Memory","title":"Transitions with Memory","text":"survival = ccdf\nhazard(dist, x) = pdf(dist, x) / survival(dist, x)\nconditional_survival(dist, intermediate, x) = survival(dist, x) / survival(dist, intermediate)\nshiftpdf(dist, intermediate, x) = hazard(dist, x + intermediate) * conditional_survival(dist, intermediate, x + intermediate)\nremembered_age = 5.1\nplot(x, shiftpdf.(bottler, remembered_age, x), xlims=(0.0, 12.0))","category":"page"},{"location":"memory/","page":"Transitions with Memory","title":"Transitions with Memory","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip170\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip170)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip171\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip170)\" d=\"M186.274 1486.45 L2352.76 1486.45 L2352.76 47.2441 L186.274 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip172\">\n    <rect x=\"186\" y=\"47\" width=\"2167\" height=\"1440\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"186.274,1486.45 186.274,47.2441 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"547.354,1486.45 547.354,47.2441 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"908.435,1486.45 908.435,47.2441 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1269.51,1486.45 1269.51,47.2441 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1630.6,1486.45 1630.6,47.2441 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1991.68,1486.45 1991.68,47.2441 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2352.76,1486.45 2352.76,47.2441 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"186.274,1486.45 2352.76,1486.45 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"186.274,1486.45 186.274,1467.55 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"547.354,1486.45 547.354,1467.55 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"908.435,1486.45 908.435,1467.55 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1269.51,1486.45 1269.51,1467.55 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1630.6,1486.45 1630.6,1467.55 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1991.68,1486.45 1991.68,1467.55 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2352.76,1486.45 2352.76,1467.55 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M186.274 1517.37 Q182.663 1517.37 180.834 1520.93 Q179.029 1524.47 179.029 1531.6 Q179.029 1538.71 180.834 1542.27 Q182.663 1545.82 186.274 1545.82 Q189.908 1545.82 191.714 1542.27 Q193.542 1538.71 193.542 1531.6 Q193.542 1524.47 191.714 1520.93 Q189.908 1517.37 186.274 1517.37 M186.274 1513.66 Q192.084 1513.66 195.14 1518.27 Q198.218 1522.85 198.218 1531.6 Q198.218 1540.33 195.14 1544.94 Q192.084 1549.52 186.274 1549.52 Q180.464 1549.52 177.385 1544.94 Q174.33 1540.33 174.33 1531.6 Q174.33 1522.85 177.385 1518.27 Q180.464 1513.66 186.274 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M542.007 1544.91 L558.326 1544.91 L558.326 1548.85 L536.382 1548.85 L536.382 1544.91 Q539.044 1542.16 543.627 1537.53 Q548.234 1532.88 549.414 1531.53 Q551.66 1529.01 552.539 1527.27 Q553.442 1525.51 553.442 1523.82 Q553.442 1521.07 551.498 1519.33 Q549.577 1517.6 546.475 1517.6 Q544.276 1517.6 541.822 1518.36 Q539.391 1519.13 536.614 1520.68 L536.614 1515.95 Q539.438 1514.82 541.891 1514.24 Q544.345 1513.66 546.382 1513.66 Q551.752 1513.66 554.947 1516.35 Q558.141 1519.03 558.141 1523.52 Q558.141 1525.65 557.331 1527.57 Q556.544 1529.47 554.438 1532.07 Q553.859 1532.74 550.757 1535.95 Q547.655 1539.15 542.007 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M911.444 1518.36 L899.638 1536.81 L911.444 1536.81 L911.444 1518.36 M910.217 1514.29 L916.097 1514.29 L916.097 1536.81 L921.027 1536.81 L921.027 1540.7 L916.097 1540.7 L916.097 1548.85 L911.444 1548.85 L911.444 1540.7 L895.842 1540.7 L895.842 1536.19 L910.217 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1269.92 1529.7 Q1266.77 1529.7 1264.92 1531.86 Q1263.09 1534.01 1263.09 1537.76 Q1263.09 1541.49 1264.92 1543.66 Q1266.77 1545.82 1269.92 1545.82 Q1273.07 1545.82 1274.9 1543.66 Q1276.75 1541.49 1276.75 1537.76 Q1276.75 1534.01 1274.9 1531.86 Q1273.07 1529.7 1269.92 1529.7 M1279.2 1515.05 L1279.2 1519.31 Q1277.44 1518.48 1275.64 1518.04 Q1273.86 1517.6 1272.1 1517.6 Q1267.47 1517.6 1265.01 1520.72 Q1262.58 1523.85 1262.23 1530.17 Q1263.6 1528.15 1265.66 1527.09 Q1267.72 1526 1270.2 1526 Q1275.41 1526 1278.42 1529.17 Q1281.45 1532.32 1281.45 1537.76 Q1281.45 1543.08 1278.3 1546.3 Q1275.15 1549.52 1269.92 1549.52 Q1263.92 1549.52 1260.75 1544.94 Q1257.58 1540.33 1257.58 1531.6 Q1257.58 1523.41 1261.47 1518.55 Q1265.36 1513.66 1271.91 1513.66 Q1273.67 1513.66 1275.45 1514.01 Q1277.26 1514.36 1279.2 1515.05 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1630.6 1532.44 Q1627.26 1532.44 1625.34 1534.22 Q1623.44 1536 1623.44 1539.13 Q1623.44 1542.25 1625.34 1544.03 Q1627.26 1545.82 1630.6 1545.82 Q1633.93 1545.82 1635.85 1544.03 Q1637.77 1542.23 1637.77 1539.13 Q1637.77 1536 1635.85 1534.22 Q1633.95 1532.44 1630.6 1532.44 M1625.92 1530.45 Q1622.91 1529.7 1621.22 1527.64 Q1619.55 1525.58 1619.55 1522.62 Q1619.55 1518.48 1622.49 1516.07 Q1625.46 1513.66 1630.6 1513.66 Q1635.76 1513.66 1638.7 1516.07 Q1641.64 1518.48 1641.64 1522.62 Q1641.64 1525.58 1639.95 1527.64 Q1638.28 1529.7 1635.29 1530.45 Q1638.67 1531.23 1640.55 1533.52 Q1642.45 1535.82 1642.45 1539.13 Q1642.45 1544.15 1639.37 1546.83 Q1636.31 1549.52 1630.6 1549.52 Q1624.88 1549.52 1621.8 1546.83 Q1618.74 1544.15 1618.74 1539.13 Q1618.74 1535.82 1620.64 1533.52 Q1622.54 1531.23 1625.92 1530.45 M1624.21 1523.06 Q1624.21 1525.75 1625.87 1527.25 Q1627.56 1528.76 1630.6 1528.76 Q1633.6 1528.76 1635.29 1527.25 Q1637.01 1525.75 1637.01 1523.06 Q1637.01 1520.38 1635.29 1518.87 Q1633.6 1517.37 1630.6 1517.37 Q1627.56 1517.37 1625.87 1518.87 Q1624.21 1520.38 1624.21 1523.06 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1966.36 1544.91 L1974 1544.91 L1974 1518.55 L1965.69 1520.21 L1965.69 1515.95 L1973.96 1514.29 L1978.63 1514.29 L1978.63 1544.91 L1986.27 1544.91 L1986.27 1548.85 L1966.36 1548.85 L1966.36 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2005.71 1517.37 Q2002.1 1517.37 2000.28 1520.93 Q1998.47 1524.47 1998.47 1531.6 Q1998.47 1538.71 2000.28 1542.27 Q2002.1 1545.82 2005.71 1545.82 Q2009.35 1545.82 2011.15 1542.27 Q2012.98 1538.71 2012.98 1531.6 Q2012.98 1524.47 2011.15 1520.93 Q2009.35 1517.37 2005.71 1517.37 M2005.71 1513.66 Q2011.53 1513.66 2014.58 1518.27 Q2017.66 1522.85 2017.66 1531.6 Q2017.66 1540.33 2014.58 1544.94 Q2011.53 1549.52 2005.71 1549.52 Q1999.9 1549.52 1996.83 1544.94 Q1993.77 1540.33 1993.77 1531.6 Q1993.77 1522.85 1996.83 1518.27 Q1999.9 1513.66 2005.71 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2328.24 1544.91 L2335.88 1544.91 L2335.88 1518.55 L2327.57 1520.21 L2327.57 1515.95 L2335.83 1514.29 L2340.51 1514.29 L2340.51 1544.91 L2348.15 1544.91 L2348.15 1548.85 L2328.24 1548.85 L2328.24 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2361.62 1544.91 L2377.94 1544.91 L2377.94 1548.85 L2356 1548.85 L2356 1544.91 Q2358.66 1542.16 2363.24 1537.53 Q2367.85 1532.88 2369.03 1531.53 Q2371.27 1529.01 2372.15 1527.27 Q2373.06 1525.51 2373.06 1523.82 Q2373.06 1521.07 2371.11 1519.33 Q2369.19 1517.6 2366.09 1517.6 Q2363.89 1517.6 2361.44 1518.36 Q2359.01 1519.13 2356.23 1520.68 L2356.23 1515.95 Q2359.05 1514.82 2361.51 1514.24 Q2363.96 1513.66 2366 1513.66 Q2371.37 1513.66 2374.56 1516.35 Q2377.76 1519.03 2377.76 1523.52 Q2377.76 1525.65 2376.95 1527.57 Q2376.16 1529.47 2374.05 1532.07 Q2373.47 1532.74 2370.37 1535.95 Q2367.27 1539.15 2361.62 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"186.274,1464.15 2352.76,1464.15 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"186.274,1104.72 2352.76,1104.72 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"186.274,745.293 2352.76,745.293 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"186.274,385.864 2352.76,385.864 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"186.274,1486.45 186.274,47.2441 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"186.274,1464.15 205.172,1464.15 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"186.274,1104.72 205.172,1104.72 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"186.274,745.293 205.172,745.293 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"186.274,385.864 205.172,385.864 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M62.9365 1449.95 Q59.3254 1449.95 57.4967 1453.52 Q55.6912 1457.06 55.6912 1464.19 Q55.6912 1471.29 57.4967 1474.86 Q59.3254 1478.4 62.9365 1478.4 Q66.5707 1478.4 68.3763 1474.86 Q70.205 1471.29 70.205 1464.19 Q70.205 1457.06 68.3763 1453.52 Q66.5707 1449.95 62.9365 1449.95 M62.9365 1446.25 Q68.7467 1446.25 71.8022 1450.85 Q74.8809 1455.44 74.8809 1464.19 Q74.8809 1472.91 71.8022 1477.52 Q68.7467 1482.1 62.9365 1482.1 Q57.1264 1482.1 54.0477 1477.52 Q50.9921 1472.91 50.9921 1464.19 Q50.9921 1455.44 54.0477 1450.85 Q57.1264 1446.25 62.9365 1446.25 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M83.0984 1475.55 L87.9827 1475.55 L87.9827 1481.43 L83.0984 1481.43 L83.0984 1475.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M108.168 1449.95 Q104.557 1449.95 102.728 1453.52 Q100.922 1457.06 100.922 1464.19 Q100.922 1471.29 102.728 1474.86 Q104.557 1478.4 108.168 1478.4 Q111.802 1478.4 113.608 1474.86 Q115.436 1471.29 115.436 1464.19 Q115.436 1457.06 113.608 1453.52 Q111.802 1449.95 108.168 1449.95 M108.168 1446.25 Q113.978 1446.25 117.033 1450.85 Q120.112 1455.44 120.112 1464.19 Q120.112 1472.91 117.033 1477.52 Q113.978 1482.1 108.168 1482.1 Q102.358 1482.1 99.2789 1477.52 Q96.2234 1472.91 96.2234 1464.19 Q96.2234 1455.44 99.2789 1450.85 Q102.358 1446.25 108.168 1446.25 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M138.33 1449.95 Q134.719 1449.95 132.89 1453.52 Q131.084 1457.06 131.084 1464.19 Q131.084 1471.29 132.89 1474.86 Q134.719 1478.4 138.33 1478.4 Q141.964 1478.4 143.769 1474.86 Q145.598 1471.29 145.598 1464.19 Q145.598 1457.06 143.769 1453.52 Q141.964 1449.95 138.33 1449.95 M138.33 1446.25 Q144.14 1446.25 147.195 1450.85 Q150.274 1455.44 150.274 1464.19 Q150.274 1472.91 147.195 1477.52 Q144.14 1482.1 138.33 1482.1 Q132.519 1482.1 129.441 1477.52 Q126.385 1472.91 126.385 1464.19 Q126.385 1455.44 129.441 1450.85 Q132.519 1446.25 138.33 1446.25 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M63.9319 1090.52 Q60.3208 1090.52 58.4921 1094.09 Q56.6865 1097.63 56.6865 1104.76 Q56.6865 1111.86 58.4921 1115.43 Q60.3208 1118.97 63.9319 1118.97 Q67.5661 1118.97 69.3717 1115.43 Q71.2004 1111.86 71.2004 1104.76 Q71.2004 1097.63 69.3717 1094.09 Q67.5661 1090.52 63.9319 1090.52 M63.9319 1086.82 Q69.742 1086.82 72.7976 1091.42 Q75.8763 1096.01 75.8763 1104.76 Q75.8763 1113.48 72.7976 1118.09 Q69.742 1122.67 63.9319 1122.67 Q58.1217 1122.67 55.043 1118.09 Q51.9875 1113.48 51.9875 1104.76 Q51.9875 1096.01 55.043 1091.42 Q58.1217 1086.82 63.9319 1086.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M84.0938 1116.12 L88.978 1116.12 L88.978 1122 L84.0938 1122 L84.0938 1116.12 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M109.163 1090.52 Q105.552 1090.52 103.723 1094.09 Q101.918 1097.63 101.918 1104.76 Q101.918 1111.86 103.723 1115.43 Q105.552 1118.97 109.163 1118.97 Q112.797 1118.97 114.603 1115.43 Q116.432 1111.86 116.432 1104.76 Q116.432 1097.63 114.603 1094.09 Q112.797 1090.52 109.163 1090.52 M109.163 1086.82 Q114.973 1086.82 118.029 1091.42 Q121.107 1096.01 121.107 1104.76 Q121.107 1113.48 118.029 1118.09 Q114.973 1122.67 109.163 1122.67 Q103.353 1122.67 100.274 1118.09 Q97.2187 1113.48 97.2187 1104.76 Q97.2187 1096.01 100.274 1091.42 Q103.353 1086.82 109.163 1086.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M129.371 1087.44 L147.728 1087.44 L147.728 1091.38 L133.654 1091.38 L133.654 1099.85 Q134.672 1099.5 135.691 1099.34 Q136.709 1099.16 137.728 1099.16 Q143.515 1099.16 146.894 1102.33 Q150.274 1105.5 150.274 1110.92 Q150.274 1116.49 146.802 1119.6 Q143.33 1122.67 137.01 1122.67 Q134.834 1122.67 132.566 1122.3 Q130.32 1121.93 127.913 1121.19 L127.913 1116.49 Q129.996 1117.63 132.219 1118.18 Q134.441 1118.74 136.918 1118.74 Q140.922 1118.74 143.26 1116.63 Q145.598 1114.53 145.598 1110.92 Q145.598 1107.3 143.26 1105.2 Q140.922 1103.09 136.918 1103.09 Q135.043 1103.09 133.168 1103.51 Q131.316 1103.92 129.371 1104.8 L129.371 1087.44 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M62.9365 731.092 Q59.3254 731.092 57.4967 734.657 Q55.6912 738.198 55.6912 745.328 Q55.6912 752.435 57.4967 755.999 Q59.3254 759.541 62.9365 759.541 Q66.5707 759.541 68.3763 755.999 Q70.205 752.435 70.205 745.328 Q70.205 738.198 68.3763 734.657 Q66.5707 731.092 62.9365 731.092 M62.9365 727.388 Q68.7467 727.388 71.8022 731.995 Q74.8809 736.578 74.8809 745.328 Q74.8809 754.055 71.8022 758.661 Q68.7467 763.245 62.9365 763.245 Q57.1264 763.245 54.0477 758.661 Q50.9921 754.055 50.9921 745.328 Q50.9921 736.578 54.0477 731.995 Q57.1264 727.388 62.9365 727.388 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M83.0984 756.694 L87.9827 756.694 L87.9827 762.573 L83.0984 762.573 L83.0984 756.694 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M98.978 758.638 L106.617 758.638 L106.617 732.273 L98.3067 733.939 L98.3067 729.68 L106.571 728.013 L111.246 728.013 L111.246 758.638 L118.885 758.638 L118.885 762.573 L98.978 762.573 L98.978 758.638 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M138.33 731.092 Q134.719 731.092 132.89 734.657 Q131.084 738.198 131.084 745.328 Q131.084 752.435 132.89 755.999 Q134.719 759.541 138.33 759.541 Q141.964 759.541 143.769 755.999 Q145.598 752.435 145.598 745.328 Q145.598 738.198 143.769 734.657 Q141.964 731.092 138.33 731.092 M138.33 727.388 Q144.14 727.388 147.195 731.995 Q150.274 736.578 150.274 745.328 Q150.274 754.055 147.195 758.661 Q144.14 763.245 138.33 763.245 Q132.519 763.245 129.441 758.661 Q126.385 754.055 126.385 745.328 Q126.385 736.578 129.441 731.995 Q132.519 727.388 138.33 727.388 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M63.9319 371.662 Q60.3208 371.662 58.4921 375.227 Q56.6865 378.769 56.6865 385.898 Q56.6865 393.005 58.4921 396.57 Q60.3208 400.111 63.9319 400.111 Q67.5661 400.111 69.3717 396.57 Q71.2004 393.005 71.2004 385.898 Q71.2004 378.769 69.3717 375.227 Q67.5661 371.662 63.9319 371.662 M63.9319 367.959 Q69.742 367.959 72.7976 372.565 Q75.8763 377.148 75.8763 385.898 Q75.8763 394.625 72.7976 399.232 Q69.742 403.815 63.9319 403.815 Q58.1217 403.815 55.043 399.232 Q51.9875 394.625 51.9875 385.898 Q51.9875 377.148 55.043 372.565 Q58.1217 367.959 63.9319 367.959 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M84.0938 397.264 L88.978 397.264 L88.978 403.144 L84.0938 403.144 L84.0938 397.264 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M99.9733 399.209 L107.612 399.209 L107.612 372.843 L99.3021 374.51 L99.3021 370.25 L107.566 368.584 L112.242 368.584 L112.242 399.209 L119.881 399.209 L119.881 403.144 L99.9733 403.144 L99.9733 399.209 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M129.371 368.584 L147.728 368.584 L147.728 372.519 L133.654 372.519 L133.654 380.991 Q134.672 380.644 135.691 380.482 Q136.709 380.297 137.728 380.297 Q143.515 380.297 146.894 383.468 Q150.274 386.639 150.274 392.056 Q150.274 397.634 146.802 400.736 Q143.33 403.815 137.01 403.815 Q134.834 403.815 132.566 403.445 Q130.32 403.074 127.913 402.333 L127.913 397.634 Q129.996 398.769 132.219 399.324 Q134.441 399.88 136.918 399.88 Q140.922 399.88 143.26 397.773 Q145.598 395.667 145.598 392.056 Q145.598 388.445 143.26 386.338 Q140.922 384.232 136.918 384.232 Q135.043 384.232 133.168 384.648 Q131.316 385.065 129.371 385.945 L129.371 368.584 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip172)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"186.274,310.817 195.301,295.241 204.328,280.18 213.355,265.645 222.382,251.647 231.409,238.195 240.436,225.297 249.463,212.961 258.49,201.194 267.517,190 276.544,179.385 285.571,169.353 294.598,159.907 303.625,151.049 312.652,142.78 321.679,135.101 330.706,128.012 339.733,121.513 348.76,115.601 357.787,110.274 366.814,105.53 375.841,101.364 384.868,97.7723 393.895,94.7505 402.922,92.2928 411.949,90.3933 420.976,89.0454 430.003,88.2423 439.03,87.9763 448.057,88.2396 457.084,89.0237 466.111,90.3201 475.138,92.1195 484.165,94.4125 493.192,97.1893 502.219,100.44 511.246,104.154 520.273,108.32 529.3,112.929 538.327,117.968 547.354,123.427 556.381,129.294 565.408,135.558 574.435,142.207 583.462,149.23 592.489,156.614 601.516,164.347 610.543,172.418 619.57,180.815 628.597,189.525 637.624,198.537 646.651,207.839 655.678,217.419 664.705,227.265 673.732,237.365 682.759,247.708 691.786,258.281 700.813,269.074 709.84,280.074 718.867,291.271 727.894,302.654 736.921,314.211 745.948,325.931 754.976,337.805 764.003,349.82 773.03,361.967 782.057,374.236 791.084,386.617 800.111,399.099 809.138,411.674 818.165,424.331 827.192,437.062 836.219,449.857 845.246,462.708 854.273,475.606 863.3,488.542 872.327,501.509 881.354,514.498 890.381,527.503 899.408,540.514 908.435,553.525 917.462,566.53 926.489,579.52 935.516,592.489 944.543,605.432 953.57,618.341 962.597,631.211 971.624,644.037 980.651,656.811 989.678,669.53 998.705,682.188 1007.73,694.779 1016.76,707.3 1025.79,719.746 1034.81,732.112 1043.84,744.395 1052.87,756.59 1061.89,768.694 1070.92,780.703 1079.95,792.614 1088.97,804.423 1098,816.128 1107.03,827.725 1116.06,839.213 1125.08,850.588 1134.11,861.849 1143.14,872.992 1152.16,884.016 1161.19,894.92 1170.22,905.701 1179.24,916.358 1188.27,926.889 1197.3,937.293 1206.33,947.569 1215.35,957.716 1224.38,967.732 1233.41,977.618 1242.43,987.372 1251.46,996.994 1260.49,1006.48 1269.51,1015.84 1278.54,1025.06 1287.57,1034.15 1296.6,1043.11 1305.62,1051.93 1314.65,1060.62 1323.68,1069.17 1332.7,1077.59 1341.73,1085.88 1350.76,1094.04 1359.79,1102.07 1368.81,1109.96 1377.84,1117.72 1386.87,1125.36 1395.89,1132.86 1404.92,1140.24 1413.95,1147.49 1422.97,1154.61 1432,1161.6 1441.03,1168.47 1450.06,1175.22 1459.08,1181.85 1468.11,1188.35 1477.14,1194.73 1486.16,1201 1495.19,1207.14 1504.22,1213.17 1513.24,1219.09 1522.27,1224.88 1531.3,1230.57 1540.33,1236.15 1549.35,1241.61 1558.38,1246.96 1567.41,1252.21 1576.43,1257.35 1585.46,1262.39 1594.49,1267.33 1603.51,1272.16 1612.54,1276.89 1621.57,1281.52 1630.6,1286.06 1639.62,1290.49 1648.65,1294.84 1657.68,1299.09 1666.7,1303.25 1675.73,1307.32 1684.76,1311.3 1693.78,1315.19 1702.81,1318.99 1711.84,1322.71 1720.87,1326.35 1729.89,1329.91 1738.92,1333.38 1747.95,1336.78 1756.97,1340.1 1766,1343.34 1775.03,1346.51 1784.05,1349.61 1793.08,1352.63 1802.11,1355.58 1811.14,1358.47 1820.16,1361.28 1829.19,1364.03 1838.22,1366.71 1847.24,1369.33 1856.27,1371.88 1865.3,1374.38 1874.32,1376.81 1883.35,1379.18 1892.38,1381.5 1901.41,1383.75 1910.43,1385.96 1919.46,1388.11 1928.49,1390.2 1937.51,1392.24 1946.54,1394.23 1955.57,1396.17 1964.59,1398.07 1973.62,1399.91 1982.65,1401.71 1991.68,1403.46 2000.7,1405.16 2009.73,1406.83 2018.76,1408.45 2027.78,1410.02 2036.81,1411.56 2045.84,1413.06 2054.86,1414.51 2063.89,1415.93 2072.92,1417.31 2081.95,1418.66 2090.97,1419.97 2100,1421.24 2109.03,1422.48 2118.05,1423.69 2127.08,1424.86 2136.11,1426.01 2145.13,1427.12 2154.16,1428.2 2163.19,1429.25 2172.22,1430.28 2181.24,1431.27 2190.27,1432.24 2199.3,1433.18 2208.32,1434.1 2217.35,1434.99 2226.38,1435.86 2235.4,1436.7 2244.43,1437.52 2253.46,1438.31 2262.49,1439.09 2271.51,1439.84 2280.54,1440.57 2289.57,1441.28 2298.59,1441.97 2307.62,1442.64 2316.65,1443.29 2325.67,1443.92 2334.7,1444.54 2343.73,1445.14 2352.76,1445.72 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M2011.46 198.898 L2280.54 198.898 L2280.54 95.2176 L2011.46 95.2176  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2011.46,198.898 2280.54,198.898 2280.54,95.2176 2011.46,95.2176 2011.46,198.898 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2035.53,147.058 2179.97,147.058 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M2217.88 166.745 Q2216.07 171.375 2214.36 172.787 Q2212.65 174.199 2209.78 174.199 L2206.38 174.199 L2206.38 170.634 L2208.88 170.634 Q2210.63 170.634 2211.61 169.8 Q2212.58 168.967 2213.76 165.865 L2214.52 163.921 L2204.04 138.412 L2208.55 138.412 L2216.65 158.689 L2224.76 138.412 L2229.27 138.412 L2217.88 166.745 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2236.56 160.402 L2244.2 160.402 L2244.2 134.037 L2235.89 135.703 L2235.89 131.444 L2244.15 129.778 L2248.83 129.778 L2248.83 160.402 L2256.47 160.402 L2256.47 164.338 L2236.56 164.338 L2236.56 160.402 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"memory/","page":"Transitions with Memory","title":"Transitions with Memory","text":"Another way to think about transitions with memory is that the zero-time of the process is now in the past. For CompetingClocks, that zero-time is called the enabling time. When we enable a transition, we give the enabling time as an absolute time in the simulation.","category":"page"},{"location":"memory/","page":"Transitions with Memory","title":"Transitions with Memory","text":"enablingtime = currenttime - remembered_age\nenable!(sampler, clock, distribution, enablingtime, currenttime, RNG)`","category":"page"},{"location":"memory/","page":"Transitions with Memory","title":"Transitions with Memory","text":"If a simulation wants to include transitions that have memory, that simulation needs to store the total time a transition has been enabled and then use that to set the enabling time when it restarts a transtition.","category":"page"},{"location":"memory/#References","page":"Transitions with Memory","title":"References","text":"","category":"section"},{"location":"memory/","page":"Transitions with Memory","title":"Transitions with Memory","text":"[Zimmerman:2007] Zimmermann, Armin. Stochastic discrete event systems. Springer, Berlin Heidelberg New York, 2007.","category":"page"},{"location":"memory/","page":"Transitions with Memory","title":"Transitions with Memory","text":"","category":"page"},{"location":"memory/","page":"Transitions with Memory","title":"Transitions with Memory","text":"This page was generated using Literate.jl.","category":"page"},{"location":"background/#Markov-Processes","page":"Markov Processes","title":"Markov Processes","text":"","category":"section"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"This addresses two main points, how to specify a model for the library using distributions defined by hazards and why such a specification, with its initial conditions, is sufficient to define the trajectory for a model.","category":"page"},{"location":"background/#The-Hazard-from-Survival-Analysis","page":"Markov Processes","title":"The Hazard from Survival Analysis","text":"","category":"section"},{"location":"background/#Discrete-case","page":"Markov Processes","title":"Discrete case","text":"","category":"section"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"The discrete case is much easier to understand than the continuous case because it can be explained without employing any results from calculus. Throughout this section, bfX will be assumed to real-valued random variable. For example, bfX could represent latent periods for measles.","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"It frequently happens that random samples of the real valued variables such as bfX are actually analyzed on a discrete scale. For example Stocks' data on latent periods of measles in latent_period is based on daily visits by patients [Stocks:1931].","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"The (cumulative) distribution of bfX is defined as","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"F_X(k) = mathcalPx le k","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"assuming F_X(infty) = 1. The density can be expressed as the difference in adjacent values of the distribution","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"beginaligned\nf_X(k)  =  mathcalPX=k \n          =  mathcalPXle k - mathcalPX le k-1  \n      =  F_X(k) - F_X(k-1)\nendaligned","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"For Stocks' data in latent_period, the density at day k should be interpreted as the probability of the appearance of symptoms since the previous visit on day k-1.","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"The hazard is defined as the conditional probability that the value of a random selection from bfX equals k given it this value is already known to exceed k-1. Using the usual rules for computing conditional probabilities, the hazard is given by the following ratio","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"beginaligned\nh_X(k)  =  mathcalPX=k  k-1X \n          =  fracf_X(k)1 - F_X(k-1)\nendaligned","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"In the case of Stocks' data, the hazards shown in latent_period_hazard would correspond to the probability of symptoms appearing at day k given that the patient had not displayed symptoms at any previous visit. As time goes on, patients who have already developed symptoms effectively reduce the pool of patients in the study who are still in a state where they might first present symptoms on day k. This is the origin of the term in the denominator.","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"(Image: Figure 2. Estimated hazards of latent periods for measles in London circa 1931)","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"On any given day, the hazard for latent periods can be interpreted as the rate of appearance of symptoms per asymptomatic (infected but not yet symptomatic) patient per day. For example, the hazard inferred from the Weibull distribution is approximately 015 on day 10. In other words, 15% of the patients that are asymptomatic on day 9 will present symptoms when examined on day 10.","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"(Image: Figure 3. Each participant of the Stocks study could either become symptomatic or leave the study. Focusing on the hazard accounts for the effect of those who leave.)","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"This interpretation is extremely important because it connects a hazard with a rate for a specific process, and that rate has well defined units of measurement. In addition, it clarifies how rate parameters should be estimated from observational data. Failure to account for the shrinking pool over time is commonplace. In this case it would lead to a systematic errors in the estimation of process rates, especially at long times when the depletion effect is most pronounced.","category":"page"},{"location":"background/#Continuous-case","page":"Markov Processes","title":"Continuous case","text":"","category":"section"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"The random variable bfX is again assumed to be a real-valued, but the measurements will not be binned as above. The cumulative distribution not an integer k but a continuous time interval, tau.","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"F_X(tau)=Pxletau","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"assuming F_X(infty)=1. The density is the derivative of the cumulative distribution. The concept of the hazard is part of survival analysis, where survival is G_X(tau)=1-F_X(tau), and represents the probability the random variable, a time interval, is longer than tau. One expression for the hazard is that the density of the random variable is equal to the probability it survives to a time tau multiplied by the hazard rate for firing at time tau, or, in probabilities,","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"Ptauxletau+dtaudtau=PtauxPtauxletau+dtau+dtautaux","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"Writing this same equation with its almost-sure equivalents defines the continuous hazard, lambda_X(tau),","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"f_X(tau)=G_X(tau)lambda_X(tau)","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"This is a rearrangement away from the definition of the discrete case.","category":"page"},{"location":"background/#Finite-State-Machines-Generate-Trajectories","page":"Markov Processes","title":"Finite State Machines Generate Trajectories","text":"","category":"section"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"This library accepts a specification of a model in terms of hazards, an initial condition, and produces trajectories. This set of high-level steps to simulation (specify, initialize, step) has a well-defined abstraction called a finite state machine. It isn't the finite state machine familiar to programmers but a mathematical model, coming from category theory, for a particularly simple class of computing systems. At a conceptual level, a finite state machine can be considered a black box that receives a sequence of input signal and produces an output signal for each input signal. Internally, the black box maintains a state -- some sort of finite summary representation of the sequence of input signals encountered so far. For each input signal, the box performs two operations. In both cases, the decision depends on the current internal state and the identity of the input signal just received.","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"Chose next state\nGenerate output token","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"It is helpful to view the finite state machine layer as a mechanism to simulate a Markov chain or Markov process.","category":"page"},{"location":"background/#Markov-Chain-for-Discrete-Time-Trajectories","page":"Markov Processes","title":"Markov Chain for Discrete-Time Trajectories","text":"","category":"section"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"Roughly speaking, a Markov chain, bfX, is a probabilistic system that makes random jumps among a finite set of distinct states, s_0 s_1 s_2 ldots s_N such that the probability of choosing the next state, X_n+1 depends only on the current state, X_n. In mathematical terms, the conditional probabilities for state transitions must satisfy","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"mathcalPX_n+1 = s_l  X_0=s_i X_1=s_j ldots X_n=s_k =\nmathcalPX_n+1 = s_l  X_n=s_k","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"Since more distant history does not affect future behavior, Markov chains are sometimes characterized as memoryless.","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"This relation can be iterated to compute the conditional probabilities for multiple time steps","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"mathcalPX_n+2 = s_m  X_n=s_k = sum_l mathcalPX_n+2 = s_m \nX_n+1=s_l mathcalPX_n+1 = s_l  X_n=s_k","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"Note, the transition probabilities mathcalPX_n+1 = s_l  X_n=s_k may depend on time (through the index n). These so-called time-inhomogeneous Markov chains arise when the system of interest is driven by external entities. Chains with time-independent conditional transition probabilities are called time-homogeneous. The dynamics of a time-homogeneous Markov chain is completely determined by the initial state and the transition probabilities. All processes considered in this document are time-homogeneous.","category":"page"},{"location":"background/#Markov-Process-for-Continuous-Time-Trajectories","page":"Markov Processes","title":"Markov Process for Continuous-Time Trajectories","text":"","category":"section"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"A Markov process is a generalization of the Markov chain such that time is viewed as continuous rather than discrete. As a result, it makes sense to record the times at which the transitions occur as part of the process itself.","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"The first step in this generalization is to define a stochastic process bfY that includes the transition times as well as the state, Y_n = (s_jt_n).","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"The second step is to treat time on a truly continuous basis by defining a new stochastic process, bfZ, from bfY by the rule Z_t = s_k in the time interval t_n le t  t_n+1 given Y_n = (s_k t_n) . In other words, bfZ_t is a piecewise constant version of bfY as shown in piecewise_Z.","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"(Image: Figure 4. **Realization of a continuous time stochastic process and associated Markov chain.**)","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"A realization of the process bfY is defined by the closed diamonds (left end points) alone. Similarly, a realization of the process bfZ_t is illustrated by the closed diamonds and line segments. The closed and open diamonds at the ends of the line segment indicate that the segments include the left but not the right end points.","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"The memoryless property for Markov processes is considerably more delicate than in the case of Markov chain because the time variable is continuous rather than discrete. In the case of bfY, the conditional probabilities for state transitions of must satisfy","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"mathcalPY_n+1 = (s_lt_n+1)  Y_0=(s_i t_0) Y_1=(s_j t_1)\nldots Y_n=(s_k t_n) =\nmathcalPY_n+1 = (s_l t_n+1)  Y_n=(s_k t_n)","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"The proper generalization of the requirement of time-homeogeneity stated previously for Markov chains is that joint probability be unchanged by uniform shifts in time","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"mathcalPZ_t+tau  Z_s+tau = mathcalPZ_t  Z_s ","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"for 0st and tau  0. Stochastic processes with shift invariant state transition probabilities are called stationary.","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"When we examined hazard rates above, we were examining the rate of transitions for a Markov process. The overall probability of the next state of the Markov process is called the core matrix,","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"mathcalPZ_t  Z_s =Q_ij(t_n+1-t_n)","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"indicating a state change between the states (s_is_j). The derivative of this is a rate,","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"q_ij(t_n+1-t_n)=fracdQ_ij(t_n+1-t_n)dt","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"which is a joint distribution over states and time intervals. Normalization for this quantity sums over possible states and future times,","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"1=int_0^infty sum_j  q_ij(s)ds","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"The survival, in terms of the core matrix, is","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"G_i(tau)=1-int_0^tau sum_k  q_ik(s)ds","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"This means our hazard is","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"lambda_ij(tau)=fracq_ij(tau)1-int_0^tau sum_k  q_ik(s)ds","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"For the measles example, the set of future states j of each individual include symptomatic and all the possible other ways an individual leaves the study, so you can think of j=mboxleft town. In practice, we build a hazard in two steps. First, count the probability over all time for any one eventual state j. This is the same stochastic probability pi_ij that is seen in Markov chains. Second, measure the distribution of times at which intervals enter each new state j, given that they are headed to that state. This is called the holding time, h_ij(tau), and is a conditional probability. Together, these two give us the core matrix,","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"q_ij(tau)=pi_ijh_ij(tau)","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"Note that h_ij(tau) is a density whose integral H_ij(tau) is a cumulative distribution. If we write the same equation in terms of probabilities, we see that it amounts to separating the Markov process into a marginal and conditional distribution.","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"beginaligned\nq_ij(tau)=fracddtauPZ_tZ_s \n=fracddtauPs_js_it_nPt_n-1-t_nletaus_is_jt_n \n   =  Ps_js_it_nfracddtauPt_n-1-t_nletaus_is_jt_n \n   =  pi_ijfracddtauH_ij(tau) \n   =  pi_ijh_ij(tau)\nendaligned","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"Choosing the other option for the marginal gives us the waiting time formulation for the core matrix. It corresponds to asking first what is the distribution of times at which the next event happens, no matter which event, and then asking which events are more likely given the time of the event.","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"beginaligned\nq_ij(tau)=fracddtauPZ_tZ_s \n=fracddtauPs_js_it_nt_n+1Pt_n-1-t_nletaus_it_n \n   =  fracddtau(Pi_ij(tau)W_i(tau)) \n   =  pi_ij(tau)fracddtauW_i(tau) \n   =  pi_ij(tau)w_i(tau)\nendaligned","category":"page"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"While the waiting time density w_i(tau), is the derivative of the waiting time, we won't end up needing to relation pi_ij(tau) to Pi_ij(tau) when finding trajectories or computing hazards, so the more complicated relationship won't be a problem.","category":"page"},{"location":"background/#References","page":"Markov Processes","title":"References","text":"","category":"section"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"[Stocks:1931]\tP. Stocks, “Incubation period of measles,” British Medical Journal 1(3655): p. 157.","category":"page"},{"location":"background/#Acknowledgement","page":"Markov Processes","title":"Acknowledgement","text":"","category":"section"},{"location":"background/","page":"Markov Processes","title":"Markov Processes","text":"This section comes was created by the Analytical Framework for Infectious Disease Dynamics (AFIDD) group at Cornell University in conjunction with the USDA Agricultural Research Service. This work was supported by the Science & Technology Directorate, Department of Homeland Security via interagency agreement no. HSHQDC-10-X-00138.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = CompetingClocks","category":"page"},{"location":"#CompetingClocks","page":"Home","title":"CompetingClocks","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CompetingClocks is a Julia library that samples distributions for discrete event systems (DES) in continuous time. It supports Exponential and non-Exponential distributions for events.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Many kinds of discrete event simulations need an efficient way to choose the next event in a simulation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Simulations of chemical reactions.\nQueueing theory models of networks, production, and computation.\nEpidemiological models of disease spread among individuals.\nVector-addition systems.\nGeneralized stochastic Petri nets.\nGeneralized semi-Markov Processes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This library supports these kinds of simulations by optimizing the choice of the next event in the system. In statistical terms, this library is a sampler for generalized semi-Markov processes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: CompetingClocks chooses the next transition but the simulation tracks state and changes to state.)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The background work for this library comes from Continuous-time, discrete-event simulation from counting processes, by Andrew Dolgert, 2016.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The library provides you with samplers. Each sampler has the same interface. Here, a distribution is a Distributions.ContinuousUnivariateDistribution, RNG is a random number generator, the key is some identifier (maybe an integer) for the event, and an enabling time is a zero-time for the given distribution.","category":"page"},{"location":"","page":"Home","title":"Home","text":"enable!(sampler, key, distribution, enabling time, current time, RNG)) - to start the clock on when an event will fire next.\ndisable!(sampler, key, current time) - to turn off an event so it can't fire.\nnext(sampler, current time, RNG) - to ask this library who fires next.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Different samplers are specialized for sampling more quickly and accurately for different applications. For instance, some applications have very few events enabled at once, while some have many. Some applications use only exponentially-distributed events, while some have a mix of distribution types. Because continuous-time discrete event systems can fire many events, the literature has focused on reducing the number of CPU instructions required to sample each event, and this library reflects that focus.","category":"page"},{"location":"#Why-Use-This?","page":"Home","title":"Why Use This?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If I make a quick simulation for myself, I sample distributions the moment an event is enabled and store the firing times in a priority queue. When would I switch to this library?","category":"page"},{"location":"","page":"Home","title":"Home","text":"I want to evaluate the effect of changing simulation parameters by comparing multiple runs with common random numbers.\nI'm looking at rare events, so I want to use splitting techniques and importance sampling.\nPerformance matters (which it often doesn't), so I would like to try different samplers on my problem.\nI want to focus on developing and testing my model not my simulation algorithm; CompetingClocks is designed and tested with care to ensure correctness.","category":"page"},{"location":"rules/#Rules-and-Guidelines","page":"Rules and Guidelines","title":"Rules and Guidelines","text":"","category":"section"},{"location":"rules/","page":"Rules and Guidelines","title":"Rules and Guidelines","text":"Even though this library is just handling a bag of event clocks, there are some rules for how to call the interface so that those clocks remain consistent. There are rules that keep the simulation running, and there are rules that guarantee repeatable simulations that have the correct statistical likelihood.","category":"page"},{"location":"rules/","page":"Rules and Guidelines","title":"Rules and Guidelines","text":"Some simulations treat events as maybe changing state, maybe not changing state.\nSome simulations think of an event as probabilistically changing state.\nFor a simulation in continuous time, only one event can happen at any time.","category":"page"},{"location":"samplers/#Understanding-Samplers","page":"Understanding Samplers","title":"Understanding Samplers","text":"","category":"section"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"From the perspective of someone who uses samplers in a simulation the features are important.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"Does this sampler work only for Exponential distributions or also non-Exponential distributions?\nDoes it support using atomic distributions, such as delta functions?\nDoes it take advantage of a GPU?\nDoes it put any restrictions on clock keys, such as requirements that they be sequential integers or that there be few keys?\nDoes it support variance reduction techniques, such as\nCommon random numbers\nantithetic variates\nimportance sampling\ncontrol variates?\nDoes it maintain accuracy for extreme distribution parameters or extreme draws?","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"Answers to these questions come from understanding how samplers are built. A modern description of samplers is in Marchetti [Marchetti:2019].","category":"page"},{"location":"samplers/#Series-of-choices","page":"Understanding Samplers","title":"Series of choices","text":"","category":"section"},{"location":"samplers/#Split-into-marginal-and-conditional","page":"Understanding Samplers","title":"Split into marginal and conditional","text":"","category":"section"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"CompetingClocks supports sampling from generalized semi-Markov processes (GSMP). Every sampler of GSMP is sampling a joint space of which clock event is next, E, and which time is next, T. The clock event is a discrete choice, and the time is a continuous choice. The first step to making a GSMP sampler is to split that joint distribution into marginals and conditionals.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"The reason to split the joint distribution is that, to sample any joint distribution, the usual method is to sample from the marginal of one random variable and then, given that value, sample the conditional of the other random variable. There are three ways to split a GSMP's joint distribution.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"beginaligned\nPET  = PEPTE \n = PETPT \n = min(PT_i)quad forall i\nendaligned","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"The first split is rarely, if ever, used because we specify GSMP simulations by the probability in time that each clock will have an event. It takes some work to calculate the marginal over events. If we use notation where lambda is the hazard, S is the survival, and t_0 is the current simulation time, then the equation an integral over a product including all enabled survivals.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"PE = int_t_0^infty lambda_i(t)prod_i S_i(t) dt","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"Instead, the second split is used all of the time for Exponential distributions. It's the choice that leads to the class of Direct methods. That's because the marginal over time is easy to calculate for exponentials.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"PT = 1 - expleft(-sum_i int_t_0^t lambda_i(s)dsright)","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"For exponential distributions, the hazard is constant, which makes the integral trivial. But note that Gillespie's first two papers on exact stochastic simulation included a derivation of this direct method for non-exponential distributions. As with the Exponential distribution, this can be done analytically for the Weibull distribution. For general distributions, the code just has to integrate the right-hand side of the above equation. This is the kind of operation GPUs love.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"The third split is a  way to sample the joint distribution by sampling from the conditional distribution of every enabled clock, which we call competing clocks. Define a random variate that is the minimum of those clocks, which defines the time to fire. This split matches our instinct that clocks are competing to fire next, and the first one wins.","category":"page"},{"location":"samplers/#Sampling-strategy","page":"Understanding Samplers","title":"Sampling strategy","text":"","category":"section"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"Now that we've chosen what random variables to sample, in what order, we choose a sampling strategy. By strategy, I mean one of","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"sampling by inversion, also known as inverse transform sampling\nsampling by rejection, also known as an acceptance-rejection method","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"These are broad methods for sampling, each of which has specific variants for particular distributions or, in the case of GSMP, for random variables defined by sets of competing distributions.","category":"page"},{"location":"samplers/#Specialize-for-the-distribution","page":"Understanding Samplers","title":"Specialize for the distribution","text":"","category":"section"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"Here, we would specialize, for instance, for having all Exponential distributions or all Weibull distributions. Stochastic simulation also introduces another wrinkle in sampling univariate distributions.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"In a simulation, it is often the case that a clock is disabled and enabled again, or that a clock that was enabled with one rate is re-enabled with a different rate because it depends on the state of the system, and that state has changed. As a result, we frequently sample clocks that are shifted left. A clock is shifted left when the traditional zero-time for the distribution is in the past. In this case, we have options for how we modify sampling the distribution.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"We could use a rejection method, where we sample the distribution and reject samples that are times in the past. We could sample by inversion and select random variates that correspond only to future times. We could sample by rejection and choose a known distribution whose hazard always exceeds that of the shifted distribution. There are lots of options, but none are built into the Julia Distributions package as ways to sample shifted distributions. It's a small complication that applies to stochastic simulation, and we handle it in the code.","category":"page"},{"location":"samplers/#Data-structures-and-algorithms","page":"Understanding Samplers","title":"Data structures and algorithms","text":"","category":"section"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"The next concern is how to express these sampling methods in code. Many of the well-known exact stochastic simulation (SSA) algorithms for chemical simulation are variations, not on how to sample the distribution, but on what data structures and algorithms to use for accelerating that sampling method.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"For instance, if we are sampling a simulation using only Exponential distributions, then the Direct method has many named variants. The first step for the Direct method is to sample a time. The time comes from inverting the survival of the system. Here, we denote a random variate between [0,1] by U.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"U = expleft(-sum_i lambda_i tright)","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"The simulation is more effecient if we can maintain sum_i lambda_i as a partial sum, so that we can index into it with log U. Further, every time there is a next event in the simulation, the list of enabled hazards changes, so we want to modify that list after each event, while maintaining the sum. For this purpose, there have been many data structures proposed. The general problem is known, in computer science as the prefix sum or prefix scan. An early attempt was an interesting structure called a Fenwick tree. The state of the art for this class of approaches was the optimized direct method, which is really just one of the prefix scan algorithms applied to the Direct method.","category":"page"},{"location":"samplers/#Examples","page":"Understanding Samplers","title":"Examples","text":"","category":"section"},{"location":"samplers/#First-to-fire","page":"Understanding Samplers","title":"First to fire","text":"","category":"section"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"The simplest way to sample a GSMP is to sample each clock the moment it's enabled. I don't know that there is a common name for this, so I'm calling it \"first to fire.\" This is a competing clocks split of the joint distribution. For each clock, it can ask the Julia library to sample that clock's distribution in whatever way it sees fit. This is helpful for both speed and accuracy because distributions have methods that are specialized for that distribution and, often, for particular ranges of distribution parameters. For example, it seems easy to sample an exponential using inversion. Here, U is a uniform variate between [0,1], and t is the sample time.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"t = (1lambda) log U","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"However, every mathematical library uses the Ziggurat method because it is at least twice as fast. There might be a downside if you want to use automatic differentiation on the code.","category":"page"},{"location":"samplers/#Next-reaction-method","page":"Understanding Samplers","title":"Next reaction method","text":"","category":"section"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"The next reaction method also samples each clock, but it samples in such a way that it reduces usage of random number generation. Random number generation used to be slow, but it is now no longer a concern. (There's a funny paper about this that I'm having trouble finding.) Nevertheless, there are some reasons to use this method.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"When a clock is first enabled, the next reaction method samples a uniform variate in [0,1], and then it finds a putative next event time for that clock using inversion. The original random variate is considered the total survival for this clock. The interesting move is that, if that same clock is disabled, this method saves some measure of how far the clock has gotten. That is, it measures the survival of the clock and subtracts that survival from the total survival. If the clock is ever enabled again, its new firing time is determined by the remaining survival.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"Is that allowed? The authors of the Next Reaction sort of prove it in \"Efficient Exact Stochastic Simulation of Chemical Systems with Many Species and Many Channels\", but they can fortunately can rely on the work of Kurtz [Kurtz:1970], which I don't quite see in their references. Nevertheless, Anderson and Kurtz amended this work with \"Continuous time markov chain models for chemical reaction methods\".","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"In Anderson and Kurtz, they take the same approach as the next reaction method. It's still split by the conditional firing times. It's still sampling by inversion, but they change to a log-space for the sampling of individual distributions. That's the whole change. Instead of storing the total survival, U, they store the log of that quantity, which turns out to be much more efficient for exponentials and Weibulls, which are used most frequently.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"In CompetingClocks, you'll see a single sampler that uses a combination of the next reaction method (Gibson and Bruck) and the modified next reaction method (Anderson and Kurtz). Based on the particular univariate distribution, the code uses a lookup into a performance table to choose either a linear space or log space. It's the best of both worlds, and it's just a matter of changing data structures a little bit.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"Why do people like the next reaction method when the first to fire is much less fussy and will use the appropriate sampler for the distribution, every time? It's about features. The next reaction method stores data that helps calculate importance samples. It also makes it easy to implement common random numbers. Finally, the next reaction method always samples from U=01 or from an exponential distribution, and then it transforms that value into the sample of the particular clock's distribution. This is called pathwise sampling, and it enables a simple method for taking derivatives of distributions.","category":"page"},{"location":"samplers/#Direct-method-for-exponentials","page":"Understanding Samplers","title":"Direct method for exponentials","text":"","category":"section"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"The Direct method is really quite solved, as described above. However, there is one complication that has to do with clock keys. Literature about prefix scans assumes that there are integer indices into an ordered, fixed list of integers. That is, you will use the integers 1-100 for the whole simulation. It seems so useful to have clock keys that can be strings, tuples, or other immutable types, so CompetingClocks uses a prefix scan that maintains a dictionary of keys.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"If the prefix scan has a dictionary of keys, then it could remember the keys forever or it could forget them. If you have a long-running simulation that uses an ever-growing number of event keys, then it's important to remove keys that are no longer in use. If you have a simulation that uses a fixed set of keys, it's easier to keep them in the dictionary.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"It would be interesting to ask whether we could create a data structure that is a keyed prefix sum, instead of using a dictionary that indexes into a prefix sum.","category":"page"},{"location":"samplers/#References","page":"Understanding Samplers","title":"References","text":"","category":"section"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"[Kurtz:1970] Kurtz, Thomas G. \"Solutions of ordinary differential equations as limits of pure jump Markov processes.\" Journal of applied Probability 7.1 (1970): 49-58.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"[Marchetti:2019] Marchetti, Luca, Corrado Priami, and Vo Hong Thanh. Simulation algorithms for computational systems biology. Vol. 1. Berlin, Germany, 2019.","category":"page"}]
}
