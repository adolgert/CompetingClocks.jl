var documenterSearchIndex = {"docs":
[{"location":"develop/#Design","page":"Develop","title":"Design","text":"","category":"section"},{"location":"develop/","page":"Develop","title":"Develop","text":"The scope of this is that I want to make a continuous-time simulation that is rooted in stochastic processes and as fast as they can be. The state will be the simplest, a vector of integers. Transitions, however, can be non-Exponential distributions. I'd like to exercise all of the top sampling methods. This code asks how to set up a best-practices continuous-time simulation in Julia. The fastest method for sampling is to use a hierarchical setup, where different sets of transitions get the samplers that are most efficient for their distributions.","category":"page"},{"location":"develop/","page":"Develop","title":"Develop","text":"The main research question is how to hook the state and transitions of the stochastic process to the sampler algorithm. The mathematical work I've seen does sometimes discuss hierarchical sampling, but it doesn't discuss algorithms for how best to connect a transition with its appropriate sampler. How do we specify it that connection? There's nothing in the math about distributions having a name or an indexing key.","category":"page"},{"location":"develop/","page":"Develop","title":"Develop","text":"While we normally simulate, there are some other ways to use simulation code, and those other ways give a clue about how to separate functions.","category":"page"},{"location":"develop/","page":"Develop","title":"Develop","text":"Fire transitions in a given order without sampling them. Work through a trace.\nConstruct a state by specifying an initial state and sequence of transitions.\nMeasure likelihood of a state without sampling. This is used for MCMC.","category":"page"},{"location":"develop/#Vector-addition-systems","page":"Develop","title":"Vector addition systems","text":"","category":"section"},{"location":"develop/","page":"Develop","title":"Develop","text":"A vector addition system (VAS) defines the state as a vector of non-negative integers. Transitions are two matrices of shape (transition x state). One indicates how large the state vector has to be for that transition to be enabled. Together, they define values removed and added to the state vector when a transition fires.","category":"page"},{"location":"develop/","page":"Develop","title":"Develop","text":"In practice, vector addition systems aren't implemented with vectors. The professional versions are defined on bipartite graphs where the state is one node type and transitions are the other node type.","category":"page"},{"location":"develop/#Semi-Markov-Vector-Addition-System","page":"Develop","title":"Semi-Markov Vector Addition System","text":"","category":"section"},{"location":"develop/","page":"Develop","title":"Develop","text":"We'll make one little change to the VAS. Instead of having only exponential distributions, it can have general distribution types. That adds complexity to the sampler, but the samplers will handle that. For the VAS, it adds some state and adds burden to specification. The state now needs to track the time at which each transition was enabled, known as t_e. We'll call the main part of the state its physical state, which is the vector of integers in this case.","category":"page"},{"location":"develop/","page":"Develop","title":"Develop","text":"In order to specify a Markov VAS, you need to give a rate for each transition. A chemical simulation has a very particular function to determine the rate of transitions. For chemicals, the rate is a function of the number of possible combinations of the chemicals. For a Semi-Markov VAS, which we're making, we'll let the state be any function of the state of the system.","category":"page"},{"location":"develop/","page":"Develop","title":"Develop","text":"There's one other wrinkle to specifying a Semi-Markov VAS. The Zimmerman simulation book points out that non-Exponential transitions can have memory or be memoryless. He means that, if a transition is enabled and disabled, we need to decide whether that affects its rate the next time it's enabled. If the transition were emptying a bathtub, and we put in the stopper plug, then taking out that plug depends on the previous enabling. It must have memory. If it were the time a robot needs to put a gas cap on an assmebly-line car, it would need to begin from scratch during a restart.","category":"page"},{"location":"develop/#Core-responsibilities","page":"Develop","title":"Core responsibilities","text":"","category":"section"},{"location":"develop/","page":"Develop","title":"Develop","text":"The state of the system is dictated by stochastic processes theory: a. Physical state, which can be a vector of integers for this version. b. Enabling times. This is the time at which each transition was, or wasn't enabled. c. The last time any transition fired.\nSampling depends only on distributions, not any other information about each transition. All optimized samplers keep a cache of the distributions of enabled transitions and modify that cache with each firing.","category":"page"},{"location":"develop/#Sampling","page":"Develop","title":"Sampling","text":"","category":"section"},{"location":"develop/","page":"Develop","title":"Develop","text":"Most samplers optimize their work by tracking what transitions were last enabled. They treat newly-enabled and newly-disabled transitions as a modification to the likelihood of the next sample. Some samplers don't store any state. First-reaction method is this way, as is the original Direct method. These are naive samplers, and I don't think it's worth optimizing for them. I would, instead, assume that all samplers track which transitions were last enabled. I'll add that as a layer on the first-reaction and direct methods.","category":"page"},{"location":"develop/#Sequence","page":"Develop","title":"Sequence","text":"","category":"section"},{"location":"develop/","page":"Develop","title":"Develop","text":"The simulation inner loop is critical for efficient simulation. For continuous-time simulation, it's a game of clock-cycles, so we should get this right. This inner loop can have a lot of different kinds of calculations to do, and those calculations benefit from good cache use, right near the processor on L1. As a consequence, we want to design the parts of the inner loop so that they interleave work that operates on the same data.","category":"page"},{"location":"develop/","page":"Develop","title":"Develop","text":"If we think of a single transition as a consecutive set of steps, each of which has a different function, then those functions traverse state updates, transitions calculations, and sampling decisions.","category":"page"},{"location":"develop/","page":"Develop","title":"Develop","text":"Fire a transition.\nModify state.\nCalculate changes to transitions.\nUpdate sampler information.\nSample for next transition.","category":"page"},{"location":"develop/","page":"Develop","title":"Develop","text":"However, the state and transitions will be stored on a graph for the most efficient simulations. We'd like to make the most efficient simulations possible. When state and transitions are stored on a graph, it helps to perform all operations on graph data while doing a single traversal of the graph.","category":"page"},{"location":"develop/","page":"Develop","title":"Develop","text":"Fire a transition\nFor each [state changed]\n    Update a single state\n    For each [transition depending on that state]\n        Calculate the hazard rate for that transition.\n        Update the sampler about that updated hazard.","category":"page"},{"location":"develop/","page":"Develop","title":"Develop","text":"The goal, then, is to make code where firing, finding affected transitions, and sampling those transitions, is all separate, but they get called nicely in order within a single loop.","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"EditURL = \"distributions.jl\"","category":"page"},{"location":"distributions/#How-Fleck-Decides-What-Happens-Next","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"","category":"section"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"Fleck simulates generalized semi-Markov processes (GSMP). Every event in a generalized semi-Markov process is chosen as the result of a competion among clocks to see which fires next.","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"In a process-oriented simulation (like SimJulia), control flow is based on tasks. Each task performs some action on the state, rolls the dice, and sets a wake-up time. It might wake up as expected and possible execute code, or it might be interrupted by another task's actions. In contrast, an event-oriented simulation using Fleck will create a set of possible next events, assign a probability distribution for when each can happen, and the timing of which happens first determines which next event happens. Let's look at how a probability distribution describes the time for an event to happen and then how they compete in Fleck.","category":"page"},{"location":"distributions/#Distributions-in-Time","page":"How Fleck Decides What Happens Next","title":"Distributions in Time","text":"","category":"section"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"Let's say you have a cold. You know you aren't going to recover immediately, but, as days go by, you're more and more sure you'll recover soon. You can read this graph below as the probability to recover given that you have not yet recovered.","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"(Image: )","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"It starts at zero, meaning there's no way you'll recover as soon as you're sick. It gets more likely over time that you're at the tail end of being sick. This is called a hazard rate, and the hazard rate shown is that of a Gamma distribution, commonly used to describe the rate of recovery for a population of individuals who are sick.","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"If, instead, you want to see the number of people who recover on any given day, that is called a probability distribution function.","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"(Image: )","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"Where the hazard rate is an instantaneous quantity at a point in time, the probability distribution function (pdf) integrates over all possible future times. If we call the hazard rate lambda(t) and call the pdf f, we get this relationship.","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"f(t) = lambda(t) e^-int_0^t lambda(s)ds","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"The graph of the pdf tells us that the most likely time for this event is a little before time 5, in whatever units. You will see graphs of pdfs on Wikipedia because this is how people usually think about the probability an event happens at some time.","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"A simulation, however, has multiple events possible at any one time. One event may happen, and then other events need to restart. Let's ask, if you still have a cold on day 5, what is the probability distribution function for when you will recover?","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"(Image: )","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"The probability distribution function changes now that you know you didn't recover earlier than day 5. On the other hand, the hazard rate for recovery from the cold will be unchanged. Using the same hazard rate, we can recalculate the pdf from the new time t_0=5.","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"f(ttt_0) = lambda(t) e^-int_t_0^t lambda(s)ds","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"In some sense, the underlying nature of when a particular event will happen is described more by the hazard rate, whereas the distribution function tells us about ensembles of events.","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"The hazard rate is related to the well known cumulative distribution function (CDF) by an integral. The CDF tells us what is the overall probability the event occured some time in the interval t_0t_1).","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"F(t_0t_1) = 1 - e^-int_t_0^t_1 lambda(s) ds","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"Equally important for simulation is the survival function (sometimes called the complementary cumulative distribution function), which is the probability the event will not occur until after t_1.","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"S(t_1) = 1 - F(t_1t_1) = e^-int_t_0^t_1 lambda(s) ds","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"(Image: )","category":"page"},{"location":"distributions/#Competition","page":"How Fleck Decides What Happens Next","title":"Competition","text":"","category":"section"},{"location":"distributions/#Individual-Distributions","page":"How Fleck Decides What Happens Next","title":"Individual Distributions","text":"","category":"section"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"Let's think of a moment when there are three possible next events. There is a Gamma distribution for when you recover from a cold, a Weibull distribution for when you decide to take medicine for the cold, and an Exponential distribution for when your Mom calls you. Each one is described by a distribution in time, and we can think of them as three hazard rates.","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"(Image: )","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"The separate hazard rates are what we put into the simulation. Given their competition, the hazard rates will remain unchanged, but the pdfs will change.","category":"page"},{"location":"distributions/#Total-Probability","page":"How Fleck Decides What Happens Next","title":"Total Probability","text":"","category":"section"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"Each of the three clock distributions above corresponds to a unique event E_i, which has a probability that it will be the first to fire. We calculate this probability by marginalizing over the other events, which ends up being an integral over the distribution, multiplied by the survivals of the other events.","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"PE_i = int_0^infty f_i(t) prod_jne i S_j(t) dt","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"That gives the graph on the left.","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"(Image: )","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"The graph on the right shows the conditional distribution in time for each event, given that it was the one that fired, so it is Pt_i  E_i. You can see that these distributions don't match the distributions for the individual events. They are modified by competition.","category":"page"},{"location":"distributions/#Total-Time","page":"How Fleck Decides What Happens Next","title":"Total Time","text":"","category":"section"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"From the graph above, if we pick a time, t_1=10, we can read from the graph three hazard rates, (lambda_1(t_1)lambda_2(t_1) lambda_3(t_1)). Each hazard rate is the rate, per unit time, of that event. We know that, if the simulation makes it to t=10 without any event happening, the conditional probability for any one of those events is the ratio of hazard rates.","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"PE_1t=t_1 = fraclambda_1(t_1)lambda_1(t_1)+lambda_2(t_1)+lambda_3(t_1)","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"If all distributions are Exponential, then they all have a constant hazard rate, and that conditional probability stays the same over time. If any distributions are non-Exponential, then that conditional probability changes.","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"(Image: )","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"On the left of this graph is the pdf for the first event of the three to fire. We can see this as a marginal Pt and then the right-hand graph as the conditional PE_it.","category":"page"},{"location":"distributions/#Specification-of-a-Simulation","page":"How Fleck Decides What Happens Next","title":"Specification of a Simulation","text":"","category":"section"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"We simulated using competing clocks when we measure using survival analysis. One is the inverse of the other.","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"A classic example of survival analysis is a hospital study where participants enter a trial for a drug, and doctors observe the date at which each patient recovers. How would you draw a probability distribution function for such a trial? You would draw a histogram where each week shows a count of how many recovered. What about the hazard rate for such a trial? Here, you would look only at the number of participants remaining in the trial and ask what fraction recover each week. That's a rate of recovery given that participants have not yet recovered.","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"There are many disciplines that use survival analysis to measure rates of processes. Epidemiology measures rates of contagion, death, and recovery. Demography measures time to have children or move to another country. Reliability studies the time for a part to break and be fixed. Drug discovery measures the time to approve a chemical for the next trial stage. For traffic flow, it's the time to the next intersection. For package delivery, it's the time to the next package scan. All of these do use, or can use, survival analysis to observe a system to simulate.","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"","category":"page"},{"location":"distributions/","page":"How Fleck Decides What Happens Next","title":"How Fleck Decides What Happens Next","text":"This page was generated using Literate.jl.","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"EditURL = \"sir.jl\"","category":"page"},{"location":"sir/#Non-Markovian-SIR-Model","page":"SIR Model","title":"Non-Markovian SIR Model","text":"","category":"section"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"using Random\nusing Plots\nusing Distributions\nusing Fleck","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"In this tutorial we demonstrate construction of a SIR (susceptible-infectious-removed) model with non-exponential recovery times. Infection events occur at the points of a Poisson process, which is equivalent to using a single exponential clock whose rate corresponds to the overall rate of infection in the population. The infection rate is beta c S I  N where N is the total population size, making this a frequency-dependent force of infection term rather than pure mass action (although as N does not change in this example, the difference is moot). Clocks for recovery events follow an arbitrary distribution.","category":"page"},{"location":"sir/#Model-structure","page":"SIR Model","title":"Model structure","text":"","category":"section"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"We use a struct that stores the type of the recovery distribution as a type parameter. The model state is stored as a vector of integers, representing S, I, and R. Additionally, because recovery clocks need unique keys, we define the method get_key! which retrives an integer key and increments the stored key counter.","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"The initialize! method uses the initial state to enable the infection clock and recovery clocks for each initial infectious person. Note that the keys are a tuple where the first element is a Symbol giving the event type, and the second element is an integer.","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"mutable struct SIRNonMarkov{T<:Distribution}\n    state::Vector{Int}\n    parameters::Vector{Float64}\n    next_key::Int\n    recovery_distribution::T\n    time::Float64\nend\n\nfunction get_key!(model::SIRNonMarkov)\n    key = model.next_key\n    model.next_key += 1\n    return key\nend\n\nfunction initialize!(model::SIRNonMarkov, sampler, rng)\n    (β, c, γ) = model.parameters\n    # enable the infection clock\n    enable!(\n        sampler,\n        (:infection, get_key!(model)),\n        Exponential(1.0/(β*c*model.state[2]/sum(model.state)*model.state[1])),\n        model.time,\n        model.time,\n        rng\n        )\n    # enable the recovery clocks\n    for _ in 1:model.state[2]\n        enable!(sampler, (:recovery, get_key!(model)), model.recovery_distribution, model.time, model.time, rng)\n    end\nend;","category":"page"},{"location":"sir/#Model-update","page":"SIR Model","title":"Model update","text":"","category":"section"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"In the model update function, we use the first element of the clock key to determine the event type corresponding to the clock that fired, and apply the corresponding logic. Infection events disable and enable the infection event with a new rate, and enable a recovery clock for the newly infectious individual. Recovery events simply disable the clock associated to that event. Both events update the state vector.","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"function step!(model::SIRNonMarkov, sampler::SSA{K,T}, when::T, which::K, rng) where {K,T}\n    (β, c, γ) = model.parameters\n    model.time = when\n    if first(which) == :infection\n        model.state[1] -= 1\n        model.state[2] += 1\n        # disable and reenable the infection clock after accounting for the new rate\n        disable!(sampler, which, model.time)\n        enable!(\n            sampler,\n            which,\n            Exponential(1.0/(β*c*model.state[2]/sum(model.state)*model.state[1])),\n            model.time,\n            model.time,\n            rng\n            )\n        # enable a recovery event for the newly infected person\n        enable!(\n            sampler,\n            (:recovery, get_key!(model)),\n            model.recovery_distribution,\n            model.time,\n            model.time,\n            rng\n            )\n    elseif first(which) == :recovery\n        model.state[2] -= 1\n        model.state[3] += 1\n        disable!(sampler, which, model.time)\n    else\n        error(\"unrecognized clock key: $(which)\")\n    end\nend;","category":"page"},{"location":"sir/#Simulation","page":"SIR Model","title":"Simulation","text":"","category":"section"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"We first set parameters.","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"tmax = 40.0\ninitial_state = [990, 10, 0]\np = [0.05, 10.0, 4.0]\n\nseed = 456959517\nrng = MersenneTwister(seed);","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"Next we generate the model struct and the sampler object. Here we choose the CombinedNextReaction sampler type. We choose to use a Dirac delta distribution to simulate deterministic recovery times.","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"sirmodel = SIRNonMarkov(deepcopy(initial_state), p, 0, Dirac(p[3]), 0.0)\nsampler = CombinedNextReaction{Tuple{Symbol,Int},Float64}();","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"Now we may run the model, using a function run_sir!. We preallocate a matrix to store model output. Note that in the simple SIR model with only infection and recovery events, a maximum of 2S + I events is possible.","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"function run_sir!(model, sampler, tmax, rng)\n\n    output = zeros(2*model.state[1]+model.state[2]+1, 4)\n    nout = 1\n    output[nout,:] = [sirmodel.time; sirmodel.state]\n    nout += 1;\n\n    initialize!(model, sampler, rng)\n\n    (when, which) = next(sampler, model.time, rng)\n\n    while when <= tmax\n        step!(model, sampler, when, which, rng)\n        (when, which) = next(sampler, model.time, rng)\n\n        output[nout,:] .= [model.time; model.state]\n        nout += 1\n    end\n\n    return output, nout\nend\n\n(output, nout) = run_sir!(sirmodel, sampler, tmax, rng);","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"Finally we can plot the sampled trajectory.","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"plot(\n    output[1:nout-1,1],\n    output[1:nout-1,2:end],\n    label=[\"S\" \"I\" \"R\"],\n    xlabel=\"Time\",\n    ylabel=\"Number\"\n)","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip180\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip180)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip181\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip180)\" d=\"M262.551 1423.18 L2352.76 1423.18 L2352.76 47.2441 L262.551 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip182\">\n    <rect x=\"262\" y=\"47\" width=\"2091\" height=\"1377\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip182)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"321.708,1423.18 321.708,47.2441 \"/>\n<polyline clip-path=\"url(#clip182)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"831.168,1423.18 831.168,47.2441 \"/>\n<polyline clip-path=\"url(#clip182)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1340.63,1423.18 1340.63,47.2441 \"/>\n<polyline clip-path=\"url(#clip182)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1850.09,1423.18 1850.09,47.2441 \"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"262.551,1423.18 2352.76,1423.18 \"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"321.708,1423.18 321.708,1404.28 \"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"831.168,1423.18 831.168,1404.28 \"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1340.63,1423.18 1340.63,1404.28 \"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1850.09,1423.18 1850.09,1404.28 \"/>\n<path clip-path=\"url(#clip180)\" d=\"M321.708 1454.1 Q318.097 1454.1 316.268 1457.66 Q314.463 1461.2 314.463 1468.33 Q314.463 1475.44 316.268 1479.01 Q318.097 1482.55 321.708 1482.55 Q325.342 1482.55 327.148 1479.01 Q328.976 1475.44 328.976 1468.33 Q328.976 1461.2 327.148 1457.66 Q325.342 1454.1 321.708 1454.1 M321.708 1450.39 Q327.518 1450.39 330.574 1455 Q333.652 1459.58 333.652 1468.33 Q333.652 1477.06 330.574 1481.67 Q327.518 1486.25 321.708 1486.25 Q315.898 1486.25 312.819 1481.67 Q309.764 1477.06 309.764 1468.33 Q309.764 1459.58 312.819 1455 Q315.898 1450.39 321.708 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M805.856 1481.64 L813.494 1481.64 L813.494 1455.28 L805.184 1456.95 L805.184 1452.69 L813.448 1451.02 L818.124 1451.02 L818.124 1481.64 L825.763 1481.64 L825.763 1485.58 L805.856 1485.58 L805.856 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M845.207 1454.1 Q841.596 1454.1 839.767 1457.66 Q837.962 1461.2 837.962 1468.33 Q837.962 1475.44 839.767 1479.01 Q841.596 1482.55 845.207 1482.55 Q848.842 1482.55 850.647 1479.01 Q852.476 1475.44 852.476 1468.33 Q852.476 1461.2 850.647 1457.66 Q848.842 1454.1 845.207 1454.1 M845.207 1450.39 Q851.017 1450.39 854.073 1455 Q857.152 1459.58 857.152 1468.33 Q857.152 1477.06 854.073 1481.67 Q851.017 1486.25 845.207 1486.25 Q839.397 1486.25 836.318 1481.67 Q833.263 1477.06 833.263 1468.33 Q833.263 1459.58 836.318 1455 Q839.397 1450.39 845.207 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1319.4 1481.64 L1335.72 1481.64 L1335.72 1485.58 L1313.78 1485.58 L1313.78 1481.64 Q1316.44 1478.89 1321.02 1474.26 Q1325.63 1469.61 1326.81 1468.27 Q1329.05 1465.74 1329.93 1464.01 Q1330.84 1462.25 1330.84 1460.56 Q1330.84 1457.8 1328.89 1456.07 Q1326.97 1454.33 1323.87 1454.33 Q1321.67 1454.33 1319.22 1455.09 Q1316.79 1455.86 1314.01 1457.41 L1314.01 1452.69 Q1316.83 1451.55 1319.29 1450.97 Q1321.74 1450.39 1323.78 1450.39 Q1329.15 1450.39 1332.34 1453.08 Q1335.54 1455.77 1335.54 1460.26 Q1335.54 1462.39 1334.73 1464.31 Q1333.94 1466.2 1331.83 1468.8 Q1331.25 1469.47 1328.15 1472.69 Q1325.05 1475.88 1319.4 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1355.54 1454.1 Q1351.92 1454.1 1350.1 1457.66 Q1348.29 1461.2 1348.29 1468.33 Q1348.29 1475.44 1350.1 1479.01 Q1351.92 1482.55 1355.54 1482.55 Q1359.17 1482.55 1360.98 1479.01 Q1362.8 1475.44 1362.8 1468.33 Q1362.8 1461.2 1360.98 1457.66 Q1359.17 1454.1 1355.54 1454.1 M1355.54 1450.39 Q1361.35 1450.39 1364.4 1455 Q1367.48 1459.58 1367.48 1468.33 Q1367.48 1477.06 1364.4 1481.67 Q1361.35 1486.25 1355.54 1486.25 Q1349.73 1486.25 1346.65 1481.67 Q1343.59 1477.06 1343.59 1468.33 Q1343.59 1459.58 1346.65 1455 Q1349.73 1450.39 1355.54 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1838.93 1466.95 Q1842.29 1467.66 1844.16 1469.93 Q1846.06 1472.2 1846.06 1475.53 Q1846.06 1480.65 1842.54 1483.45 Q1839.02 1486.25 1832.54 1486.25 Q1830.37 1486.25 1828.05 1485.81 Q1825.76 1485.39 1823.31 1484.54 L1823.31 1480.02 Q1825.25 1481.16 1827.57 1481.74 Q1829.88 1482.32 1832.4 1482.32 Q1836.8 1482.32 1839.09 1480.58 Q1841.41 1478.84 1841.41 1475.53 Q1841.41 1472.48 1839.25 1470.77 Q1837.13 1469.03 1833.31 1469.03 L1829.28 1469.03 L1829.28 1465.19 L1833.49 1465.19 Q1836.94 1465.19 1838.77 1463.82 Q1840.6 1462.43 1840.6 1459.84 Q1840.6 1457.18 1838.7 1455.77 Q1836.82 1454.33 1833.31 1454.33 Q1831.38 1454.33 1829.19 1454.75 Q1826.99 1455.16 1824.35 1456.04 L1824.35 1451.88 Q1827.01 1451.14 1829.32 1450.77 Q1831.66 1450.39 1833.72 1450.39 Q1839.05 1450.39 1842.15 1452.83 Q1845.25 1455.23 1845.25 1459.35 Q1845.25 1462.22 1843.61 1464.21 Q1841.96 1466.18 1838.93 1466.95 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1864.93 1454.1 Q1861.31 1454.1 1859.49 1457.66 Q1857.68 1461.2 1857.68 1468.33 Q1857.68 1475.44 1859.49 1479.01 Q1861.31 1482.55 1864.93 1482.55 Q1868.56 1482.55 1870.37 1479.01 Q1872.19 1475.44 1872.19 1468.33 Q1872.19 1461.2 1870.37 1457.66 Q1868.56 1454.1 1864.93 1454.1 M1864.93 1450.39 Q1870.74 1450.39 1873.79 1455 Q1876.87 1459.58 1876.87 1468.33 Q1876.87 1477.06 1873.79 1481.67 Q1870.74 1486.25 1864.93 1486.25 Q1859.12 1486.25 1856.04 1481.67 Q1852.98 1477.06 1852.98 1468.33 Q1852.98 1459.58 1856.04 1455 Q1859.12 1450.39 1864.93 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1229.53 1520.52 L1269.73 1520.52 L1269.73 1525.93 L1252.86 1525.93 L1252.86 1568.04 L1246.4 1568.04 L1246.4 1525.93 L1229.53 1525.93 L1229.53 1520.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1273.68 1532.4 L1279.53 1532.4 L1279.53 1568.04 L1273.68 1568.04 L1273.68 1532.4 M1273.68 1518.52 L1279.53 1518.52 L1279.53 1525.93 L1273.68 1525.93 L1273.68 1518.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1319.54 1539.24 Q1321.74 1535.29 1324.79 1533.41 Q1327.85 1531.54 1331.99 1531.54 Q1337.56 1531.54 1340.58 1535.45 Q1343.6 1539.33 1343.6 1546.53 L1343.6 1568.04 L1337.72 1568.04 L1337.72 1546.72 Q1337.72 1541.59 1335.9 1539.11 Q1334.09 1536.63 1330.36 1536.63 Q1325.81 1536.63 1323.17 1539.65 Q1320.53 1542.68 1320.53 1547.9 L1320.53 1568.04 L1314.64 1568.04 L1314.64 1546.72 Q1314.64 1541.56 1312.83 1539.11 Q1311.01 1536.63 1307.22 1536.63 Q1302.74 1536.63 1300.09 1539.68 Q1297.45 1542.71 1297.45 1547.9 L1297.45 1568.04 L1291.56 1568.04 L1291.56 1532.4 L1297.45 1532.4 L1297.45 1537.93 Q1299.46 1534.66 1302.26 1533.1 Q1305.06 1531.54 1308.91 1531.54 Q1312.79 1531.54 1315.5 1533.51 Q1318.24 1535.48 1319.54 1539.24 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1385.78 1548.76 L1385.78 1551.62 L1358.85 1551.62 Q1359.23 1557.67 1362.48 1560.85 Q1365.76 1564 1371.58 1564 Q1374.95 1564 1378.11 1563.17 Q1381.29 1562.35 1384.41 1560.69 L1384.41 1566.23 Q1381.26 1567.57 1377.95 1568.27 Q1374.64 1568.97 1371.23 1568.97 Q1362.7 1568.97 1357.7 1564 Q1352.74 1559.04 1352.74 1550.57 Q1352.74 1541.82 1357.45 1536.69 Q1362.19 1531.54 1370.21 1531.54 Q1377.41 1531.54 1381.58 1536.18 Q1385.78 1540.8 1385.78 1548.76 M1379.92 1547.04 Q1379.86 1542.23 1377.21 1539.37 Q1374.6 1536.5 1370.28 1536.5 Q1365.37 1536.5 1362.41 1539.27 Q1359.49 1542.04 1359.04 1547.07 L1379.92 1547.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip182)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"262.551,1384.24 2352.76,1384.24 \"/>\n<polyline clip-path=\"url(#clip182)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"262.551,1056.45 2352.76,1056.45 \"/>\n<polyline clip-path=\"url(#clip182)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"262.551,728.656 2352.76,728.656 \"/>\n<polyline clip-path=\"url(#clip182)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"262.551,400.865 2352.76,400.865 \"/>\n<polyline clip-path=\"url(#clip182)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"262.551,73.074 2352.76,73.074 \"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"262.551,1423.18 262.551,47.2441 \"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"262.551,1384.24 281.449,1384.24 \"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"262.551,1056.45 281.449,1056.45 \"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"262.551,728.656 281.449,728.656 \"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"262.551,400.865 281.449,400.865 \"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"262.551,73.074 281.449,73.074 \"/>\n<path clip-path=\"url(#clip180)\" d=\"M214.607 1370.04 Q210.996 1370.04 209.167 1373.6 Q207.362 1377.14 207.362 1384.27 Q207.362 1391.38 209.167 1394.94 Q210.996 1398.49 214.607 1398.49 Q218.241 1398.49 220.047 1394.94 Q221.875 1391.38 221.875 1384.27 Q221.875 1377.14 220.047 1373.6 Q218.241 1370.04 214.607 1370.04 M214.607 1366.33 Q220.417 1366.33 223.473 1370.94 Q226.551 1375.52 226.551 1384.27 Q226.551 1393 223.473 1397.61 Q220.417 1402.19 214.607 1402.19 Q208.797 1402.19 205.718 1397.61 Q202.662 1393 202.662 1384.27 Q202.662 1375.52 205.718 1370.94 Q208.797 1366.33 214.607 1366.33 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M148.311 1069.79 L164.63 1069.79 L164.63 1073.73 L142.686 1073.73 L142.686 1069.79 Q145.348 1067.04 149.931 1062.41 Q154.538 1057.76 155.718 1056.41 Q157.964 1053.89 158.843 1052.15 Q159.746 1050.39 159.746 1048.7 Q159.746 1045.95 157.802 1044.21 Q155.88 1042.48 152.778 1042.48 Q150.579 1042.48 148.126 1043.24 Q145.695 1044.01 142.917 1045.56 L142.917 1040.83 Q145.741 1039.7 148.195 1039.12 Q150.649 1038.54 152.686 1038.54 Q158.056 1038.54 161.251 1041.23 Q164.445 1043.91 164.445 1048.4 Q164.445 1050.53 163.635 1052.45 Q162.848 1054.35 160.741 1056.94 Q160.163 1057.62 157.061 1060.83 Q153.959 1064.03 148.311 1069.79 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M174.491 1039.17 L192.848 1039.17 L192.848 1043.1 L178.774 1043.1 L178.774 1051.57 Q179.792 1051.23 180.811 1051.07 Q181.829 1050.88 182.848 1050.88 Q188.635 1050.88 192.014 1054.05 Q195.394 1057.22 195.394 1062.64 Q195.394 1068.22 191.922 1071.32 Q188.45 1074.4 182.13 1074.4 Q179.954 1074.4 177.686 1074.03 Q175.44 1073.66 173.033 1072.92 L173.033 1068.22 Q175.116 1069.35 177.339 1069.91 Q179.561 1070.46 182.038 1070.46 Q186.042 1070.46 188.38 1068.36 Q190.718 1066.25 190.718 1062.64 Q190.718 1059.03 188.38 1056.92 Q186.042 1054.82 182.038 1054.82 Q180.163 1054.82 178.288 1055.23 Q176.436 1055.65 174.491 1056.53 L174.491 1039.17 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M214.607 1042.25 Q210.996 1042.25 209.167 1045.81 Q207.362 1049.35 207.362 1056.48 Q207.362 1063.59 209.167 1067.15 Q210.996 1070.69 214.607 1070.69 Q218.241 1070.69 220.047 1067.15 Q221.875 1063.59 221.875 1056.48 Q221.875 1049.35 220.047 1045.81 Q218.241 1042.25 214.607 1042.25 M214.607 1038.54 Q220.417 1038.54 223.473 1043.15 Q226.551 1047.73 226.551 1056.48 Q226.551 1065.21 223.473 1069.82 Q220.417 1074.4 214.607 1074.4 Q208.797 1074.4 205.718 1069.82 Q202.662 1065.21 202.662 1056.48 Q202.662 1047.73 205.718 1043.15 Q208.797 1038.54 214.607 1038.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M144.329 711.376 L162.686 711.376 L162.686 715.311 L148.612 715.311 L148.612 723.783 Q149.63 723.436 150.649 723.274 Q151.667 723.089 152.686 723.089 Q158.473 723.089 161.852 726.26 Q165.232 729.432 165.232 734.848 Q165.232 740.427 161.76 743.529 Q158.288 746.607 151.968 746.607 Q149.792 746.607 147.524 746.237 Q145.279 745.867 142.871 745.126 L142.871 740.427 Q144.954 741.561 147.177 742.117 Q149.399 742.672 151.876 742.672 Q155.88 742.672 158.218 740.566 Q160.556 738.459 160.556 734.848 Q160.556 731.237 158.218 729.131 Q155.88 727.024 151.876 727.024 Q150.001 727.024 148.126 727.441 Q146.274 727.858 144.329 728.737 L144.329 711.376 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M184.445 714.455 Q180.834 714.455 179.005 718.02 Q177.2 721.561 177.2 728.691 Q177.2 735.797 179.005 739.362 Q180.834 742.904 184.445 742.904 Q188.079 742.904 189.885 739.362 Q191.713 735.797 191.713 728.691 Q191.713 721.561 189.885 718.02 Q188.079 714.455 184.445 714.455 M184.445 710.751 Q190.255 710.751 193.311 715.358 Q196.389 719.941 196.389 728.691 Q196.389 737.418 193.311 742.024 Q190.255 746.607 184.445 746.607 Q178.635 746.607 175.556 742.024 Q172.501 737.418 172.501 728.691 Q172.501 719.941 175.556 715.358 Q178.635 710.751 184.445 710.751 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M214.607 714.455 Q210.996 714.455 209.167 718.02 Q207.362 721.561 207.362 728.691 Q207.362 735.797 209.167 739.362 Q210.996 742.904 214.607 742.904 Q218.241 742.904 220.047 739.362 Q221.875 735.797 221.875 728.691 Q221.875 721.561 220.047 718.02 Q218.241 714.455 214.607 714.455 M214.607 710.751 Q220.417 710.751 223.473 715.358 Q226.551 719.941 226.551 728.691 Q226.551 737.418 223.473 742.024 Q220.417 746.607 214.607 746.607 Q208.797 746.607 205.718 742.024 Q202.662 737.418 202.662 728.691 Q202.662 719.941 205.718 715.358 Q208.797 710.751 214.607 710.751 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M143.103 383.585 L165.325 383.585 L165.325 385.576 L152.778 418.145 L147.894 418.145 L159.7 387.52 L143.103 387.52 L143.103 383.585 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M174.491 383.585 L192.848 383.585 L192.848 387.52 L178.774 387.52 L178.774 395.992 Q179.792 395.645 180.811 395.483 Q181.829 395.298 182.848 395.298 Q188.635 395.298 192.014 398.469 Q195.394 401.641 195.394 407.057 Q195.394 412.636 191.922 415.738 Q188.45 418.816 182.13 418.816 Q179.954 418.816 177.686 418.446 Q175.44 418.076 173.033 417.335 L173.033 412.636 Q175.116 413.77 177.339 414.326 Q179.561 414.881 182.038 414.881 Q186.042 414.881 188.38 412.775 Q190.718 410.668 190.718 407.057 Q190.718 403.446 188.38 401.34 Q186.042 399.233 182.038 399.233 Q180.163 399.233 178.288 399.65 Q176.436 400.066 174.491 400.946 L174.491 383.585 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M214.607 386.664 Q210.996 386.664 209.167 390.229 Q207.362 393.77 207.362 400.9 Q207.362 408.006 209.167 411.571 Q210.996 415.113 214.607 415.113 Q218.241 415.113 220.047 411.571 Q221.875 408.006 221.875 400.9 Q221.875 393.77 220.047 390.229 Q218.241 386.664 214.607 386.664 M214.607 382.96 Q220.417 382.96 223.473 387.567 Q226.551 392.15 226.551 400.9 Q226.551 409.627 223.473 414.233 Q220.417 418.816 214.607 418.816 Q208.797 418.816 205.718 414.233 Q202.662 409.627 202.662 400.9 Q202.662 392.15 205.718 387.567 Q208.797 382.96 214.607 382.96 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M114.931 86.4189 L122.57 86.4189 L122.57 60.0533 L114.26 61.7199 L114.26 57.4607 L122.524 55.794 L127.2 55.794 L127.2 86.4189 L134.839 86.4189 L134.839 90.354 L114.931 90.354 L114.931 86.4189 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M154.283 58.8727 Q150.672 58.8727 148.843 62.4375 Q147.038 65.9792 147.038 73.1088 Q147.038 80.2152 148.843 83.78 Q150.672 87.3216 154.283 87.3216 Q157.917 87.3216 159.723 83.78 Q161.552 80.2152 161.552 73.1088 Q161.552 65.9792 159.723 62.4375 Q157.917 58.8727 154.283 58.8727 M154.283 55.169 Q160.093 55.169 163.149 59.7755 Q166.227 64.3588 166.227 73.1088 Q166.227 81.8356 163.149 86.442 Q160.093 91.0253 154.283 91.0253 Q148.473 91.0253 145.394 86.442 Q142.339 81.8356 142.339 73.1088 Q142.339 64.3588 145.394 59.7755 Q148.473 55.169 154.283 55.169 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M184.445 58.8727 Q180.834 58.8727 179.005 62.4375 Q177.2 65.9792 177.2 73.1088 Q177.2 80.2152 179.005 83.78 Q180.834 87.3216 184.445 87.3216 Q188.079 87.3216 189.885 83.78 Q191.713 80.2152 191.713 73.1088 Q191.713 65.9792 189.885 62.4375 Q188.079 58.8727 184.445 58.8727 M184.445 55.169 Q190.255 55.169 193.311 59.7755 Q196.389 64.3588 196.389 73.1088 Q196.389 81.8356 193.311 86.442 Q190.255 91.0253 184.445 91.0253 Q178.635 91.0253 175.556 86.442 Q172.501 81.8356 172.501 73.1088 Q172.501 64.3588 175.556 59.7755 Q178.635 55.169 184.445 55.169 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M214.607 58.8727 Q210.996 58.8727 209.167 62.4375 Q207.362 65.9792 207.362 73.1088 Q207.362 80.2152 209.167 83.78 Q210.996 87.3216 214.607 87.3216 Q218.241 87.3216 220.047 83.78 Q221.875 80.2152 221.875 73.1088 Q221.875 65.9792 220.047 62.4375 Q218.241 58.8727 214.607 58.8727 M214.607 55.169 Q220.417 55.169 223.473 59.7755 Q226.551 64.3588 226.551 73.1088 Q226.551 81.8356 223.473 86.442 Q220.417 91.0253 214.607 91.0253 Q208.797 91.0253 205.718 86.442 Q202.662 81.8356 202.662 73.1088 Q202.662 64.3588 205.718 59.7755 Q208.797 55.169 214.607 55.169 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M16.4842 862.94 L16.4842 854.283 L56.238 833.212 L16.4842 833.212 L16.4842 826.974 L64.0042 826.974 L64.0042 835.631 L24.2503 856.701 L64.0042 856.701 L64.0042 862.94 L16.4842 862.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M49.9359 815.038 L28.3562 815.038 L28.3562 809.181 L49.7131 809.181 Q54.7739 809.181 57.3202 807.208 Q59.8346 805.235 59.8346 801.288 Q59.8346 796.546 56.8109 793.808 Q53.7872 791.039 48.5673 791.039 L28.3562 791.039 L28.3562 785.183 L64.0042 785.183 L64.0042 791.039 L58.5296 791.039 Q61.7762 793.172 63.3676 796.004 Q64.9272 798.805 64.9272 802.529 Q64.9272 808.672 61.1078 811.855 Q57.2883 815.038 49.9359 815.038 M27.4968 800.301 L27.4968 800.301 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M35.1993 745.365 Q31.2526 743.169 29.3747 740.114 Q27.4968 737.058 27.4968 732.92 Q27.4968 727.35 31.4117 724.327 Q35.2948 721.303 42.4881 721.303 L64.0042 721.303 L64.0042 727.191 L42.679 727.191 Q37.5546 727.191 35.072 729.005 Q32.5894 730.82 32.5894 734.544 Q32.5894 739.095 35.6131 741.737 Q38.6368 744.379 43.8567 744.379 L64.0042 744.379 L64.0042 750.267 L42.679 750.267 Q37.5228 750.267 35.072 752.081 Q32.5894 753.895 32.5894 757.683 Q32.5894 762.171 35.6449 764.813 Q38.6686 767.454 43.8567 767.454 L64.0042 767.454 L64.0042 773.343 L28.3562 773.343 L28.3562 767.454 L33.8944 767.454 Q30.616 765.449 29.0564 762.648 Q27.4968 759.847 27.4968 755.996 Q27.4968 752.113 29.4702 749.407 Q31.4436 746.67 35.1993 745.365 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M46.212 684.032 Q39.7508 684.032 36.0905 686.705 Q32.3984 689.347 32.3984 693.994 Q32.3984 698.641 36.0905 701.315 Q39.7508 703.956 46.212 703.956 Q52.6732 703.956 56.3653 701.315 Q60.0256 698.641 60.0256 693.994 Q60.0256 689.347 56.3653 686.705 Q52.6732 684.032 46.212 684.032 M33.7671 703.956 Q30.5842 702.11 29.0564 699.309 Q27.4968 696.477 27.4968 692.562 Q27.4968 686.069 32.6531 682.026 Q37.8093 677.952 46.212 677.952 Q54.6147 677.952 59.771 682.026 Q64.9272 686.069 64.9272 692.562 Q64.9272 696.477 63.3994 699.309 Q61.8398 702.11 58.657 703.956 L64.0042 703.956 L64.0042 709.845 L14.479 709.845 L14.479 703.956 L33.7671 703.956 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M44.7161 637.753 L47.5806 637.753 L47.5806 664.68 Q53.6281 664.298 56.8109 661.051 Q59.9619 657.773 59.9619 651.949 Q59.9619 648.575 59.1344 645.424 Q58.3069 642.241 56.6518 639.122 L62.1899 639.122 Q63.5267 642.273 64.227 645.583 Q64.9272 648.893 64.9272 652.299 Q64.9272 660.829 59.9619 665.826 Q54.9967 670.791 46.5303 670.791 Q37.7774 670.791 32.6531 666.08 Q27.4968 661.338 27.4968 653.317 Q27.4968 646.124 32.1438 641.954 Q36.7589 637.753 44.7161 637.753 M42.9973 643.609 Q38.1912 643.673 35.3266 646.315 Q32.4621 648.925 32.4621 653.253 Q32.4621 658.155 35.2312 661.115 Q38.0002 664.043 43.0292 664.489 L42.9973 643.609 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M33.8307 607.484 Q33.2578 608.471 33.0032 609.648 Q32.7167 610.794 32.7167 612.195 Q32.7167 617.16 35.9632 619.834 Q39.1779 622.475 45.2253 622.475 L64.0042 622.475 L64.0042 628.364 L28.3562 628.364 L28.3562 622.475 L33.8944 622.475 Q30.6479 620.629 29.0883 617.669 Q27.4968 614.709 27.4968 610.476 Q27.4968 609.871 27.5923 609.139 Q27.656 608.407 27.8151 607.516 L33.8307 607.484 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip182)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"321.708,86.1857 329.543,87.4968 349.634,88.808 370.073,90.1192 382.782,91.4303 388.254,92.7415 390.309,94.0527 390.863,95.3638 396.321,96.675 396.575,97.9862 398.541,99.2973 408.368,100.608 417.49,101.92 428.869,103.231 430.29,104.542 432.263,105.853 439.115,107.164 439.622,108.475 442.048,109.787 444.379,111.098 444.492,112.409 447.515,113.72 448.568,115.031 449.997,116.342 452.765,117.654 455.407,118.965 456.511,120.276 456.653,121.587 458.93,122.898 459.223,124.209 461.428,125.521 465.032,126.832 465.099,128.143 469.529,129.454 473.446,130.765 474.545,132.076 482.283,133.388 482.747,134.699 485.149,136.01 485.268,137.321 485.939,138.632 489.345,139.943 489.407,141.255 497.118,142.566 497.287,143.877 497.588,145.188 498.012,146.499 498.644,147.81 499.772,149.122 500.705,150.433 501.022,151.744 503.306,153.055 503.922,154.366 504.062,155.677 506.69,156.989 507.368,158.3 507.513,159.611 509.421,160.922 509.661,162.233 511.054,163.544 513.743,164.856 513.939,166.167 516.034,167.478 516.59,168.789 518.327,170.1 520.111,171.411 522.449,172.723 523.395,174.034 523.75,175.345 525.492,175.345 526.373,176.656 527.108,177.967 530.576,179.278 533.001,180.589 533.327,180.589 534.649,181.901 538.953,183.212 541.132,184.523 542.851,185.834 546.593,187.145 549.126,188.456 550.427,189.768 553.418,189.768 560.538,191.079 560.917,192.39 561.293,193.701 561.47,195.012 563.196,196.323 564.538,197.635 564.967,198.946 565.817,200.257 566.496,201.568 566.667,202.879 566.783,204.19 567.215,205.502 573.857,205.502 574.412,206.813 576.56,208.124 577.28,209.435 578.785,210.746 578.881,212.057 580.022,213.369 580.843,214.68 581.447,215.991 582.309,217.302 583.456,218.613 586.566,218.613 586.614,219.924 587.33,221.236 588.927,222.547 590.299,223.858 592.038,223.858 592.251,225.169 594.093,225.169 594.647,225.169 594.915,226.48 597.147,227.791 598.425,229.103 598.584,230.414 600.105,230.414 600.359,230.414 601.135,231.725 602.325,231.725 604.369,233.036 605.299,234.347 605.47,235.658 608.956,236.97 610.25,238.281 610.627,239.592 610.956,240.903 612.152,240.903 613.358,242.214 613.692,243.525 614.523,244.837 614.814,246.148 615.94,247.459 617.154,248.77 617.869,250.081 618.297,251.392 618.78,252.704 620.132,254.015 620.532,255.326 620.775,256.637 621.274,256.637 622.908,257.948 624.384,259.259 627.854,260.571 628.714,261.882 629.54,263.193 630.399,264.504 630.832,265.815 631.215,267.126 632.179,268.438 632.653,268.438 632.727,269.749 634.074,269.749 635.72,271.06 636.019,272.371 636.047,272.371 636.276,273.682 637.579,274.993 638.284,276.304 638.629,277.616 639.491,278.927 639.59,280.238 640.015,281.549 641.121,282.86 642.73,284.171 642.899,284.171 643.403,285.483 643.406,285.483 643.773,286.794 645.832,286.794 646.363,288.105 647.313,289.416 648.163,289.416 648.276,289.416 648.296,290.727 649.912,292.038 649.926,293.35 650.109,294.661 651.299,294.661 652.128,295.972 652.352,295.972 653.781,295.972 653.947,297.283 655.729,298.594 656.549,298.594 657.008,299.905 657.648,301.217 658.2,302.528 658.208,303.839 658.595,305.15 658.822,306.461 658.888,307.772 658.892,309.084 659.092,310.395 659.191,310.395 660.295,310.395 660.438,310.395 660.757,311.706 661.864,313.017 662.714,313.017 663.007,313.017 665.212,313.017 666.305,314.328 667.672,315.639 668.051,316.951 668.203,318.262 668.57,319.573 668.816,319.573 668.883,319.573 669.789,320.884 669.824,322.195 670.603,323.506 670.957,324.818 671.147,326.129 672.239,327.44 672.663,328.751 673.026,330.062 673.228,331.373 673.313,331.373 673.417,332.685 676.755,333.996 677.23,333.996 677.629,335.307 678.016,336.618 678.329,336.618 679.153,337.929 679.626,339.24 680.497,340.552 680.861,341.863 681.083,343.174 682.578,344.485 682.648,345.796 682.911,347.107 684.687,348.419 684.963,349.73 685.344,351.041 685.362,352.352 685.452,353.663 685.602,354.974 686.067,354.974 686.495,356.286 686.531,356.286 687.368,357.597 688.186,358.908 688.806,360.219 688.933,360.219 689.052,360.219 689.723,360.219 690.577,361.53 690.865,362.841 691.587,364.152 691.667,365.464 691.933,366.775 692.939,368.086 693.129,368.086 693.191,368.086 693.334,369.397 693.352,370.708 694.707,372.019 696.92,373.331 700.902,373.331 701.071,373.331 701.372,373.331 701.796,373.331 702.28,374.642 702.428,374.642 702.564,375.953 702.793,377.264 703.556,377.264 703.911,378.575 704.489,378.575 704.806,378.575 704.987,379.886 705.602,381.198 706.202,382.509 707.09,382.509 707.476,383.82 707.706,383.82 707.846,383.82 708.347,385.131 708.476,386.442 708.91,387.753 709.578,389.065 709.674,390.376 710.175,391.687 710.474,391.687 710.729,392.998 711.152,392.998 711.297,392.998 711.595,394.309 712.871,395.62 713.205,395.62 713.446,395.62 714.53,396.932 714.601,398.243 714.838,398.243 717.489,399.554 717.527,399.554 717.528,400.865 717.723,400.865 718.527,402.176 718.58,403.487 719.125,404.799 719.279,406.11 719.818,406.11 720.374,406.11 721.427,407.421 722.111,407.421 723.53,408.732 723.895,408.732 724.181,410.043 726.233,410.043 726.403,411.354 727.179,411.354 727.41,412.666 727.534,412.666 729.953,413.977 730.157,413.977 730.678,415.288 730.892,415.288 731.052,416.599 731.142,417.91 731.3,419.221 731.467,420.533 732.35,421.844 733.144,423.155 733.376,424.466 733.455,425.777 734.36,425.777 734.378,427.088 735.922,428.4 736.437,429.711 736.643,431.022 736.719,432.333 736.785,432.333 737.324,433.644 737.712,434.955 738.183,436.267 738.433,436.267 739.608,437.578 740.17,438.889 741.104,440.2 741.267,441.511 742.371,442.822 742.737,442.822 743.403,444.134 743.584,445.445 744.534,446.756 744.916,446.756 745.118,448.067 745.141,449.378 745.848,450.689 745.933,452 745.988,453.312 746.05,454.623 746.635,454.623 747.007,455.934 747.44,457.245 749.624,458.556 750.377,458.556 750.958,459.867 752.027,461.179 752.138,462.49 752.385,463.801 752.403,465.112 752.91,465.112 752.937,466.423 752.973,467.734 754.211,467.734 754.494,469.046 755.268,470.357 756.249,471.668 756.451,472.979 756.675,474.29 757.111,475.601 757.361,476.913 758.208,478.224 759.42,479.535 759.948,480.846 760.317,482.157 760.598,483.468 760.947,484.78 761.418,486.091 761.775,487.402 763.882,488.713 764.195,490.024 764.322,490.024 764.34,491.335 764.701,491.335 765.077,491.335 765.254,491.335 765.319,492.647 765.482,493.958 766.98,493.958 767.677,495.269 767.926,496.58 767.98,497.891 768.322,497.891 768.751,497.891 768.988,499.202 769.368,500.514 769.601,500.514 769.944,501.825 770.28,501.825 770.451,501.825 770.567,501.825 770.999,501.825 771.177,503.136 772.613,504.447 773.197,505.758 773.201,507.069 773.48,508.381 773.894,509.692 774.021,511.003 775.955,512.314 776.297,513.625 776.538,514.936 777.495,516.248 778.196,516.248 779.721,517.559 780.12,518.87 780.344,518.87 780.867,520.181 781.064,520.181 781.522,521.492 781.542,522.803 782.249,524.115 782.569,524.115 782.665,524.115 783.806,524.115 784.23,525.426 784.335,526.737 784.545,528.048 784.627,528.048 785.231,528.048 785.455,529.359 785.47,530.67 786.093,530.67 786.127,531.982 787.241,531.982 788.349,533.293 790.398,533.293 790.6,534.604 791.114,534.604 791.552,535.915 792.711,535.915 792.808,537.226 792.876,538.537 793.328,539.848 793.382,541.16 794.083,541.16 794.318,542.471 795.597,543.782 796.001,545.093 796.036,545.093 796.849,546.404 797.244,547.715 797.88,549.027 798.083,550.338 798.23,551.649 798.699,551.649 799.226,552.96 800.145,554.271 800.931,554.271 801.328,555.582 801.501,556.894 801.612,558.205 801.95,559.516 802.209,559.516 802.368,559.516 802.946,560.827 803.037,562.138 803.474,563.449 804.427,564.761 804.919,564.761 804.949,566.072 804.975,567.383 804.99,568.694 805.256,570.005 805.283,571.316 805.683,572.628 808.153,572.628 808.585,573.939 809.083,573.939 809.254,573.939 809.489,575.25 810.325,576.561 810.361,577.872 810.958,579.183 811.052,580.495 811.42,581.806 811.906,583.117 812.74,583.117 814.034,583.117 814.208,584.428 814.389,585.739 814.411,585.739 814.74,585.739 814.862,587.05 815.001,588.362 815.249,589.673 816.669,590.984 817.142,590.984 817.476,590.984 818.307,590.984 818.598,590.984 819.117,592.295 819.587,593.606 819.724,593.606 819.995,594.917 820.129,596.229 820.464,597.54 820.648,598.851 820.75,600.162 820.938,600.162 821.653,600.162 822.081,600.162 822.564,600.162 822.98,601.473 823.916,601.473 823.927,602.784 824.134,604.096 824.316,604.096 824.559,604.096 824.603,605.407 825.167,606.718 826.692,606.718 826.896,608.029 827.369,609.34 828.168,609.34 828.451,610.651 828.517,611.963 828.741,613.274 829.036,614.585 831.261,615.896 831.478,617.207 831.638,617.207 831.697,618.518 831.839,619.83 832.498,619.83 832.827,621.141 833.324,621.141 833.42,622.452 834.183,622.452 834.616,622.452 834.999,622.452 835.963,622.452 836.149,623.763 836.511,623.763 837.043,625.074 837.838,626.385 838.343,627.697 838.457,629.008 838.966,630.319 839.131,631.63 839.504,631.63 839.803,631.63 840.06,631.63 840.708,632.941 840.928,634.252 841.104,635.563 841.319,636.875 841.363,636.875 841.783,638.186 842.068,638.186 842.413,638.186 842.628,639.497 842.861,640.808 843.275,640.808 843.374,640.808 843.799,640.808 844.905,640.808 845.013,642.119 845.649,643.43 846.514,643.43 847.187,643.43 847.557,643.43 847.745,644.742 848.139,646.053 848.176,647.364 848.719,648.675 850.147,648.675 850.284,649.986 851.097,649.986 851.128,651.297 852.08,651.297 852.55,652.609 852.691,653.92 852.917,655.231 853.696,655.231 853.71,655.231 853.893,655.231 853.919,656.542 854.35,657.853 854.434,659.164 854.796,660.476 855.185,661.787 855.691,663.098 855.912,663.098 855.951,664.409 855.984,665.72 856.646,667.031 856.808,668.343 857.731,668.343 857.984,669.654 858.451,670.965 859.202,672.276 859.337,673.587 859.513,673.587 860.792,673.587 861.055,674.898 861.102,676.21 861.16,677.521 861.432,677.521 861.984,677.521 861.992,677.521 862.304,678.832 862.379,678.832 862.606,678.832 862.672,678.832 862.676,678.832 862.776,680.143 862.876,680.143 863.044,681.454 863.165,682.765 863.172,684.077 863.734,685.388 863.863,686.699 863.979,688.01 864.46,689.321 864.541,689.321 864.64,690.632 864.756,691.944 865.4,693.255 865.411,694.566 865.648,694.566 866.421,695.877 866.806,697.188 866.999,698.499 867.28,699.811 868.344,701.122 870.089,701.122 870.634,702.433 870.754,703.744 871.124,705.055 871.158,706.366 871.456,706.366 871.835,706.366 871.987,706.366 872.354,706.366 873.573,706.366 873.608,706.366 873.983,707.678 874.387,707.678 874.722,708.989 874.741,708.989 874.931,708.989 875.379,710.3 876.023,710.3 876.235,711.611 876.447,711.611 876.81,711.611 877.012,711.611 877.201,711.611 877.295,712.922 877.81,714.233 878.432,715.545 880.539,715.545 881.413,715.545 881.8,715.545 882.937,715.545 882.939,716.856 883.034,718.167 883.41,718.167 884.281,718.167 884.645,718.167 884.695,719.478 884.867,719.478 885.177,720.789 885.189,722.1 886.362,722.1 886.432,722.1 886.695,722.1 886.849,723.411 887.356,724.723 887.626,726.034 888.025,727.345 888.471,727.345 888.599,728.656 888.747,728.656 889.128,728.656 889.146,728.656 889.237,728.656 889.386,728.656 889.652,729.967 889.999,731.278 890.024,732.59 890.279,732.59 890.595,733.901 891.152,733.901 891.97,733.901 892.178,735.212 892.59,735.212 893.28,736.523 894.361,736.523 894.649,736.523 895.371,736.523 895.451,736.523 895.717,736.523 896.24,737.834 896.561,739.145 896.723,739.145 897.118,739.145 897.136,739.145 897.159,740.457 897.211,741.768 897.961,743.079 898.491,743.079 899.036,744.39 899.502,745.701 899.701,747.012 900.704,747.012 900.777,748.324 902.068,749.635 902.222,750.946 902.359,752.257 903.547,753.568 903.954,754.879 904.284,756.191 904.763,757.502 906.064,757.502 906.349,757.502 906.357,758.813 906.397,760.124 906.577,760.124 907.695,760.124 907.771,761.435 908.771,761.435 909.386,761.435 909.986,761.435 910.694,762.746 911.26,762.746 912.131,762.746 912.26,762.746 912.694,762.746 913.308,764.058 913.362,764.058 913.458,764.058 913.474,765.369 913.959,765.369 914.25,766.68 914.513,766.68 914.527,767.991 915.379,767.991 915.769,769.302 916.58,770.613 916.655,770.613 917.634,771.925 917.941,773.236 918.314,773.236 918.385,773.236 919.558,774.547 919.947,775.858 920.025,777.169 920.452,778.48 920.541,779.792 921.273,779.792 921.312,779.792 921.632,781.103 921.952,782.414 922.184,783.725 922.311,783.725 922.331,785.036 922.364,785.036 922.909,785.036 923.063,785.036 923.922,786.347 924.078,787.659 925.211,787.659 925.562,788.97 925.684,790.281 926.515,791.592 926.844,792.903 927.314,792.903 927.965,792.903 930.187,792.903 931.194,792.903 931.552,794.214 932.339,795.526 933.568,796.837 933.737,796.837 934.462,796.837 934.836,796.837 934.926,796.837 935.084,796.837 935.251,796.837 936.134,796.837 936.928,796.837 937.16,796.837 937.239,796.837 937.318,798.148 937.883,799.459 937.889,800.77 938.162,800.77 939.706,800.77 940.086,802.081 940.221,802.081 940.427,802.081 940.503,802.081 940.521,803.393 941.108,803.393 941.496,803.393 941.967,803.393 942.542,804.704 942.686,806.015 943.275,807.326 943.384,808.637 943.392,808.637 943.656,809.948 943.954,809.948 944.888,809.948 945.051,809.948 946.087,811.259 946.155,811.259 946.58,812.571 946.745,813.882 947.007,815.193 947.187,815.193 947.368,815.193 947.608,816.504 948.318,816.504 948.587,817.815 948.902,817.815 948.925,817.815 948.993,819.126 949.632,819.126 949.717,819.126 949.772,819.126 949.834,819.126 949.895,820.438 950.791,820.438 951.224,820.438 951.396,821.749 952.104,823.06 952.521,824.371 952.735,825.682 953.408,825.682 954.11,826.993 954.259,828.305 954.742,828.305 955.811,828.305 955.922,828.305 955.949,829.616 956.169,829.616 956.187,829.616 956.721,829.616 956.757,829.616 956.823,830.927 957.966,832.238 958.041,833.549 958.278,833.549 958.56,834.86 959.052,834.86 959.688,836.172 959.859,837.483 960.033,837.483 960.235,837.483 960.459,837.483 960.522,838.794 960.895,838.794 961.145,838.794 961.992,838.794 963.204,838.794 963.732,838.794 964.101,838.794 964.382,838.794 964.731,838.794 965.202,838.794 965.559,838.794 966.302,840.105 966.974,841.416 967.666,841.416 967.979,841.416 968.124,841.416 969.053,842.727 969.103,842.727 969.266,842.727 969.741,844.039 969.831,845.35 971.461,845.35 971.71,845.35 971.753,846.661 971.764,846.661 972.772,846.661 973.152,846.661 973.728,846.661 974.364,847.972 974.732,849.283 974.961,849.283 975.32,850.594 975.386,851.906 975.962,853.217 976.397,853.217 976.967,854.528 976.981,854.528 976.985,854.528 977.264,854.528 977.537,855.839 977.678,855.839 977.805,855.839 978.82,857.15 979.233,858.461 979.739,858.461 979.793,859.773 980.081,859.773 980.216,861.084 980.322,861.084 981.279,861.084 982.269,862.395 982.702,863.706 982.798,865.017 982.985,866.328 983.506,866.328 983.904,866.328 984.651,866.328 985.045,867.64 985.306,867.64 985.326,867.64 985.499,868.951 986.033,868.951 986.849,870.262 988.014,870.262 988.119,870.262 988.329,870.262 989.239,870.262 989.254,870.262 989.911,870.262 991.341,871.573 991.567,872.884 992.133,872.884 993.744,874.195 994.384,874.195 995.336,874.195 996.592,874.195 996.616,875.507 996.66,875.507 997.112,875.507 997.166,875.507 997.792,876.818 998.017,878.129 998.102,878.129 998.115,879.44 998.49,880.751 998.672,882.062 999.078,883.374 999.125,884.685 999.381,884.685 999.427,885.996 999.721,887.307 999.785,887.307 1000.09,888.618 1000.63,888.618 1001.03,888.618 1001.66,888.618 1001.87,888.618 1002.01,888.618 1003.01,888.618 1003.93,888.618 1005.11,888.618 1005.28,888.618 1005.4,888.618 1005.73,888.618 1006.22,889.929 1006.52,891.241 1006.73,891.241 1006.82,891.241 1007.2,892.552 1007.26,892.552 1008.21,892.552 1008.73,892.552 1008.76,892.552 1008.77,892.552 1009.04,892.552 1009.07,892.552 1009.28,893.863 1009.47,893.863 1011.97,895.174 1012.37,895.174 1013.27,895.174 1014.11,895.174 1014.15,895.174 1014.74,895.174 1014.84,895.174 1015.2,895.174 1015.69,895.174 1015.99,896.485 1017.99,896.485 1018.17,896.485 1018.65,896.485 1018.78,896.485 1019.03,896.485 1020.06,897.796 1020.45,897.796 1020.49,899.107 1021.7,900.419 1022.9,900.419 1023.35,901.73 1023.37,901.73 1023.78,901.73 1023.91,901.73 1024.25,901.73 1024.43,901.73 1024.48,903.041 1024.53,903.041 1024.89,904.352 1026.76,904.352 1027.71,904.352 1027.92,904.352 1028.39,904.352 1028.95,904.352 1028.95,905.663 1029,906.974 1030.46,908.286 1030.68,908.286 1031.15,908.286 1032.23,908.286 1032.3,908.286 1032.53,908.286 1032.82,908.286 1033.46,909.597 1035.04,909.597 1035.26,909.597 1035.29,910.908 1035.48,910.908 1035.62,910.908 1036.61,910.908 1036.98,912.219 1037.2,912.219 1039.93,912.219 1040.83,912.219 1041.62,912.219 1041.97,913.53 1042.13,913.53 1042.24,913.53 1042.75,913.53 1042.92,913.53 1043.09,914.841 1044.49,914.841 1044.71,914.841 1044.89,914.841 1045.09,916.153 1045.1,916.153 1045.57,916.153 1045.76,917.464 1046.41,917.464 1046.64,917.464 1047.94,918.775 1048.8,918.775 1049.09,920.086 1049.1,921.397 1049.43,921.397 1050.07,922.708 1051.52,924.02 1051.53,924.02 1051.92,924.02 1051.96,924.02 1052.5,924.02 1054.07,924.02 1054.26,925.331 1054.62,926.642 1054.91,926.642 1056.33,926.642 1056.48,926.642 1056.63,927.953 1056.7,927.953 1057.7,927.953 1058.13,927.953 1058.22,927.953 1058.58,927.953 1058.97,927.953 1059.47,927.953 1059.73,927.953 1059.77,927.953 1059.77,929.264 1060.13,930.575 1060.43,930.575 1060.59,930.575 1060.87,931.887 1061.47,933.198 1061.77,933.198 1062.24,933.198 1062.99,933.198 1063.12,933.198 1064.16,934.509 1064.38,935.82 1064.64,937.131 1064.84,937.131 1064.89,937.131 1064.94,937.131 1066.09,937.131 1066.16,938.442 1066.56,938.442 1066.83,938.442 1066.95,938.442 1066.96,938.442 1067.44,939.754 1067.52,939.754 1067.65,939.754 1067.76,939.754 1068.24,939.754 1068.42,939.754 1068.54,939.754 1069.18,939.754 1069.19,939.754 1069.58,941.065 1069.67,942.376 1070.21,942.376 1070.59,942.376 1070.71,943.687 1070.78,943.687 1071.06,943.687 1072.13,943.687 1074.42,943.687 1074.54,943.687 1074.64,944.998 1074.91,944.998 1074.94,944.998 1074.97,946.309 1075.38,947.621 1077.4,948.932 1077.77,948.932 1078.51,948.932 1079.16,948.932 1079.87,950.243 1080.02,950.243 1080.96,951.554 1081.07,952.865 1081.08,952.865 1081.14,954.176 1081.51,955.488 1081.59,955.488 1082.22,955.488 1086.03,956.799 1086.47,958.11 1086.58,959.421 1086.72,959.421 1086.82,959.421 1088.07,960.732 1088.48,960.732 1088.96,960.732 1088.97,960.732 1090.63,960.732 1091.14,960.732 1091.41,960.732 1091.81,960.732 1092.38,960.732 1093.44,960.732 1093.78,960.732 1093.81,960.732 1094.38,960.732 1095.56,962.043 1095.66,963.355 1095.96,963.355 1097.06,963.355 1097.4,964.666 1100.02,964.666 1100.35,964.666 1100.94,964.666 1101,964.666 1101.75,964.666 1102.82,964.666 1102.88,965.977 1103.29,965.977 1103.49,965.977 1104.56,965.977 1104.57,967.288 1105.04,968.599 1105.85,968.599 1106.01,968.599 1106.14,968.599 1107.33,968.599 1107.74,968.599 1108.07,968.599 1108.55,968.599 1109.11,969.91 1110.14,969.91 1110.18,969.91 1111.56,969.91 1114.48,969.91 1117.09,969.91 1117.26,969.91 1118.01,971.222 1118.03,971.222 1118.31,971.222 1118.76,972.533 1119.55,972.533 1120.36,972.533 1121.42,972.533 1121.73,972.533 1123.34,972.533 1123.73,972.533 1123.81,972.533 1124.24,972.533 1124.32,972.533 1125.42,972.533 1125.74,972.533 1125.97,972.533 1126.12,972.533 1126.12,973.844 1127.01,975.155 1127.2,976.466 1127.71,976.466 1127.86,976.466 1128.01,977.777 1129.35,977.777 1129.47,977.777 1130.3,977.777 1130.63,977.777 1131.7,979.089 1132.9,980.4 1133.76,981.711 1135.34,981.711 1135.51,983.022 1135.82,984.333 1136.12,984.333 1136.98,985.644 1137.35,985.644 1140.89,986.956 1141.1,986.956 1141.15,988.267 1141.45,989.578 1141.45,990.889 1141.67,990.889 1141.67,990.889 1143.65,992.2 1143.87,992.2 1144.31,992.2 1145.19,993.511 1146.09,994.822 1146.33,994.822 1146.47,994.822 1147.06,994.822 1147.09,996.134 1147.12,997.445 1147.17,997.445 1147.44,997.445 1149.87,997.445 1150.03,998.756 1150.36,998.756 1150.53,998.756 1150.79,998.756 1151.39,998.756 1152.37,998.756 1152.78,998.756 1153.28,1000.07 1153.68,1000.07 1155.18,1000.07 1155.38,1001.38 1155.89,1001.38 1156.31,1001.38 1156.52,1001.38 1157.89,1001.38 1157.92,1002.69 1158.04,1002.69 1159.73,1002.69 1160.61,1002.69 1161.53,1004 1161.75,1004 1161.83,1004 1162.34,1004 1163.47,1004 1163.64,1004 1163.96,1005.31 1164.03,1006.62 1164.31,1006.62 1166.33,1007.93 1166.85,1009.25 1166.95,1010.56 1168.97,1011.87 1170.09,1011.87 1170.58,1013.18 1170.76,1013.18 1172.84,1013.18 1173.52,1013.18 1173.62,1013.18 1175.54,1013.18 1176.41,1014.49 1178.15,1014.49 1178.52,1014.49 1179.1,1014.49 1179.17,1014.49 1179.54,1015.8 1179.75,1015.8 1180.48,1017.11 1180.75,1017.11 1181.32,1017.11 1181.86,1018.42 1182.6,1018.42 1183.02,1018.42 1183.58,1018.42 1184,1018.42 1186.05,1018.42 1186.49,1018.42 1186.58,1018.42 1186.77,1018.42 1188.83,1018.42 1189.28,1018.42 1190.63,1018.42 1191.03,1019.73 1193.01,1021.05 1195.13,1021.05 1195.35,1021.05 1197.24,1022.36 1197.53,1022.36 1200.4,1022.36 1201.58,1022.36 1201.77,1023.67 1201.8,1023.67 1201.9,1023.67 1202.27,1023.67 1202.46,1023.67 1202.86,1023.67 1202.91,1023.67 1203.21,1023.67 1203.51,1023.67 1203.87,1023.67 1205.96,1024.98 1206.94,1026.29 1210,1026.29 1210.3,1026.29 1210.63,1027.6 1210.98,1027.6 1211.26,1028.91 1213.06,1028.91 1213.72,1030.22 1215.75,1030.22 1219.77,1030.22 1221.89,1031.54 1223.85,1031.54 1224.27,1031.54 1225.49,1031.54 1227.13,1031.54 1228.27,1031.54 1228.68,1031.54 1232.74,1031.54 1232.78,1031.54 1233.54,1032.85 1234.24,1032.85 1235.85,1034.16 1237.25,1034.16 1239.07,1034.16 1240.04,1035.47 1240.77,1035.47 1242.46,1036.78 1245.75,1036.78 1245.77,1038.09 1246.88,1038.09 1248.88,1038.09 1249.51,1039.4 1249.54,1039.4 1251.72,1039.4 1252.87,1039.4 1252.89,1039.4 1253.85,1039.4 1255.18,1040.71 1255.3,1040.71 1257.09,1042.02 1258.04,1042.02 1258.41,1042.02 1258.68,1043.34 1260.41,1043.34 1263.56,1043.34 1263.92,1043.34 1264.66,1043.34 1265.25,1043.34 1266.52,1044.65 1267.95,1044.65 1268.16,1044.65 1268.42,1044.65 1269.94,1044.65 1271.22,1044.65 1273.1,1045.96 1273.36,1045.96 1273.46,1045.96 1273.8,1047.27 1274.49,1047.27 1278.43,1047.27 1278.76,1047.27 1279.17,1047.27 1281.18,1047.27 1282.28,1048.58 1283.65,1048.58 1284.75,1048.58 1284.85,1048.58 1284.92,1048.58 1285.29,1048.58 1288.99,1049.89 1289.82,1049.89 1290.26,1049.89 1290.36,1049.89 1291.85,1049.89 1294.83,1051.2 1298.66,1052.51 1299.35,1052.51 1299.45,1052.51 1301.19,1052.51 1302.98,1053.82 1304.72,1055.14 1305.71,1056.45 1306.62,1057.76 1306.66,1057.76 1308.36,1057.76 1308.83,1057.76 1311.72,1059.07 1312.89,1059.07 1321.79,1059.07 1322.54,1059.07 1329.9,1059.07 1330.79,1059.07 1330.98,1059.07 1331.19,1060.38 1331.8,1060.38 1332.02,1061.69 1335.48,1061.69 1336.68,1061.69 1337.55,1061.69 1338.89,1063 1339.29,1063 1339.6,1063 1340.23,1064.31 1340.77,1064.31 1344.67,1064.31 1344.93,1064.31 1345.23,1064.31 1345.23,1064.31 1347.43,1064.31 1348.98,1064.31 1349.87,1064.31 1350.87,1064.31 1350.9,1064.31 1353.71,1065.63 1353.81,1065.63 1355.42,1066.94 1357.07,1066.94 1359.17,1066.94 1361.71,1066.94 1365.31,1066.94 1367.74,1066.94 1367.81,1066.94 1369.41,1068.25 1370.12,1068.25 1370.64,1068.25 1370.73,1068.25 1371.32,1069.56 1372.75,1069.56 1374.36,1069.56 1380.19,1069.56 1383.33,1069.56 1384.27,1069.56 1385.65,1069.56 1387.26,1070.87 1394.82,1070.87 1395.52,1072.18 1396.8,1072.18 1396.95,1073.49 1401.02,1073.49 1405.55,1073.49 1409.74,1073.49 1410.72,1073.49 1414.42,1073.49 1415.04,1073.49 1417.5,1073.49 1423.3,1074.8 1425.67,1074.8 1434.66,1076.11 1434.99,1077.43 1437.32,1077.43 1439.64,1077.43 1443.83,1077.43 1446.24,1077.43 1449.55,1077.43 1453.29,1077.43 1455.37,1078.74 1458.24,1080.05 1458.97,1080.05 1460.88,1080.05 1462.46,1080.05 1470.31,1080.05 1476.89,1080.05 1477.59,1080.05 1480.09,1081.36 1485.03,1082.67 1486.07,1082.67 1492.78,1082.67 1498.61,1082.67 1502.44,1082.67 1506.76,1082.67 1508.51,1082.67 1509.5,1082.67 1510.41,1082.67 1515.5,1082.67 1519.39,1083.98 1534.98,1083.98 1535.8,1083.98 1542.67,1083.98 1543.57,1085.29 1544.02,1085.29 1557.49,1085.29 1557.87,1086.6 1559.2,1086.6 1572.39,1087.92 1573.19,1087.92 1575.11,1087.92 1591.05,1087.92 1595.95,1089.23 1599.3,1089.23 1600.74,1089.23 1609.38,1090.54 1626.52,1091.85 1627.08,1091.85 1638.44,1091.85 1638.77,1091.85 1654.4,1093.16 1659.16,1093.16 1662.03,1093.16 1681.14,1094.47 1683.88,1094.47 1683.92,1095.78 1685.15,1097.09 1688.82,1097.09 1723.17,1097.09 1730.18,1098.4 1745.88,1099.72 1747.35,1099.72 1753.78,1101.03 1761.66,1101.03 1766.12,1102.34 1769.19,1103.65 1776.17,1103.65 1799.74,1103.65 1813.17,1103.65 1814.94,1104.96 1830.3,1104.96 1838.45,1106.27 1842.4,1107.58 1858.18,1107.58 1884.93,1107.58 1887.71,1107.58 1888.93,1107.58 1913.15,1108.89 1933.96,1108.89 1949.66,1108.89 1957.56,1108.89 1969.9,1108.89 1972.97,1108.89 2018.72,1108.89 2042.23,1108.89 2046.19,1108.89 2089.82,1110.2 2116.93,1110.2 2205.37,1111.52 2293.6,1111.52 \"/>\n<polyline clip-path=\"url(#clip182)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"321.708,1371.13 329.543,1369.82 349.634,1368.5 370.073,1367.19 382.782,1365.88 388.254,1364.57 390.309,1363.26 390.863,1361.95 396.321,1360.64 396.575,1359.33 398.541,1358.01 408.368,1356.7 417.49,1355.39 428.869,1354.08 430.29,1352.77 432.263,1351.46 439.115,1350.15 439.622,1348.84 442.048,1347.53 444.379,1346.21 444.492,1344.9 447.515,1343.59 448.568,1342.28 449.997,1340.97 452.765,1339.66 455.407,1338.35 456.511,1337.04 456.653,1335.73 458.93,1334.41 459.223,1333.1 461.428,1331.79 465.032,1330.48 465.099,1329.17 469.529,1327.86 473.446,1326.55 474.545,1325.24 482.283,1323.92 482.747,1322.61 485.149,1321.3 485.268,1319.99 485.939,1318.68 489.345,1317.37 489.407,1316.06 497.118,1314.75 497.287,1313.44 497.588,1312.12 498.012,1310.81 498.644,1309.5 499.772,1308.19 500.705,1306.88 501.022,1305.57 503.306,1304.26 503.922,1302.95 504.062,1301.63 506.69,1300.32 507.368,1299.01 507.513,1297.7 509.421,1296.39 509.661,1295.08 511.054,1293.77 513.743,1292.46 513.939,1291.15 516.034,1289.83 516.59,1288.52 518.327,1287.21 520.111,1285.9 522.449,1284.59 523.395,1283.28 523.75,1281.97 525.492,1283.28 525.492,1284.59 525.492,1285.9 525.492,1287.21 525.492,1288.52 525.492,1289.83 525.492,1291.15 525.492,1292.46 525.492,1293.77 525.492,1295.08 526.373,1293.77 527.108,1292.46 530.576,1291.15 533.001,1289.83 533.327,1291.15 534.649,1289.83 538.953,1288.52 541.132,1287.21 542.851,1285.9 546.593,1284.59 549.126,1283.28 550.427,1281.97 553.418,1283.28 560.538,1281.97 560.917,1280.66 561.293,1279.35 561.47,1278.03 563.196,1276.72 564.538,1275.41 564.967,1274.1 565.817,1272.79 566.496,1271.48 566.667,1270.17 566.783,1268.86 567.215,1267.54 573.857,1268.86 574.412,1267.54 576.56,1266.23 577.28,1264.92 578.785,1263.61 578.881,1262.3 580.022,1260.99 580.843,1259.68 581.447,1258.37 582.309,1257.06 583.456,1255.74 586.566,1257.06 586.614,1255.74 587.33,1254.43 588.927,1253.12 590.299,1251.81 592.038,1253.12 592.251,1251.81 594.093,1253.12 594.647,1254.43 594.915,1253.12 597.147,1251.81 598.425,1250.5 598.584,1249.19 600.105,1250.5 600.359,1251.81 601.135,1250.5 602.325,1251.81 604.369,1250.5 605.299,1249.19 605.47,1247.88 608.956,1246.57 610.25,1245.25 610.627,1243.94 610.956,1242.63 612.152,1243.94 613.358,1242.63 613.692,1241.32 614.523,1240.01 614.814,1238.7 615.94,1237.39 617.154,1236.08 617.869,1234.77 618.297,1233.45 618.78,1232.14 620.132,1230.83 620.532,1229.52 620.775,1228.21 621.274,1229.52 622.908,1228.21 624.384,1226.9 627.854,1225.59 628.714,1224.28 629.54,1222.97 630.399,1221.65 630.832,1220.34 631.215,1219.03 632.179,1217.72 632.653,1219.03 632.727,1217.72 634.074,1219.03 635.72,1217.72 636.019,1216.41 636.047,1217.72 636.276,1216.41 637.579,1215.1 638.284,1213.79 638.629,1212.48 639.491,1211.16 639.59,1209.85 640.015,1208.54 641.121,1207.23 642.73,1205.92 642.899,1207.23 643.403,1205.92 643.406,1207.23 643.773,1205.92 645.832,1207.23 646.363,1205.92 647.313,1204.61 648.163,1205.92 648.276,1207.23 648.296,1205.92 649.912,1204.61 649.926,1203.3 650.109,1201.99 651.299,1203.3 652.128,1201.99 652.352,1203.3 653.781,1204.61 653.947,1203.3 655.729,1201.99 656.549,1203.3 657.008,1201.99 657.648,1200.68 658.2,1199.36 658.208,1198.05 658.595,1196.74 658.822,1195.43 658.888,1194.12 658.892,1192.81 659.092,1191.5 659.191,1192.81 660.295,1194.12 660.438,1195.43 660.757,1194.12 661.864,1192.81 662.714,1194.12 663.007,1195.43 665.212,1196.74 666.305,1195.43 667.672,1194.12 668.051,1192.81 668.203,1191.5 668.57,1190.19 668.816,1191.5 668.883,1192.81 669.789,1191.5 669.824,1190.19 670.603,1188.87 670.957,1187.56 671.147,1186.25 672.239,1184.94 672.663,1183.63 673.026,1182.32 673.228,1181.01 673.313,1182.32 673.417,1181.01 676.755,1179.7 677.23,1181.01 677.629,1179.7 678.016,1178.39 678.329,1179.7 679.153,1178.39 679.626,1177.07 680.497,1175.76 680.861,1174.45 681.083,1173.14 682.578,1171.83 682.648,1170.52 682.911,1169.21 684.687,1167.9 684.963,1166.59 685.344,1165.27 685.362,1163.96 685.452,1162.65 685.602,1161.34 686.067,1162.65 686.495,1161.34 686.531,1162.65 687.368,1161.34 688.186,1160.03 688.806,1158.72 688.933,1160.03 689.052,1161.34 689.723,1162.65 690.577,1161.34 690.865,1160.03 691.587,1158.72 691.667,1157.41 691.933,1156.1 692.939,1154.78 693.129,1156.1 693.191,1157.41 693.334,1156.1 693.352,1154.78 694.707,1153.47 696.92,1152.16 700.902,1153.47 701.071,1154.78 701.372,1156.1 701.796,1157.41 702.28,1156.1 702.428,1157.41 702.564,1156.1 702.793,1154.78 703.556,1156.1 703.911,1154.78 704.489,1156.1 704.806,1157.41 704.987,1156.1 705.602,1154.78 706.202,1153.47 707.09,1154.78 707.476,1153.47 707.706,1154.78 707.846,1156.1 708.347,1154.78 708.476,1153.47 708.91,1152.16 709.578,1150.85 709.674,1149.54 710.175,1148.23 710.474,1149.54 710.729,1148.23 711.152,1149.54 711.297,1150.85 711.595,1149.54 712.871,1148.23 713.205,1149.54 713.446,1150.85 714.53,1149.54 714.601,1148.23 714.838,1149.54 717.489,1148.23 717.527,1149.54 717.528,1148.23 717.723,1149.54 718.527,1148.23 718.58,1146.92 719.125,1145.61 719.279,1144.3 719.818,1145.61 720.374,1146.92 721.427,1145.61 722.111,1146.92 723.53,1145.61 723.895,1146.92 724.181,1145.61 726.233,1146.92 726.403,1145.61 727.179,1146.92 727.41,1145.61 727.534,1146.92 729.953,1145.61 730.157,1146.92 730.678,1145.61 730.892,1146.92 731.052,1145.61 731.142,1144.3 731.3,1142.98 731.467,1141.67 732.35,1140.36 733.144,1139.05 733.376,1137.74 733.455,1136.43 734.36,1137.74 734.378,1136.43 735.922,1135.12 736.437,1133.81 736.643,1132.49 736.719,1131.18 736.785,1132.49 737.324,1131.18 737.712,1129.87 738.183,1128.56 738.433,1129.87 739.608,1128.56 740.17,1127.25 741.104,1125.94 741.267,1124.63 742.371,1123.32 742.737,1124.63 743.403,1123.32 743.584,1122.01 744.534,1120.69 744.916,1122.01 745.118,1120.69 745.141,1119.38 745.848,1118.07 745.933,1116.76 745.988,1115.45 746.05,1114.14 746.635,1115.45 747.007,1114.14 747.44,1112.83 749.624,1111.52 750.377,1112.83 750.958,1111.52 752.027,1110.2 752.138,1108.89 752.385,1107.58 752.403,1106.27 752.91,1107.58 752.937,1106.27 752.973,1104.96 754.211,1106.27 754.494,1104.96 755.268,1103.65 756.249,1102.34 756.451,1101.03 756.675,1099.72 757.111,1098.4 757.361,1097.09 758.208,1095.78 759.42,1094.47 759.948,1093.16 760.317,1091.85 760.598,1090.54 760.947,1089.23 761.418,1087.92 761.775,1086.6 763.882,1085.29 764.195,1083.98 764.322,1085.29 764.34,1083.98 764.701,1085.29 765.077,1086.6 765.254,1087.92 765.319,1086.6 765.482,1085.29 766.98,1086.6 767.677,1085.29 767.926,1083.98 767.98,1082.67 768.322,1083.98 768.751,1085.29 768.988,1083.98 769.368,1082.67 769.601,1083.98 769.944,1082.67 770.28,1083.98 770.451,1085.29 770.567,1086.6 770.999,1087.92 771.177,1086.6 772.613,1085.29 773.197,1083.98 773.201,1082.67 773.48,1081.36 773.894,1080.05 774.021,1078.74 775.955,1077.43 776.297,1076.11 776.538,1074.8 777.495,1073.49 778.196,1074.8 779.721,1073.49 780.12,1072.18 780.344,1073.49 780.867,1072.18 781.064,1073.49 781.522,1072.18 781.542,1070.87 782.249,1069.56 782.569,1070.87 782.665,1072.18 783.806,1073.49 784.23,1072.18 784.335,1070.87 784.545,1069.56 784.627,1070.87 785.231,1072.18 785.455,1070.87 785.47,1069.56 786.093,1070.87 786.127,1069.56 787.241,1070.87 788.349,1069.56 790.398,1070.87 790.6,1069.56 791.114,1070.87 791.552,1069.56 792.711,1070.87 792.808,1069.56 792.876,1068.25 793.328,1066.94 793.382,1065.63 794.083,1066.94 794.318,1065.63 795.597,1064.31 796.001,1063 796.036,1064.31 796.849,1063 797.244,1061.69 797.88,1060.38 798.083,1059.07 798.23,1057.76 798.699,1059.07 799.226,1057.76 800.145,1056.45 800.931,1057.76 801.328,1056.45 801.501,1055.14 801.612,1053.82 801.95,1052.51 802.209,1053.82 802.368,1055.14 802.946,1053.82 803.037,1052.51 803.474,1051.2 804.427,1049.89 804.919,1051.2 804.949,1049.89 804.975,1048.58 804.99,1047.27 805.256,1045.96 805.283,1044.65 805.683,1043.34 808.153,1044.65 808.585,1043.34 809.083,1044.65 809.254,1045.96 809.489,1044.65 810.325,1043.34 810.361,1042.02 810.958,1040.71 811.052,1039.4 811.42,1038.09 811.906,1036.78 812.74,1038.09 814.034,1039.4 814.208,1038.09 814.389,1036.78 814.411,1038.09 814.74,1039.4 814.862,1038.09 815.001,1036.78 815.249,1035.47 816.669,1034.16 817.142,1035.47 817.476,1036.78 818.307,1038.09 818.598,1039.4 819.117,1038.09 819.587,1036.78 819.724,1038.09 819.995,1036.78 820.129,1035.47 820.464,1034.16 820.648,1032.85 820.75,1031.54 820.938,1032.85 821.653,1034.16 822.081,1035.47 822.564,1036.78 822.98,1035.47 823.916,1036.78 823.927,1035.47 824.134,1034.16 824.316,1035.47 824.559,1036.78 824.603,1035.47 825.167,1034.16 826.692,1035.47 826.896,1034.16 827.369,1032.85 828.168,1034.16 828.451,1032.85 828.517,1031.54 828.741,1030.22 829.036,1028.91 831.261,1027.6 831.478,1026.29 831.638,1027.6 831.697,1026.29 831.839,1024.98 832.498,1026.29 832.827,1024.98 833.324,1026.29 833.42,1024.98 834.183,1026.29 834.616,1027.6 834.999,1028.91 835.963,1030.22 836.149,1028.91 836.511,1030.22 837.043,1028.91 837.838,1027.6 838.343,1026.29 838.457,1024.98 838.966,1023.67 839.131,1022.36 839.504,1023.67 839.803,1024.98 840.06,1026.29 840.708,1024.98 840.928,1023.67 841.104,1022.36 841.319,1021.05 841.363,1022.36 841.783,1021.05 842.068,1022.36 842.413,1023.67 842.628,1022.36 842.861,1021.05 843.275,1022.36 843.374,1023.67 843.799,1024.98 844.905,1026.29 845.013,1024.98 845.649,1023.67 846.514,1024.98 847.187,1026.29 847.557,1027.6 847.745,1026.29 848.139,1024.98 848.176,1023.67 848.719,1022.36 850.147,1023.67 850.284,1022.36 851.097,1023.67 851.128,1022.36 852.08,1023.67 852.55,1022.36 852.691,1021.05 852.917,1019.73 853.696,1021.05 853.71,1022.36 853.893,1023.67 853.919,1022.36 854.35,1021.05 854.434,1019.73 854.796,1018.42 855.185,1017.11 855.691,1015.8 855.912,1017.11 855.951,1015.8 855.984,1014.49 856.646,1013.18 856.808,1011.87 857.731,1013.18 857.984,1011.87 858.451,1010.56 859.202,1009.25 859.337,1007.93 859.513,1009.25 860.792,1010.56 861.055,1009.25 861.102,1007.93 861.16,1006.62 861.432,1007.93 861.984,1009.25 861.992,1010.56 862.304,1009.25 862.379,1010.56 862.606,1011.87 862.672,1013.18 862.676,1014.49 862.776,1013.18 862.876,1014.49 863.044,1013.18 863.165,1011.87 863.172,1010.56 863.734,1009.25 863.863,1007.93 863.979,1006.62 864.46,1005.31 864.541,1006.62 864.64,1005.31 864.756,1004 865.4,1002.69 865.411,1001.38 865.648,1002.69 866.421,1001.38 866.806,1000.07 866.999,998.756 867.28,997.445 868.344,996.134 870.089,997.445 870.634,996.134 870.754,994.822 871.124,993.511 871.158,992.2 871.456,993.511 871.835,994.822 871.987,996.134 872.354,997.445 873.573,998.756 873.608,1000.07 873.983,998.756 874.387,1000.07 874.722,998.756 874.741,1000.07 874.931,1001.38 875.379,1000.07 876.023,1001.38 876.235,1000.07 876.447,1001.38 876.81,1002.69 877.012,1004 877.201,1005.31 877.295,1004 877.81,1002.69 878.432,1001.38 880.539,1002.69 881.413,1004 881.8,1005.31 882.937,1006.62 882.939,1005.31 883.034,1004 883.41,1005.31 884.281,1006.62 884.645,1007.93 884.695,1006.62 884.867,1007.93 885.177,1006.62 885.189,1005.31 886.362,1006.62 886.432,1007.93 886.695,1009.25 886.849,1007.93 887.356,1006.62 887.626,1005.31 888.025,1004 888.471,1005.31 888.599,1004 888.747,1005.31 889.128,1006.62 889.146,1007.93 889.237,1009.25 889.386,1010.56 889.652,1009.25 889.999,1007.93 890.024,1006.62 890.279,1007.93 890.595,1006.62 891.152,1007.93 891.97,1009.25 892.178,1007.93 892.59,1009.25 893.28,1007.93 894.361,1009.25 894.649,1010.56 895.371,1011.87 895.451,1013.18 895.717,1014.49 896.24,1013.18 896.561,1011.87 896.723,1013.18 897.118,1014.49 897.136,1015.8 897.159,1014.49 897.211,1013.18 897.961,1011.87 898.491,1013.18 899.036,1011.87 899.502,1010.56 899.701,1009.25 900.704,1010.56 900.777,1009.25 902.068,1007.93 902.222,1006.62 902.359,1005.31 903.547,1004 903.954,1002.69 904.284,1001.38 904.763,1000.07 906.064,1001.38 906.349,1002.69 906.357,1001.38 906.397,1000.07 906.577,1001.38 907.695,1002.69 907.771,1001.38 908.771,1002.69 909.386,1004 909.986,1005.31 910.694,1004 911.26,1005.31 912.131,1006.62 912.26,1007.93 912.694,1009.25 913.308,1007.93 913.362,1009.25 913.458,1010.56 913.474,1009.25 913.959,1010.56 914.25,1009.25 914.513,1010.56 914.527,1009.25 915.379,1010.56 915.769,1009.25 916.58,1007.93 916.655,1009.25 917.634,1007.93 917.941,1006.62 918.314,1007.93 918.385,1009.25 919.558,1007.93 919.947,1006.62 920.025,1005.31 920.452,1004 920.541,1002.69 921.273,1004 921.312,1005.31 921.632,1004 921.952,1002.69 922.184,1001.38 922.311,1002.69 922.331,1001.38 922.364,1002.69 922.909,1004 923.063,1005.31 923.922,1004 924.078,1002.69 925.211,1004 925.562,1002.69 925.684,1001.38 926.515,1000.07 926.844,998.756 927.314,1000.07 927.965,1001.38 930.187,1002.69 931.194,1004 931.552,1002.69 932.339,1001.38 933.568,1000.07 933.737,1001.38 934.462,1002.69 934.836,1004 934.926,1005.31 935.084,1006.62 935.251,1007.93 936.134,1009.25 936.928,1010.56 937.16,1011.87 937.239,1013.18 937.318,1011.87 937.883,1010.56 937.889,1009.25 938.162,1010.56 939.706,1011.87 940.086,1010.56 940.221,1011.87 940.427,1013.18 940.503,1014.49 940.521,1013.18 941.108,1014.49 941.496,1015.8 941.967,1017.11 942.542,1015.8 942.686,1014.49 943.275,1013.18 943.384,1011.87 943.392,1013.18 943.656,1011.87 943.954,1013.18 944.888,1014.49 945.051,1015.8 946.087,1014.49 946.155,1015.8 946.58,1014.49 946.745,1013.18 947.007,1011.87 947.187,1013.18 947.368,1014.49 947.608,1013.18 948.318,1014.49 948.587,1013.18 948.902,1014.49 948.925,1015.8 948.993,1014.49 949.632,1015.8 949.717,1017.11 949.772,1018.42 949.834,1019.73 949.895,1018.42 950.791,1019.73 951.224,1021.05 951.396,1019.73 952.104,1018.42 952.521,1017.11 952.735,1015.8 953.408,1017.11 954.11,1015.8 954.259,1014.49 954.742,1015.8 955.811,1017.11 955.922,1018.42 955.949,1017.11 956.169,1018.42 956.187,1019.73 956.721,1021.05 956.757,1022.36 956.823,1021.05 957.966,1019.73 958.041,1018.42 958.278,1019.73 958.56,1018.42 959.052,1019.73 959.688,1018.42 959.859,1017.11 960.033,1018.42 960.235,1019.73 960.459,1021.05 960.522,1019.73 960.895,1021.05 961.145,1022.36 961.992,1023.67 963.204,1024.98 963.732,1026.29 964.101,1027.6 964.382,1028.91 964.731,1030.22 965.202,1031.54 965.559,1032.85 966.302,1031.54 966.974,1030.22 967.666,1031.54 967.979,1032.85 968.124,1034.16 969.053,1032.85 969.103,1034.16 969.266,1035.47 969.741,1034.16 969.831,1032.85 971.461,1034.16 971.71,1035.47 971.753,1034.16 971.764,1035.47 972.772,1036.78 973.152,1038.09 973.728,1039.4 974.364,1038.09 974.732,1036.78 974.961,1038.09 975.32,1036.78 975.386,1035.47 975.962,1034.16 976.397,1035.47 976.967,1034.16 976.981,1035.47 976.985,1036.78 977.264,1038.09 977.537,1036.78 977.678,1038.09 977.805,1039.4 978.82,1038.09 979.233,1036.78 979.739,1038.09 979.793,1036.78 980.081,1038.09 980.216,1036.78 980.322,1038.09 981.279,1039.4 982.269,1038.09 982.702,1036.78 982.798,1035.47 982.985,1034.16 983.506,1035.47 983.904,1036.78 984.651,1038.09 985.045,1036.78 985.306,1038.09 985.326,1039.4 985.499,1038.09 986.033,1039.4 986.849,1038.09 988.014,1039.4 988.119,1040.71 988.329,1042.02 989.239,1043.34 989.254,1044.65 989.911,1045.96 991.341,1044.65 991.567,1043.34 992.133,1044.65 993.744,1043.34 994.384,1044.65 995.336,1045.96 996.592,1047.27 996.616,1045.96 996.66,1047.27 997.112,1048.58 997.166,1049.89 997.792,1048.58 998.017,1047.27 998.102,1048.58 998.115,1047.27 998.49,1045.96 998.672,1044.65 999.078,1043.34 999.125,1042.02 999.381,1043.34 999.427,1042.02 999.721,1040.71 999.785,1042.02 1000.09,1040.71 1000.63,1042.02 1001.03,1043.34 1001.66,1044.65 1001.87,1045.96 1002.01,1047.27 1003.01,1048.58 1003.93,1049.89 1005.11,1051.2 1005.28,1052.51 1005.4,1053.82 1005.73,1055.14 1006.22,1053.82 1006.52,1052.51 1006.73,1053.82 1006.82,1055.14 1007.2,1053.82 1007.26,1055.14 1008.21,1056.45 1008.73,1057.76 1008.76,1059.07 1008.77,1060.38 1009.04,1061.69 1009.07,1063 1009.28,1061.69 1009.47,1063 1011.97,1061.69 1012.37,1063 1013.27,1064.31 1014.11,1065.63 1014.15,1066.94 1014.74,1068.25 1014.84,1069.56 1015.2,1070.87 1015.69,1072.18 1015.99,1070.87 1017.99,1072.18 1018.17,1073.49 1018.65,1074.8 1018.78,1076.11 1019.03,1077.43 1020.06,1076.11 1020.45,1077.43 1020.49,1076.11 1021.7,1074.8 1022.9,1076.11 1023.35,1074.8 1023.37,1076.11 1023.78,1077.43 1023.91,1078.74 1024.25,1080.05 1024.43,1081.36 1024.48,1080.05 1024.53,1081.36 1024.89,1080.05 1026.76,1081.36 1027.71,1082.67 1027.92,1083.98 1028.39,1085.29 1028.95,1086.6 1028.95,1085.29 1029,1083.98 1030.46,1082.67 1030.68,1083.98 1031.15,1085.29 1032.23,1086.6 1032.3,1087.92 1032.53,1089.23 1032.82,1090.54 1033.46,1089.23 1035.04,1090.54 1035.26,1091.85 1035.29,1090.54 1035.48,1091.85 1035.62,1093.16 1036.61,1094.47 1036.98,1093.16 1037.2,1094.47 1039.93,1095.78 1040.83,1097.09 1041.62,1098.4 1041.97,1097.09 1042.13,1098.4 1042.24,1099.72 1042.75,1101.03 1042.92,1102.34 1043.09,1101.03 1044.49,1102.34 1044.71,1103.65 1044.89,1104.96 1045.09,1103.65 1045.1,1104.96 1045.57,1106.27 1045.76,1104.96 1046.41,1106.27 1046.64,1107.58 1047.94,1106.27 1048.8,1107.58 1049.09,1106.27 1049.1,1104.96 1049.43,1106.27 1050.07,1104.96 1051.52,1103.65 1051.53,1104.96 1051.92,1106.27 1051.96,1107.58 1052.5,1108.89 1054.07,1110.2 1054.26,1108.89 1054.62,1107.58 1054.91,1108.89 1056.33,1110.2 1056.48,1111.52 1056.63,1110.2 1056.7,1111.52 1057.7,1112.83 1058.13,1114.14 1058.22,1115.45 1058.58,1116.76 1058.97,1118.07 1059.47,1119.38 1059.73,1120.69 1059.77,1122.01 1059.77,1120.69 1060.13,1119.38 1060.43,1120.69 1060.59,1122.01 1060.87,1120.69 1061.47,1119.38 1061.77,1120.69 1062.24,1122.01 1062.99,1123.32 1063.12,1124.63 1064.16,1123.32 1064.38,1122.01 1064.64,1120.69 1064.84,1122.01 1064.89,1123.32 1064.94,1124.63 1066.09,1125.94 1066.16,1124.63 1066.56,1125.94 1066.83,1127.25 1066.95,1128.56 1066.96,1129.87 1067.44,1128.56 1067.52,1129.87 1067.65,1131.18 1067.76,1132.49 1068.24,1133.81 1068.42,1135.12 1068.54,1136.43 1069.18,1137.74 1069.19,1139.05 1069.58,1137.74 1069.67,1136.43 1070.21,1137.74 1070.59,1139.05 1070.71,1137.74 1070.78,1139.05 1071.06,1140.36 1072.13,1141.67 1074.42,1142.98 1074.54,1144.3 1074.64,1142.98 1074.91,1144.3 1074.94,1145.61 1074.97,1144.3 1075.38,1142.98 1077.4,1141.67 1077.77,1142.98 1078.51,1144.3 1079.16,1145.61 1079.87,1144.3 1080.02,1145.61 1080.96,1144.3 1081.07,1142.98 1081.08,1144.3 1081.14,1142.98 1081.51,1141.67 1081.59,1142.98 1082.22,1144.3 1086.03,1142.98 1086.47,1141.67 1086.58,1140.36 1086.72,1141.67 1086.82,1142.98 1088.07,1141.67 1088.48,1142.98 1088.96,1144.3 1088.97,1145.61 1090.63,1146.92 1091.14,1148.23 1091.41,1149.54 1091.81,1150.85 1092.38,1152.16 1093.44,1153.47 1093.78,1154.78 1093.81,1156.1 1094.38,1157.41 1095.56,1156.1 1095.66,1154.78 1095.96,1156.1 1097.06,1157.41 1097.4,1156.1 1100.02,1157.41 1100.35,1158.72 1100.94,1160.03 1101,1161.34 1101.75,1162.65 1102.82,1163.96 1102.88,1162.65 1103.29,1163.96 1103.49,1165.27 1104.56,1166.59 1104.57,1165.27 1105.04,1163.96 1105.85,1165.27 1106.01,1166.59 1106.14,1167.9 1107.33,1169.21 1107.74,1170.52 1108.07,1171.83 1108.55,1173.14 1109.11,1171.83 1110.14,1173.14 1110.18,1174.45 1111.56,1175.76 1114.48,1177.07 1117.09,1178.39 1117.26,1179.7 1118.01,1178.39 1118.03,1179.7 1118.31,1181.01 1118.76,1179.7 1119.55,1181.01 1120.36,1182.32 1121.42,1183.63 1121.73,1184.94 1123.34,1186.25 1123.73,1187.56 1123.81,1188.87 1124.24,1190.19 1124.32,1191.5 1125.42,1192.81 1125.74,1194.12 1125.97,1195.43 1126.12,1196.74 1126.12,1195.43 1127.01,1194.12 1127.2,1192.81 1127.71,1194.12 1127.86,1195.43 1128.01,1194.12 1129.35,1195.43 1129.47,1196.74 1130.3,1198.05 1130.63,1199.36 1131.7,1198.05 1132.9,1196.74 1133.76,1195.43 1135.34,1196.74 1135.51,1195.43 1135.82,1194.12 1136.12,1195.43 1136.98,1194.12 1137.35,1195.43 1140.89,1194.12 1141.1,1195.43 1141.15,1194.12 1141.45,1192.81 1141.45,1191.5 1141.67,1192.81 1141.67,1194.12 1143.65,1192.81 1143.87,1194.12 1144.31,1195.43 1145.19,1194.12 1146.09,1192.81 1146.33,1194.12 1146.47,1195.43 1147.06,1196.74 1147.09,1195.43 1147.12,1194.12 1147.17,1195.43 1147.44,1196.74 1149.87,1198.05 1150.03,1196.74 1150.36,1198.05 1150.53,1199.36 1150.79,1200.68 1151.39,1201.99 1152.37,1203.3 1152.78,1204.61 1153.28,1203.3 1153.68,1204.61 1155.18,1205.92 1155.38,1204.61 1155.89,1205.92 1156.31,1207.23 1156.52,1208.54 1157.89,1209.85 1157.92,1208.54 1158.04,1209.85 1159.73,1211.16 1160.61,1212.48 1161.53,1211.16 1161.75,1212.48 1161.83,1213.79 1162.34,1215.1 1163.47,1216.41 1163.64,1217.72 1163.96,1216.41 1164.03,1215.1 1164.31,1216.41 1166.33,1215.1 1166.85,1213.79 1166.95,1212.48 1168.97,1211.16 1170.09,1212.48 1170.58,1211.16 1170.76,1212.48 1172.84,1213.79 1173.52,1215.1 1173.62,1216.41 1175.54,1217.72 1176.41,1216.41 1178.15,1217.72 1178.52,1219.03 1179.1,1220.34 1179.17,1221.65 1179.54,1220.34 1179.75,1221.65 1180.48,1220.34 1180.75,1221.65 1181.32,1222.97 1181.86,1221.65 1182.6,1222.97 1183.02,1224.28 1183.58,1225.59 1184,1226.9 1186.05,1228.21 1186.49,1229.52 1186.58,1230.83 1186.77,1232.14 1188.83,1233.45 1189.28,1234.77 1190.63,1236.08 1191.03,1234.77 1193.01,1233.45 1195.13,1234.77 1195.35,1236.08 1197.24,1234.77 1197.53,1236.08 1200.4,1237.39 1201.58,1238.7 1201.77,1237.39 1201.8,1238.7 1201.9,1240.01 1202.27,1241.32 1202.46,1242.63 1202.86,1243.94 1202.91,1245.25 1203.21,1246.57 1203.51,1247.88 1203.87,1249.19 1205.96,1247.88 1206.94,1246.57 1210,1247.88 1210.3,1249.19 1210.63,1247.88 1210.98,1249.19 1211.26,1247.88 1213.06,1249.19 1213.72,1247.88 1215.75,1249.19 1219.77,1250.5 1221.89,1249.19 1223.85,1250.5 1224.27,1251.81 1225.49,1253.12 1227.13,1254.43 1228.27,1255.74 1228.68,1257.06 1232.74,1258.37 1232.78,1259.68 1233.54,1258.37 1234.24,1259.68 1235.85,1258.37 1237.25,1259.68 1239.07,1260.99 1240.04,1259.68 1240.77,1260.99 1242.46,1259.68 1245.75,1260.99 1245.77,1259.68 1246.88,1260.99 1248.88,1262.3 1249.51,1260.99 1249.54,1262.3 1251.72,1263.61 1252.87,1264.92 1252.89,1266.23 1253.85,1267.54 1255.18,1266.23 1255.3,1267.54 1257.09,1266.23 1258.04,1267.54 1258.41,1268.86 1258.68,1267.54 1260.41,1268.86 1263.56,1270.17 1263.92,1271.48 1264.66,1272.79 1265.25,1274.1 1266.52,1272.79 1267.95,1274.1 1268.16,1275.41 1268.42,1276.72 1269.94,1278.03 1271.22,1279.35 1273.1,1278.03 1273.36,1279.35 1273.46,1280.66 1273.8,1279.35 1274.49,1280.66 1278.43,1281.97 1278.76,1283.28 1279.17,1284.59 1281.18,1285.9 1282.28,1284.59 1283.65,1285.9 1284.75,1287.21 1284.85,1288.52 1284.92,1289.83 1285.29,1291.15 1288.99,1289.83 1289.82,1291.15 1290.26,1292.46 1290.36,1293.77 1291.85,1295.08 1294.83,1293.77 1298.66,1292.46 1299.35,1293.77 1299.45,1295.08 1301.19,1296.39 1302.98,1295.08 1304.72,1293.77 1305.71,1292.46 1306.62,1291.15 1306.66,1292.46 1308.36,1293.77 1308.83,1295.08 1311.72,1293.77 1312.89,1295.08 1321.79,1296.39 1322.54,1297.7 1329.9,1299.01 1330.79,1300.32 1330.98,1301.63 1331.19,1300.32 1331.8,1301.63 1332.02,1300.32 1335.48,1301.63 1336.68,1302.95 1337.55,1304.26 1338.89,1302.95 1339.29,1304.26 1339.6,1305.57 1340.23,1304.26 1340.77,1305.57 1344.67,1306.88 1344.93,1308.19 1345.23,1309.5 1345.23,1310.81 1347.43,1312.12 1348.98,1313.44 1349.87,1314.75 1350.87,1316.06 1350.9,1317.37 1353.71,1316.06 1353.81,1317.37 1355.42,1316.06 1357.07,1317.37 1359.17,1318.68 1361.71,1319.99 1365.31,1321.3 1367.74,1322.61 1367.81,1323.92 1369.41,1322.61 1370.12,1323.92 1370.64,1325.24 1370.73,1326.55 1371.32,1325.24 1372.75,1326.55 1374.36,1327.86 1380.19,1329.17 1383.33,1330.48 1384.27,1331.79 1385.65,1333.1 1387.26,1331.79 1394.82,1333.1 1395.52,1331.79 1396.8,1333.1 1396.95,1331.79 1401.02,1333.1 1405.55,1334.41 1409.74,1335.73 1410.72,1337.04 1414.42,1338.35 1415.04,1339.66 1417.5,1340.97 1423.3,1339.66 1425.67,1340.97 1434.66,1339.66 1434.99,1338.35 1437.32,1339.66 1439.64,1340.97 1443.83,1342.28 1446.24,1343.59 1449.55,1344.9 1453.29,1346.21 1455.37,1344.9 1458.24,1343.59 1458.97,1344.9 1460.88,1346.21 1462.46,1347.53 1470.31,1348.84 1476.89,1350.15 1477.59,1351.46 1480.09,1350.15 1485.03,1348.84 1486.07,1350.15 1492.78,1351.46 1498.61,1352.77 1502.44,1354.08 1506.76,1355.39 1508.51,1356.7 1509.5,1358.01 1510.41,1359.33 1515.5,1360.64 1519.39,1359.33 1534.98,1360.64 1535.8,1361.95 1542.67,1363.26 1543.57,1361.95 1544.02,1363.26 1557.49,1364.57 1557.87,1363.26 1559.2,1364.57 1572.39,1363.26 1573.19,1364.57 1575.11,1365.88 1591.05,1367.19 1595.95,1365.88 1599.3,1367.19 1600.74,1368.5 1609.38,1367.19 1626.52,1365.88 1627.08,1367.19 1638.44,1368.5 1638.77,1369.82 1654.4,1368.5 1659.16,1369.82 1662.03,1371.13 1681.14,1369.82 1683.88,1371.13 1683.92,1369.82 1685.15,1368.5 1688.82,1369.82 1723.17,1371.13 1730.18,1369.82 1745.88,1368.5 1747.35,1369.82 1753.78,1368.5 1761.66,1369.82 1766.12,1368.5 1769.19,1367.19 1776.17,1368.5 1799.74,1369.82 1813.17,1371.13 1814.94,1369.82 1830.3,1371.13 1838.45,1369.82 1842.4,1368.5 1858.18,1369.82 1884.93,1371.13 1887.71,1372.44 1888.93,1373.75 1913.15,1372.44 1933.96,1373.75 1949.66,1375.06 1957.56,1376.37 1969.9,1377.68 1972.97,1378.99 2018.72,1380.3 2042.23,1381.62 2046.19,1382.93 2089.82,1381.62 2116.93,1382.93 2205.37,1381.62 2293.6,1382.93 \"/>\n<polyline clip-path=\"url(#clip182)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"321.708,1384.24 329.543,1384.24 349.634,1384.24 370.073,1384.24 382.782,1384.24 388.254,1384.24 390.309,1384.24 390.863,1384.24 396.321,1384.24 396.575,1384.24 398.541,1384.24 408.368,1384.24 417.49,1384.24 428.869,1384.24 430.29,1384.24 432.263,1384.24 439.115,1384.24 439.622,1384.24 442.048,1384.24 444.379,1384.24 444.492,1384.24 447.515,1384.24 448.568,1384.24 449.997,1384.24 452.765,1384.24 455.407,1384.24 456.511,1384.24 456.653,1384.24 458.93,1384.24 459.223,1384.24 461.428,1384.24 465.032,1384.24 465.099,1384.24 469.529,1384.24 473.446,1384.24 474.545,1384.24 482.283,1384.24 482.747,1384.24 485.149,1384.24 485.268,1384.24 485.939,1384.24 489.345,1384.24 489.407,1384.24 497.118,1384.24 497.287,1384.24 497.588,1384.24 498.012,1384.24 498.644,1384.24 499.772,1384.24 500.705,1384.24 501.022,1384.24 503.306,1384.24 503.922,1384.24 504.062,1384.24 506.69,1384.24 507.368,1384.24 507.513,1384.24 509.421,1384.24 509.661,1384.24 511.054,1384.24 513.743,1384.24 513.939,1384.24 516.034,1384.24 516.59,1384.24 518.327,1384.24 520.111,1384.24 522.449,1384.24 523.395,1384.24 523.75,1384.24 525.492,1382.93 525.492,1381.62 525.492,1380.3 525.492,1378.99 525.492,1377.68 525.492,1376.37 525.492,1375.06 525.492,1373.75 525.492,1372.44 525.492,1371.13 526.373,1371.13 527.108,1371.13 530.576,1371.13 533.001,1371.13 533.327,1369.82 534.649,1369.82 538.953,1369.82 541.132,1369.82 542.851,1369.82 546.593,1369.82 549.126,1369.82 550.427,1369.82 553.418,1368.5 560.538,1368.5 560.917,1368.5 561.293,1368.5 561.47,1368.5 563.196,1368.5 564.538,1368.5 564.967,1368.5 565.817,1368.5 566.496,1368.5 566.667,1368.5 566.783,1368.5 567.215,1368.5 573.857,1367.19 574.412,1367.19 576.56,1367.19 577.28,1367.19 578.785,1367.19 578.881,1367.19 580.022,1367.19 580.843,1367.19 581.447,1367.19 582.309,1367.19 583.456,1367.19 586.566,1365.88 586.614,1365.88 587.33,1365.88 588.927,1365.88 590.299,1365.88 592.038,1364.57 592.251,1364.57 594.093,1363.26 594.647,1361.95 594.915,1361.95 597.147,1361.95 598.425,1361.95 598.584,1361.95 600.105,1360.64 600.359,1359.33 601.135,1359.33 602.325,1358.01 604.369,1358.01 605.299,1358.01 605.47,1358.01 608.956,1358.01 610.25,1358.01 610.627,1358.01 610.956,1358.01 612.152,1356.7 613.358,1356.7 613.692,1356.7 614.523,1356.7 614.814,1356.7 615.94,1356.7 617.154,1356.7 617.869,1356.7 618.297,1356.7 618.78,1356.7 620.132,1356.7 620.532,1356.7 620.775,1356.7 621.274,1355.39 622.908,1355.39 624.384,1355.39 627.854,1355.39 628.714,1355.39 629.54,1355.39 630.399,1355.39 630.832,1355.39 631.215,1355.39 632.179,1355.39 632.653,1354.08 632.727,1354.08 634.074,1352.77 635.72,1352.77 636.019,1352.77 636.047,1351.46 636.276,1351.46 637.579,1351.46 638.284,1351.46 638.629,1351.46 639.491,1351.46 639.59,1351.46 640.015,1351.46 641.121,1351.46 642.73,1351.46 642.899,1350.15 643.403,1350.15 643.406,1348.84 643.773,1348.84 645.832,1347.53 646.363,1347.53 647.313,1347.53 648.163,1346.21 648.276,1344.9 648.296,1344.9 649.912,1344.9 649.926,1344.9 650.109,1344.9 651.299,1343.59 652.128,1343.59 652.352,1342.28 653.781,1340.97 653.947,1340.97 655.729,1340.97 656.549,1339.66 657.008,1339.66 657.648,1339.66 658.2,1339.66 658.208,1339.66 658.595,1339.66 658.822,1339.66 658.888,1339.66 658.892,1339.66 659.092,1339.66 659.191,1338.35 660.295,1337.04 660.438,1335.73 660.757,1335.73 661.864,1335.73 662.714,1334.41 663.007,1333.1 665.212,1331.79 666.305,1331.79 667.672,1331.79 668.051,1331.79 668.203,1331.79 668.57,1331.79 668.816,1330.48 668.883,1329.17 669.789,1329.17 669.824,1329.17 670.603,1329.17 670.957,1329.17 671.147,1329.17 672.239,1329.17 672.663,1329.17 673.026,1329.17 673.228,1329.17 673.313,1327.86 673.417,1327.86 676.755,1327.86 677.23,1326.55 677.629,1326.55 678.016,1326.55 678.329,1325.24 679.153,1325.24 679.626,1325.24 680.497,1325.24 680.861,1325.24 681.083,1325.24 682.578,1325.24 682.648,1325.24 682.911,1325.24 684.687,1325.24 684.963,1325.24 685.344,1325.24 685.362,1325.24 685.452,1325.24 685.602,1325.24 686.067,1323.92 686.495,1323.92 686.531,1322.61 687.368,1322.61 688.186,1322.61 688.806,1322.61 688.933,1321.3 689.052,1319.99 689.723,1318.68 690.577,1318.68 690.865,1318.68 691.587,1318.68 691.667,1318.68 691.933,1318.68 692.939,1318.68 693.129,1317.37 693.191,1316.06 693.334,1316.06 693.352,1316.06 694.707,1316.06 696.92,1316.06 700.902,1314.75 701.071,1313.44 701.372,1312.12 701.796,1310.81 702.28,1310.81 702.428,1309.5 702.564,1309.5 702.793,1309.5 703.556,1308.19 703.911,1308.19 704.489,1306.88 704.806,1305.57 704.987,1305.57 705.602,1305.57 706.202,1305.57 707.09,1304.26 707.476,1304.26 707.706,1302.95 707.846,1301.63 708.347,1301.63 708.476,1301.63 708.91,1301.63 709.578,1301.63 709.674,1301.63 710.175,1301.63 710.474,1300.32 710.729,1300.32 711.152,1299.01 711.297,1297.7 711.595,1297.7 712.871,1297.7 713.205,1296.39 713.446,1295.08 714.53,1295.08 714.601,1295.08 714.838,1293.77 717.489,1293.77 717.527,1292.46 717.528,1292.46 717.723,1291.15 718.527,1291.15 718.58,1291.15 719.125,1291.15 719.279,1291.15 719.818,1289.83 720.374,1288.52 721.427,1288.52 722.111,1287.21 723.53,1287.21 723.895,1285.9 724.181,1285.9 726.233,1284.59 726.403,1284.59 727.179,1283.28 727.41,1283.28 727.534,1281.97 729.953,1281.97 730.157,1280.66 730.678,1280.66 730.892,1279.35 731.052,1279.35 731.142,1279.35 731.3,1279.35 731.467,1279.35 732.35,1279.35 733.144,1279.35 733.376,1279.35 733.455,1279.35 734.36,1278.03 734.378,1278.03 735.922,1278.03 736.437,1278.03 736.643,1278.03 736.719,1278.03 736.785,1276.72 737.324,1276.72 737.712,1276.72 738.183,1276.72 738.433,1275.41 739.608,1275.41 740.17,1275.41 741.104,1275.41 741.267,1275.41 742.371,1275.41 742.737,1274.1 743.403,1274.1 743.584,1274.1 744.534,1274.1 744.916,1272.79 745.118,1272.79 745.141,1272.79 745.848,1272.79 745.933,1272.79 745.988,1272.79 746.05,1272.79 746.635,1271.48 747.007,1271.48 747.44,1271.48 749.624,1271.48 750.377,1270.17 750.958,1270.17 752.027,1270.17 752.138,1270.17 752.385,1270.17 752.403,1270.17 752.91,1268.86 752.937,1268.86 752.973,1268.86 754.211,1267.54 754.494,1267.54 755.268,1267.54 756.249,1267.54 756.451,1267.54 756.675,1267.54 757.111,1267.54 757.361,1267.54 758.208,1267.54 759.42,1267.54 759.948,1267.54 760.317,1267.54 760.598,1267.54 760.947,1267.54 761.418,1267.54 761.775,1267.54 763.882,1267.54 764.195,1267.54 764.322,1266.23 764.34,1266.23 764.701,1264.92 765.077,1263.61 765.254,1262.3 765.319,1262.3 765.482,1262.3 766.98,1260.99 767.677,1260.99 767.926,1260.99 767.98,1260.99 768.322,1259.68 768.751,1258.37 768.988,1258.37 769.368,1258.37 769.601,1257.06 769.944,1257.06 770.28,1255.74 770.451,1254.43 770.567,1253.12 770.999,1251.81 771.177,1251.81 772.613,1251.81 773.197,1251.81 773.201,1251.81 773.48,1251.81 773.894,1251.81 774.021,1251.81 775.955,1251.81 776.297,1251.81 776.538,1251.81 777.495,1251.81 778.196,1250.5 779.721,1250.5 780.12,1250.5 780.344,1249.19 780.867,1249.19 781.064,1247.88 781.522,1247.88 781.542,1247.88 782.249,1247.88 782.569,1246.57 782.665,1245.25 783.806,1243.94 784.23,1243.94 784.335,1243.94 784.545,1243.94 784.627,1242.63 785.231,1241.32 785.455,1241.32 785.47,1241.32 786.093,1240.01 786.127,1240.01 787.241,1238.7 788.349,1238.7 790.398,1237.39 790.6,1237.39 791.114,1236.08 791.552,1236.08 792.711,1234.77 792.808,1234.77 792.876,1234.77 793.328,1234.77 793.382,1234.77 794.083,1233.45 794.318,1233.45 795.597,1233.45 796.001,1233.45 796.036,1232.14 796.849,1232.14 797.244,1232.14 797.88,1232.14 798.083,1232.14 798.23,1232.14 798.699,1230.83 799.226,1230.83 800.145,1230.83 800.931,1229.52 801.328,1229.52 801.501,1229.52 801.612,1229.52 801.95,1229.52 802.209,1228.21 802.368,1226.9 802.946,1226.9 803.037,1226.9 803.474,1226.9 804.427,1226.9 804.919,1225.59 804.949,1225.59 804.975,1225.59 804.99,1225.59 805.256,1225.59 805.283,1225.59 805.683,1225.59 808.153,1224.28 808.585,1224.28 809.083,1222.97 809.254,1221.65 809.489,1221.65 810.325,1221.65 810.361,1221.65 810.958,1221.65 811.052,1221.65 811.42,1221.65 811.906,1221.65 812.74,1220.34 814.034,1219.03 814.208,1219.03 814.389,1219.03 814.411,1217.72 814.74,1216.41 814.862,1216.41 815.001,1216.41 815.249,1216.41 816.669,1216.41 817.142,1215.1 817.476,1213.79 818.307,1212.48 818.598,1211.16 819.117,1211.16 819.587,1211.16 819.724,1209.85 819.995,1209.85 820.129,1209.85 820.464,1209.85 820.648,1209.85 820.75,1209.85 820.938,1208.54 821.653,1207.23 822.081,1205.92 822.564,1204.61 822.98,1204.61 823.916,1203.3 823.927,1203.3 824.134,1203.3 824.316,1201.99 824.559,1200.68 824.603,1200.68 825.167,1200.68 826.692,1199.36 826.896,1199.36 827.369,1199.36 828.168,1198.05 828.451,1198.05 828.517,1198.05 828.741,1198.05 829.036,1198.05 831.261,1198.05 831.478,1198.05 831.638,1196.74 831.697,1196.74 831.839,1196.74 832.498,1195.43 832.827,1195.43 833.324,1194.12 833.42,1194.12 834.183,1192.81 834.616,1191.5 834.999,1190.19 835.963,1188.87 836.149,1188.87 836.511,1187.56 837.043,1187.56 837.838,1187.56 838.343,1187.56 838.457,1187.56 838.966,1187.56 839.131,1187.56 839.504,1186.25 839.803,1184.94 840.06,1183.63 840.708,1183.63 840.928,1183.63 841.104,1183.63 841.319,1183.63 841.363,1182.32 841.783,1182.32 842.068,1181.01 842.413,1179.7 842.628,1179.7 842.861,1179.7 843.275,1178.39 843.374,1177.07 843.799,1175.76 844.905,1174.45 845.013,1174.45 845.649,1174.45 846.514,1173.14 847.187,1171.83 847.557,1170.52 847.745,1170.52 848.139,1170.52 848.176,1170.52 848.719,1170.52 850.147,1169.21 850.284,1169.21 851.097,1167.9 851.128,1167.9 852.08,1166.59 852.55,1166.59 852.691,1166.59 852.917,1166.59 853.696,1165.27 853.71,1163.96 853.893,1162.65 853.919,1162.65 854.35,1162.65 854.434,1162.65 854.796,1162.65 855.185,1162.65 855.691,1162.65 855.912,1161.34 855.951,1161.34 855.984,1161.34 856.646,1161.34 856.808,1161.34 857.731,1160.03 857.984,1160.03 858.451,1160.03 859.202,1160.03 859.337,1160.03 859.513,1158.72 860.792,1157.41 861.055,1157.41 861.102,1157.41 861.16,1157.41 861.432,1156.1 861.984,1154.78 861.992,1153.47 862.304,1153.47 862.379,1152.16 862.606,1150.85 862.672,1149.54 862.676,1148.23 862.776,1148.23 862.876,1146.92 863.044,1146.92 863.165,1146.92 863.172,1146.92 863.734,1146.92 863.863,1146.92 863.979,1146.92 864.46,1146.92 864.541,1145.61 864.64,1145.61 864.756,1145.61 865.4,1145.61 865.411,1145.61 865.648,1144.3 866.421,1144.3 866.806,1144.3 866.999,1144.3 867.28,1144.3 868.344,1144.3 870.089,1142.98 870.634,1142.98 870.754,1142.98 871.124,1142.98 871.158,1142.98 871.456,1141.67 871.835,1140.36 871.987,1139.05 872.354,1137.74 873.573,1136.43 873.608,1135.12 873.983,1135.12 874.387,1133.81 874.722,1133.81 874.741,1132.49 874.931,1131.18 875.379,1131.18 876.023,1129.87 876.235,1129.87 876.447,1128.56 876.81,1127.25 877.012,1125.94 877.201,1124.63 877.295,1124.63 877.81,1124.63 878.432,1124.63 880.539,1123.32 881.413,1122.01 881.8,1120.69 882.937,1119.38 882.939,1119.38 883.034,1119.38 883.41,1118.07 884.281,1116.76 884.645,1115.45 884.695,1115.45 884.867,1114.14 885.177,1114.14 885.189,1114.14 886.362,1112.83 886.432,1111.52 886.695,1110.2 886.849,1110.2 887.356,1110.2 887.626,1110.2 888.025,1110.2 888.471,1108.89 888.599,1108.89 888.747,1107.58 889.128,1106.27 889.146,1104.96 889.237,1103.65 889.386,1102.34 889.652,1102.34 889.999,1102.34 890.024,1102.34 890.279,1101.03 890.595,1101.03 891.152,1099.72 891.97,1098.4 892.178,1098.4 892.59,1097.09 893.28,1097.09 894.361,1095.78 894.649,1094.47 895.371,1093.16 895.451,1091.85 895.717,1090.54 896.24,1090.54 896.561,1090.54 896.723,1089.23 897.118,1087.92 897.136,1086.6 897.159,1086.6 897.211,1086.6 897.961,1086.6 898.491,1085.29 899.036,1085.29 899.502,1085.29 899.701,1085.29 900.704,1083.98 900.777,1083.98 902.068,1083.98 902.222,1083.98 902.359,1083.98 903.547,1083.98 903.954,1083.98 904.284,1083.98 904.763,1083.98 906.064,1082.67 906.349,1081.36 906.357,1081.36 906.397,1081.36 906.577,1080.05 907.695,1078.74 907.771,1078.74 908.771,1077.43 909.386,1076.11 909.986,1074.8 910.694,1074.8 911.26,1073.49 912.131,1072.18 912.26,1070.87 912.694,1069.56 913.308,1069.56 913.362,1068.25 913.458,1066.94 913.474,1066.94 913.959,1065.63 914.25,1065.63 914.513,1064.31 914.527,1064.31 915.379,1063 915.769,1063 916.58,1063 916.655,1061.69 917.634,1061.69 917.941,1061.69 918.314,1060.38 918.385,1059.07 919.558,1059.07 919.947,1059.07 920.025,1059.07 920.452,1059.07 920.541,1059.07 921.273,1057.76 921.312,1056.45 921.632,1056.45 921.952,1056.45 922.184,1056.45 922.311,1055.14 922.331,1055.14 922.364,1053.82 922.909,1052.51 923.063,1051.2 923.922,1051.2 924.078,1051.2 925.211,1049.89 925.562,1049.89 925.684,1049.89 926.515,1049.89 926.844,1049.89 927.314,1048.58 927.965,1047.27 930.187,1045.96 931.194,1044.65 931.552,1044.65 932.339,1044.65 933.568,1044.65 933.737,1043.34 934.462,1042.02 934.836,1040.71 934.926,1039.4 935.084,1038.09 935.251,1036.78 936.134,1035.47 936.928,1034.16 937.16,1032.85 937.239,1031.54 937.318,1031.54 937.883,1031.54 937.889,1031.54 938.162,1030.22 939.706,1028.91 940.086,1028.91 940.221,1027.6 940.427,1026.29 940.503,1024.98 940.521,1024.98 941.108,1023.67 941.496,1022.36 941.967,1021.05 942.542,1021.05 942.686,1021.05 943.275,1021.05 943.384,1021.05 943.392,1019.73 943.656,1019.73 943.954,1018.42 944.888,1017.11 945.051,1015.8 946.087,1015.8 946.155,1014.49 946.58,1014.49 946.745,1014.49 947.007,1014.49 947.187,1013.18 947.368,1011.87 947.608,1011.87 948.318,1010.56 948.587,1010.56 948.902,1009.25 948.925,1007.93 948.993,1007.93 949.632,1006.62 949.717,1005.31 949.772,1004 949.834,1002.69 949.895,1002.69 950.791,1001.38 951.224,1000.07 951.396,1000.07 952.104,1000.07 952.521,1000.07 952.735,1000.07 953.408,998.756 954.11,998.756 954.259,998.756 954.742,997.445 955.811,996.134 955.922,994.822 955.949,994.822 956.169,993.511 956.187,992.2 956.721,990.889 956.757,989.578 956.823,989.578 957.966,989.578 958.041,989.578 958.278,988.267 958.56,988.267 959.052,986.956 959.688,986.956 959.859,986.956 960.033,985.644 960.235,984.333 960.459,983.022 960.522,983.022 960.895,981.711 961.145,980.4 961.992,979.089 963.204,977.777 963.732,976.466 964.101,975.155 964.382,973.844 964.731,972.533 965.202,971.222 965.559,969.91 966.302,969.91 966.974,969.91 967.666,968.599 967.979,967.288 968.124,965.977 969.053,965.977 969.103,964.666 969.266,963.355 969.741,963.355 969.831,963.355 971.461,962.043 971.71,960.732 971.753,960.732 971.764,959.421 972.772,958.11 973.152,956.799 973.728,955.488 974.364,955.488 974.732,955.488 974.961,954.176 975.32,954.176 975.386,954.176 975.962,954.176 976.397,952.865 976.967,952.865 976.981,951.554 976.985,950.243 977.264,948.932 977.537,948.932 977.678,947.621 977.805,946.309 978.82,946.309 979.233,946.309 979.739,944.998 979.793,944.998 980.081,943.687 980.216,943.687 980.322,942.376 981.279,941.065 982.269,941.065 982.702,941.065 982.798,941.065 982.985,941.065 983.506,939.754 983.904,938.442 984.651,937.131 985.045,937.131 985.306,935.82 985.326,934.509 985.499,934.509 986.033,933.198 986.849,933.198 988.014,931.887 988.119,930.575 988.329,929.264 989.239,927.953 989.254,926.642 989.911,925.331 991.341,925.331 991.567,925.331 992.133,924.02 993.744,924.02 994.384,922.708 995.336,921.397 996.592,920.086 996.616,920.086 996.66,918.775 997.112,917.464 997.166,916.153 997.792,916.153 998.017,916.153 998.102,914.841 998.115,914.841 998.49,914.841 998.672,914.841 999.078,914.841 999.125,914.841 999.381,913.53 999.427,913.53 999.721,913.53 999.785,912.219 1000.09,912.219 1000.63,910.908 1001.03,909.597 1001.66,908.286 1001.87,906.974 1002.01,905.663 1003.01,904.352 1003.93,903.041 1005.11,901.73 1005.28,900.419 1005.4,899.107 1005.73,897.796 1006.22,897.796 1006.52,897.796 1006.73,896.485 1006.82,895.174 1007.2,895.174 1007.26,893.863 1008.21,892.552 1008.73,891.241 1008.76,889.929 1008.77,888.618 1009.04,887.307 1009.07,885.996 1009.28,885.996 1009.47,884.685 1011.97,884.685 1012.37,883.374 1013.27,882.062 1014.11,880.751 1014.15,879.44 1014.74,878.129 1014.84,876.818 1015.2,875.507 1015.69,874.195 1015.99,874.195 1017.99,872.884 1018.17,871.573 1018.65,870.262 1018.78,868.951 1019.03,867.64 1020.06,867.64 1020.45,866.328 1020.49,866.328 1021.7,866.328 1022.9,865.017 1023.35,865.017 1023.37,863.706 1023.78,862.395 1023.91,861.084 1024.25,859.773 1024.43,858.461 1024.48,858.461 1024.53,857.15 1024.89,857.15 1026.76,855.839 1027.71,854.528 1027.92,853.217 1028.39,851.906 1028.95,850.594 1028.95,850.594 1029,850.594 1030.46,850.594 1030.68,849.283 1031.15,847.972 1032.23,846.661 1032.3,845.35 1032.53,844.039 1032.82,842.727 1033.46,842.727 1035.04,841.416 1035.26,840.105 1035.29,840.105 1035.48,838.794 1035.62,837.483 1036.61,836.172 1036.98,836.172 1037.2,834.86 1039.93,833.549 1040.83,832.238 1041.62,830.927 1041.97,830.927 1042.13,829.616 1042.24,828.305 1042.75,826.993 1042.92,825.682 1043.09,825.682 1044.49,824.371 1044.71,823.06 1044.89,821.749 1045.09,821.749 1045.1,820.438 1045.57,819.126 1045.76,819.126 1046.41,817.815 1046.64,816.504 1047.94,816.504 1048.8,815.193 1049.09,815.193 1049.1,815.193 1049.43,813.882 1050.07,813.882 1051.52,813.882 1051.53,812.571 1051.92,811.259 1051.96,809.948 1052.5,808.637 1054.07,807.326 1054.26,807.326 1054.62,807.326 1054.91,806.015 1056.33,804.704 1056.48,803.393 1056.63,803.393 1056.7,802.081 1057.7,800.77 1058.13,799.459 1058.22,798.148 1058.58,796.837 1058.97,795.526 1059.47,794.214 1059.73,792.903 1059.77,791.592 1059.77,791.592 1060.13,791.592 1060.43,790.281 1060.59,788.97 1060.87,788.97 1061.47,788.97 1061.77,787.659 1062.24,786.347 1062.99,785.036 1063.12,783.725 1064.16,783.725 1064.38,783.725 1064.64,783.725 1064.84,782.414 1064.89,781.103 1064.94,779.792 1066.09,778.48 1066.16,778.48 1066.56,777.169 1066.83,775.858 1066.95,774.547 1066.96,773.236 1067.44,773.236 1067.52,771.925 1067.65,770.613 1067.76,769.302 1068.24,767.991 1068.42,766.68 1068.54,765.369 1069.18,764.058 1069.19,762.746 1069.58,762.746 1069.67,762.746 1070.21,761.435 1070.59,760.124 1070.71,760.124 1070.78,758.813 1071.06,757.502 1072.13,756.191 1074.42,754.879 1074.54,753.568 1074.64,753.568 1074.91,752.257 1074.94,750.946 1074.97,750.946 1075.38,750.946 1077.4,750.946 1077.77,749.635 1078.51,748.324 1079.16,747.012 1079.87,747.012 1080.02,745.701 1080.96,745.701 1081.07,745.701 1081.08,744.39 1081.14,744.39 1081.51,744.39 1081.59,743.079 1082.22,741.768 1086.03,741.768 1086.47,741.768 1086.58,741.768 1086.72,740.457 1086.82,739.145 1088.07,739.145 1088.48,737.834 1088.96,736.523 1088.97,735.212 1090.63,733.901 1091.14,732.59 1091.41,731.278 1091.81,729.967 1092.38,728.656 1093.44,727.345 1093.78,726.034 1093.81,724.723 1094.38,723.411 1095.56,723.411 1095.66,723.411 1095.96,722.1 1097.06,720.789 1097.4,720.789 1100.02,719.478 1100.35,718.167 1100.94,716.856 1101,715.545 1101.75,714.233 1102.82,712.922 1102.88,712.922 1103.29,711.611 1103.49,710.3 1104.56,708.989 1104.57,708.989 1105.04,708.989 1105.85,707.678 1106.01,706.366 1106.14,705.055 1107.33,703.744 1107.74,702.433 1108.07,701.122 1108.55,699.811 1109.11,699.811 1110.14,698.499 1110.18,697.188 1111.56,695.877 1114.48,694.566 1117.09,693.255 1117.26,691.944 1118.01,691.944 1118.03,690.632 1118.31,689.321 1118.76,689.321 1119.55,688.01 1120.36,686.699 1121.42,685.388 1121.73,684.077 1123.34,682.765 1123.73,681.454 1123.81,680.143 1124.24,678.832 1124.32,677.521 1125.42,676.21 1125.74,674.898 1125.97,673.587 1126.12,672.276 1126.12,672.276 1127.01,672.276 1127.2,672.276 1127.71,670.965 1127.86,669.654 1128.01,669.654 1129.35,668.343 1129.47,667.031 1130.3,665.72 1130.63,664.409 1131.7,664.409 1132.9,664.409 1133.76,664.409 1135.34,663.098 1135.51,663.098 1135.82,663.098 1136.12,661.787 1136.98,661.787 1137.35,660.476 1140.89,660.476 1141.1,659.164 1141.15,659.164 1141.45,659.164 1141.45,659.164 1141.67,657.853 1141.67,656.542 1143.65,656.542 1143.87,655.231 1144.31,653.92 1145.19,653.92 1146.09,653.92 1146.33,652.609 1146.47,651.297 1147.06,649.986 1147.09,649.986 1147.12,649.986 1147.17,648.675 1147.44,647.364 1149.87,646.053 1150.03,646.053 1150.36,644.742 1150.53,643.43 1150.79,642.119 1151.39,640.808 1152.37,639.497 1152.78,638.186 1153.28,638.186 1153.68,636.875 1155.18,635.563 1155.38,635.563 1155.89,634.252 1156.31,632.941 1156.52,631.63 1157.89,630.319 1157.92,630.319 1158.04,629.008 1159.73,627.697 1160.61,626.385 1161.53,626.385 1161.75,625.074 1161.83,623.763 1162.34,622.452 1163.47,621.141 1163.64,619.83 1163.96,619.83 1164.03,619.83 1164.31,618.518 1166.33,618.518 1166.85,618.518 1166.95,618.518 1168.97,618.518 1170.09,617.207 1170.58,617.207 1170.76,615.896 1172.84,614.585 1173.52,613.274 1173.62,611.963 1175.54,610.651 1176.41,610.651 1178.15,609.34 1178.52,608.029 1179.1,606.718 1179.17,605.407 1179.54,605.407 1179.75,604.096 1180.48,604.096 1180.75,602.784 1181.32,601.473 1181.86,601.473 1182.6,600.162 1183.02,598.851 1183.58,597.54 1184,596.229 1186.05,594.917 1186.49,593.606 1186.58,592.295 1186.77,590.984 1188.83,589.673 1189.28,588.362 1190.63,587.05 1191.03,587.05 1193.01,587.05 1195.13,585.739 1195.35,584.428 1197.24,584.428 1197.53,583.117 1200.4,581.806 1201.58,580.495 1201.77,580.495 1201.8,579.183 1201.9,577.872 1202.27,576.561 1202.46,575.25 1202.86,573.939 1202.91,572.628 1203.21,571.316 1203.51,570.005 1203.87,568.694 1205.96,568.694 1206.94,568.694 1210,567.383 1210.3,566.072 1210.63,566.072 1210.98,564.761 1211.26,564.761 1213.06,563.449 1213.72,563.449 1215.75,562.138 1219.77,560.827 1221.89,560.827 1223.85,559.516 1224.27,558.205 1225.49,556.894 1227.13,555.582 1228.27,554.271 1228.68,552.96 1232.74,551.649 1232.78,550.338 1233.54,550.338 1234.24,549.027 1235.85,549.027 1237.25,547.715 1239.07,546.404 1240.04,546.404 1240.77,545.093 1242.46,545.093 1245.75,543.782 1245.77,543.782 1246.88,542.471 1248.88,541.16 1249.51,541.16 1249.54,539.848 1251.72,538.537 1252.87,537.226 1252.89,535.915 1253.85,534.604 1255.18,534.604 1255.3,533.293 1257.09,533.293 1258.04,531.982 1258.41,530.67 1258.68,530.67 1260.41,529.359 1263.56,528.048 1263.92,526.737 1264.66,525.426 1265.25,524.115 1266.52,524.115 1267.95,522.803 1268.16,521.492 1268.42,520.181 1269.94,518.87 1271.22,517.559 1273.1,517.559 1273.36,516.248 1273.46,514.936 1273.8,514.936 1274.49,513.625 1278.43,512.314 1278.76,511.003 1279.17,509.692 1281.18,508.381 1282.28,508.381 1283.65,507.069 1284.75,505.758 1284.85,504.447 1284.92,503.136 1285.29,501.825 1288.99,501.825 1289.82,500.514 1290.26,499.202 1290.36,497.891 1291.85,496.58 1294.83,496.58 1298.66,496.58 1299.35,495.269 1299.45,493.958 1301.19,492.647 1302.98,492.647 1304.72,492.647 1305.71,492.647 1306.62,492.647 1306.66,491.335 1308.36,490.024 1308.83,488.713 1311.72,488.713 1312.89,487.402 1321.79,486.091 1322.54,484.78 1329.9,483.468 1330.79,482.157 1330.98,480.846 1331.19,480.846 1331.8,479.535 1332.02,479.535 1335.48,478.224 1336.68,476.913 1337.55,475.601 1338.89,475.601 1339.29,474.29 1339.6,472.979 1340.23,472.979 1340.77,471.668 1344.67,470.357 1344.93,469.046 1345.23,467.734 1345.23,466.423 1347.43,465.112 1348.98,463.801 1349.87,462.49 1350.87,461.179 1350.9,459.867 1353.71,459.867 1353.81,458.556 1355.42,458.556 1357.07,457.245 1359.17,455.934 1361.71,454.623 1365.31,453.312 1367.74,452 1367.81,450.689 1369.41,450.689 1370.12,449.378 1370.64,448.067 1370.73,446.756 1371.32,446.756 1372.75,445.445 1374.36,444.134 1380.19,442.822 1383.33,441.511 1384.27,440.2 1385.65,438.889 1387.26,438.889 1394.82,437.578 1395.52,437.578 1396.8,436.267 1396.95,436.267 1401.02,434.955 1405.55,433.644 1409.74,432.333 1410.72,431.022 1414.42,429.711 1415.04,428.4 1417.5,427.088 1423.3,427.088 1425.67,425.777 1434.66,425.777 1434.99,425.777 1437.32,424.466 1439.64,423.155 1443.83,421.844 1446.24,420.533 1449.55,419.221 1453.29,417.91 1455.37,417.91 1458.24,417.91 1458.97,416.599 1460.88,415.288 1462.46,413.977 1470.31,412.666 1476.89,411.354 1477.59,410.043 1480.09,410.043 1485.03,410.043 1486.07,408.732 1492.78,407.421 1498.61,406.11 1502.44,404.799 1506.76,403.487 1508.51,402.176 1509.5,400.865 1510.41,399.554 1515.5,398.243 1519.39,398.243 1534.98,396.932 1535.8,395.62 1542.67,394.309 1543.57,394.309 1544.02,392.998 1557.49,391.687 1557.87,391.687 1559.2,390.376 1572.39,390.376 1573.19,389.065 1575.11,387.753 1591.05,386.442 1595.95,386.442 1599.3,385.131 1600.74,383.82 1609.38,383.82 1626.52,383.82 1627.08,382.509 1638.44,381.198 1638.77,379.886 1654.4,379.886 1659.16,378.575 1662.03,377.264 1681.14,377.264 1683.88,375.953 1683.92,375.953 1685.15,375.953 1688.82,374.642 1723.17,373.331 1730.18,373.331 1745.88,373.331 1747.35,372.019 1753.78,372.019 1761.66,370.708 1766.12,370.708 1769.19,370.708 1776.17,369.397 1799.74,368.086 1813.17,366.775 1814.94,366.775 1830.3,365.464 1838.45,365.464 1842.4,365.464 1858.18,364.152 1884.93,362.841 1887.71,361.53 1888.93,360.219 1913.15,360.219 1933.96,358.908 1949.66,357.597 1957.56,356.286 1969.9,354.974 1972.97,353.663 2018.72,352.352 2042.23,351.041 2046.19,349.73 2089.82,349.73 2116.93,348.419 2205.37,348.419 2293.6,347.107 \"/>\n<path clip-path=\"url(#clip180)\" d=\"M2047.14 300.469 L2283.08 300.469 L2283.08 93.1086 L2047.14 93.1086  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2047.14,300.469 2283.08,300.469 2283.08,93.1086 2047.14,93.1086 2047.14,300.469 \"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2070.37,144.949 2209.71,144.949 \"/>\n<path clip-path=\"url(#clip180)\" d=\"M2255.18 128.803 L2255.18 133.363 Q2252.52 132.09 2250.16 131.465 Q2247.8 130.84 2245.6 130.84 Q2241.78 130.84 2239.7 132.321 Q2237.64 133.803 2237.64 136.534 Q2237.64 138.826 2239 140.007 Q2240.39 141.164 2244.23 141.882 L2247.06 142.46 Q2252.29 143.456 2254.77 145.979 Q2257.27 148.479 2257.27 152.692 Q2257.27 157.715 2253.89 160.307 Q2250.53 162.9 2244.02 162.9 Q2241.57 162.9 2238.79 162.344 Q2236.04 161.789 2233.08 160.701 L2233.08 155.886 Q2235.92 157.483 2238.65 158.293 Q2241.39 159.104 2244.02 159.104 Q2248.03 159.104 2250.21 157.53 Q2252.38 155.956 2252.38 153.039 Q2252.38 150.493 2250.81 149.057 Q2249.26 147.622 2245.69 146.905 L2242.84 146.349 Q2237.61 145.307 2235.27 143.085 Q2232.94 140.863 2232.94 136.905 Q2232.94 132.321 2236.15 129.682 Q2239.4 127.044 2245.07 127.044 Q2247.5 127.044 2250.02 127.483 Q2252.54 127.923 2255.18 128.803 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip180)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2070.37,196.789 2209.71,196.789 \"/>\n<path clip-path=\"url(#clip180)\" d=\"M2232.94 179.509 L2237.61 179.509 L2237.61 214.069 L2232.94 214.069 L2232.94 179.509 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip180)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2070.37,248.629 2209.71,248.629 \"/>\n<path clip-path=\"url(#clip180)\" d=\"M2249.33 249.705 Q2250.83 250.214 2252.24 251.881 Q2253.68 253.548 2255.11 256.464 L2259.86 265.909 L2254.83 265.909 L2250.41 257.043 Q2248.7 253.571 2247.08 252.436 Q2245.48 251.302 2242.71 251.302 L2237.61 251.302 L2237.61 265.909 L2232.94 265.909 L2232.94 231.349 L2243.49 231.349 Q2249.42 231.349 2252.33 233.825 Q2255.25 236.302 2255.25 241.302 Q2255.25 244.566 2253.72 246.719 Q2252.22 248.872 2249.33 249.705 M2237.61 235.191 L2237.61 247.46 L2243.49 247.46 Q2246.87 247.46 2248.58 245.909 Q2250.32 244.335 2250.32 241.302 Q2250.32 238.27 2248.58 236.742 Q2246.87 235.191 2243.49 235.191 L2237.61 235.191 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"","category":"page"},{"location":"sir/","page":"SIR Model","title":"SIR Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"EditURL = \"constant_birth.jl\"","category":"page"},{"location":"constant_birth/#Delayed-Birth-Death-Process","page":"Birth-death Process","title":"Delayed Birth-Death Process","text":"","category":"section"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"using Random\nusing Distributions\nusing Fleck","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"Birth-death processes are a fundamental type of stochastic process, and are the building block of many more complicated models. Here we demonstrate how to use Fleck to build a very simple simulation of a birth-death process where birth occurs according to an exponential (Markov) clock, but death occurs according to a Weibull distribution. We compare ensemble results to the known stationary distribution. Such models have been considered many times in the literature, but a recent reference is in \"Stochastic description of delayed systems\" by Lafuerza and Toral.","category":"page"},{"location":"constant_birth/#Model-structure","page":"Birth-death Process","title":"Model structure","text":"","category":"section"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"The model will be stored in a struct with a type parameter that is a subtype of ContinuousUnivariateDistribution, which is the distribution type for the clock associated to death. We also define a function initialize_model! which enables a single clock for the birth event, and for each individual in the initial population, enables a death clock for that individual.","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"Known results tell us that the mean of the stationary distribution will be the birth rate multiplied by the average duration alive, which we use to choose the number of individuals in the initial population. We expect the model to fluctuate randomly around this value.","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"mutable struct ConstantBirth{T <: ContinuousUnivariateDistribution}\n    birth_rate::Float64\n    death_distribution::T\n    next_name::Int64\n    alive::Int64\n    when::Float64\nend\n\n\nfunction initialize_model!(model, sampler, rng)\n    enable!(sampler, 1, Exponential(1.0 / model.birth_rate), 0.0, 0.0, rng)\n\n    initial_population = model.birth_rate * mean(model.death_distribution)\n\n    for name_id in 1:Int(round(initial_population))\n        past_birth = rand(rng, model.death_distribution)\n        enable!(sampler, name_id, model.death_distribution, -past_birth, 0.0, rng)\n        model.next_name = name_id + 1\n        model.alive += 1\n    end\nend;","category":"page"},{"location":"constant_birth/#Model-update","page":"Birth-death Process","title":"Model update","text":"","category":"section"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"There's two classes of events that can occur in this model. Birth is always assigned to key 1. When it fires, we disable and enable the birth process to reset it, and then enable a death clock for the new individual. If the firing event was death, we simply disable the clock. We return the integrated population over time from the step! method to check simulation results.","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"function step!(model::ConstantBirth, sampler::SSA{K,T}, when::T, which::K, rng) where {K,T}\n    if which == 1\n        disable!(sampler, 1, when)\n        enable!(sampler, 1, Exponential(1.0 / model.birth_rate), when, when, rng)\n\n        name_id = model.next_name\n        enable!(sampler, name_id, model.death_distribution, when, when, rng)\n        model.next_name += 1\n        model.alive += 1\n    else\n        disable!(sampler, which, when)\n        model.alive -= 1\n    end\n    duration = when - model.when\n    model.when = when\n    model.alive * duration\nend;","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"Our run function is simple. We use the FirstToFire sampler, but any sampler from Fleck capable of supporting non-Exponential distributions can be used.","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"function run_constant_birth(rng, max_step = 10000)\n    birth_rate = 117.0\n    death_rate = Weibull(2.0, 80)\n    model = ConstantBirth(birth_rate, death_rate, 2, 0, 0.0)\n\n    sampler = FirstToFire{Int,Float64}()\n    initialize_model!(model, sampler, rng)\n    # Begin by dropping a few events to account for burn-in.\n    when = 0.0\n    (when, which) = next(sampler, when, rng)\n    while when < 1e4\n        step!(model, sampler, when, which, rng)\n        (when, which) = next(sampler, when, rng)\n    end\n\n    # Then collect statistics.\n    total::Float64 = 0.0\n    start_time = when\n    for _ in 1:max_step\n        total += step!(model, sampler, when, which, rng)\n        (when, which) = next(sampler, when, rng)\n    end\n    steady_state = model.birth_rate * mean(model.death_distribution)\n\n    observed_state = total / (when - start_time)\n    (steady_state, observed_state)\nend;","category":"page"},{"location":"constant_birth/#Simulation","page":"Birth-death Process","title":"Simulation","text":"","category":"section"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"We check below that as we increase the data collected, it gets closer to the expected average with smaller standard deviation.","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"function multiple_runs(trial_cnt = 20, max_step = 1000)\n    rng = Xoshiro(837100235)\n    trials = zeros(Float64, trial_cnt)\n    single_expected = 0.0\n    Threads.@threads for trial_idx in 1:trial_cnt\n        expected, observed = run_constant_birth(rng, max_step)\n        trials[trial_idx] = observed\n        single_expected = expected\n    end\n    (single_expected,\n     (mean(trials) - single_expected) / single_expected,\n     std(trials) / single_expected)\nend\n\nmultiple_runs(20, 100)","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"(8295.084022237816, 0.008025814220693235, 0.018347178373091466)","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"multiple_runs(20, 1000)","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"(8295.084022237816, -0.0011113782851605522, 0.012126041783397188)","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"multiple_runs(20, 10000)","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"(8295.084022237816, -0.003383332381424693, 0.012100328263793862)","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"","category":"page"},{"location":"constant_birth/","page":"Birth-death Process","title":"Birth-death Process","text":"This page was generated using Literate.jl.","category":"page"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"EditURL = \"commonrandom.jl\"","category":"page"},{"location":"commonrandom/#Common-Random-Numbers","page":"Common Random Numbers","title":"Common Random Numbers","text":"","category":"section"},{"location":"commonrandom/#Introduction","page":"Common Random Numbers","title":"Introduction","text":"","category":"section"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"If you set up the same model and run it with different initial random number generator (RNG) states, then it will create a set of trajectories. Fleck sees these as a sequence of clock events and times of those events. You are usually interested in some summary outcomes of a simulation, such as the total time to a goal or the number of events. This summary outcome is a predictable function of the trajectories. We often want to ask how the goal function depends on simulation parameters, and that can be difficult to determine because each trajectory gives an individual value, and the set of trajectories gives an estimate that can have wide variance.","category":"page"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"What we want is a variance reduction technique. Common random numbers (CRN) are a variance reduction technique that enables you to use fewer simulation runs to compare the effect of different simulation parameters on the outcome. There are several other variance reduction techniques, such as antithetic variates and importance sampling, but let's look at common random numbers in Fleck.","category":"page"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"If you estimate a value with n independent trajectories, then the bias of the estimate is proportional to 1sqrtn in most cases. If you want to distinguish the effect of changing a parameter, then the estimate must be precise enough that you can see the difference. It is common to use millions of trajectories. On the other hand, CRN means that you can produce n=100 trajectories, with significant bias in the estimate, and still see the effect of changing a parameter.","category":"page"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"CRN works well when the sample path is similar from run to run. If two runs use completely different events, then there will be too little overlap. If the causal chain of which events affect other events changes, that can be a problem, too. In most cases, people try CRN and see if it helps.","category":"page"},{"location":"commonrandom/#Using-Common-Random-Numbers-in-Fleck","page":"Common Random Numbers","title":"Using Common Random Numbers in Fleck","text":"","category":"section"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"Fleck implements common random numbers by recording the state of the random number generator every time a clock is enabled. There are other ways to do this, but this one works with the CombinedNextReaction and FirstToFire samplers. The workflow you would use looks notionally like:","category":"page"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"Create a sampler.\nWrap it in a CommonRandomRecorder.\nRun a lot of simulations in order to explore and record all possible clock states. Run reset!(recorder) after each simulation.\nFor every parameter set to try, run it the same way, using reset! after each run.\nCompare outcomes.","category":"page"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"Because the CommonRandomRecorder stores the state of the random number generator at each step, it works best with random number generators that have small state, such as Xoshiro on a linear congruential generator (LCG).","category":"page"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"using Random: Xoshiro\nusing Fleck\nexample_clock = (3, 7)  # We will use clock IDs that are a tuple of 2 integers.\nmodel = MakeModel()\nsampler = FirstToFire{typeof(example_clock),Float64}()\ncrn_sampler = CommonRandomRecorder(sampler, typeof(example_clock), Xoshiro)\nfor trial_idx in 1:100\n    run_simulation(model, crn_sampler)\n    reset!(crn_sampler)\nend\nfor param_idx in 1:10\n    each_model = modify_model!(model, param_idx)\n    run_simulation(each_model, crn_sampler)\n    reset!(crn_sampler)\nend","category":"page"},{"location":"commonrandom/#Multithreading","page":"Common Random Numbers","title":"Multithreading","text":"","category":"section"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"A joy of using simulations is how easy it is to parallelize simulation runs across tasks. That can be a challenge for the CommonRandomRecorder because it continues to observe and record new RNG states as it comes across them. That will result in divergence between behavior on different threads. For that reason, it is possible to freeze a CommonRandomRecorder. It will stop recording states, so make sure to first prime it with lots of simulation runs, and then freeze the recorder and use that as the sampler for multiple simulations on multiple threads.","category":"page"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"using Random: Xoshiro\nusing Fleck\nexample_clock = (3, 7)  # We will use clock IDs that are a tuple of 2 integers.\nmodel = MakeModel()\nsampler = FirstToFire{typeof(example_clock),Float64}()\ncrn_sampler = CommonRandomRecorder(sampler, typeof(example_clock), Xoshiro)\nfor trial_idx in 1:100\n    run_simulation(model, crn_sampler)\n    reset!(crn_sampler)\nend\nfor thread_idx in 1:10\n    frozen_crn = freeze(crn_sampler)\n    # start a simulation run on this thread with frozen_crn.\nend","category":"page"},{"location":"commonrandom/#Checking-effectiveness-of-Common-Random-Numbers","page":"Common Random Numbers","title":"Checking effectiveness of Common Random Numbers","text":"","category":"section"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"If your simulation has a large sample space, CRN may not help. We run a first set of simulations in order to record the state of the system for lots of different clocks and different multiplicities of clock events. If that worked well, then subsequent runs of the simulation will re-use draws from the random number generator. If there are a lot of events which are needed but haven't been recorded, those misses are a sign that CRN is unlikely to reduce variance much for this simulation.","category":"page"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"We check this by checking the misscount during later runs of the simulation under CRN. If that miss count is high, we can look into which clocks are firing that didn't previously fire by iterating over the misses, which are pairs of (clock key, number of misses for that clock).","category":"page"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"The final word on effectiveness of CRN is to look at the variance of summary outcomes for runs with and without CRN. The CRN will, in general, slow down a sampler, but it should mean that many fewer runs are required to distinguish the effect of changes in system parameters.","category":"page"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"","category":"page"},{"location":"commonrandom/","page":"Common Random Numbers","title":"Common Random Numbers","text":"This page was generated using Literate.jl.","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"EditURL = \"simple_board.jl\"","category":"page"},{"location":"mainloop/#Sample-Main-Loop","page":"Sample Main Loop","title":"Sample Main Loop","text":"","category":"section"},{"location":"mainloop/#Introduction","page":"Sample Main Loop","title":"Introduction","text":"","category":"section"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"Let's walk through a small simulation so that we can see how Fleck could appear in the main loop. This models individuals wandering around on a checkerboard, where no two individuals can occupy the same space. First, let's import libraries.","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"import Base\nusing Distributions\nusing Random\nusing SparseArrays\nusing Test\nusing Fleck","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"There is a physical state for the model, separate from the state of the bag of clocks and separate from the time. Most of the board is empty, so let's use a spare matrix to represent the locations of individuals.","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"mutable struct PhysicalState\n    board::SparseMatrixCSC{Int64, Int64}\nend\n\n# They can move in any of four directions.\n@enum Direction Up Left Down Right\nconst DirectionDelta = Dict(\n    Up => CartesianIndex(-1, 0),\n    Left => CartesianIndex(0, -1),\n    Down => CartesianIndex(1, 0),\n    Right => CartesianIndex(0, 1),\n    );","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"The simulation, itself, carries the state of the clocks in the sampler, as well as the physical state. We'll call it a finite state machine (FSM) because it has the traits of a Moore machine.","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"mutable struct SimulationFSM{Sampler}\n    physical::PhysicalState\n    sampler::Sampler\n    when::Float64\n    rng::Xoshiro\nend","category":"page"},{"location":"mainloop/#Main-Loop","page":"Sample Main Loop","title":"Main Loop","text":"","category":"section"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"The main loop will ask what event happens next to the state. When that event changes the state, the loop will update the set of possible next events by disabling outdated ones and enabling new ones. The calls to Fleck are:","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"next(sampler, current time, random number generator (RNG))\nenable!(sampler, event ID, distribution, current time, start time of clock, RNG)\ndisable!(sampler, event ID, current time)","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"There are a lot of samplers in Fleck to choose from. This example uses CombinedNextReaction algorithm, which has good performance for a variety of distributions. Samplers in Fleck require two type parameters, a key type for clocks and the type used to represent time. In this case, the clock key type fully represents an event, giving the ID of the individual, where they start, and which direction they may move.","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"const ClockKey = Tuple{Int,CartesianIndex{2},Direction}\n\nfunction run(event_count)\n    Sampler = CombinedNextReaction{ClockKey,Float64}\n    physical = PhysicalState(zeros(Int, 10, 10))\n    @test showable(MIME(\"text/plain\"), physical)\n    sim = SimulationFSM{Sampler}(\n        physical,\n        Sampler(),\n        0.0,\n        Xoshiro(2947223)\n    )\n    initialize!(sim.physical, 9, sim.rng)\n    current_events = allowed_moves(sim.physical)\n    for event_id in current_events\n        enable!(sim.sampler, event_id, Weibull(1.0), 0.0, 0.0, sim.rng)\n    end\n\n    for i in 1:event_count\n        (when, what) = next(sim.sampler, sim.when, sim.rng)\n        if isfinite(when) && !isnothing(what)\n            sim.when = when\n            move!(sim.physical, what)\n            next_events = allowed_moves(sim.physical)\n            for remove_event in setdiff(current_events, next_events)\n                disable!(sim.sampler, remove_event, when)\n            end\n            for add_event in setdiff(next_events, current_events)\n                enable!(sim.sampler, add_event, Weibull(1.0), when, when, sim.rng)\n            end\n            current_events = next_events\n            @show (when, what)\n        end\n    end\nend;","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"For this checkerboard with wandering individuals, the allowed moves are moves by any individual to any free square on the board. The set of allowed moves is precisely the set of enabled clocks, so it stores ClockKeys.","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"function allowed_moves(physical::PhysicalState)\n    allowed = Set{ClockKey}()\n    row, col, value = findnz(physical.board)\n    for ind_idx in eachindex(value)\n        location = CartesianIndex((row[ind_idx], col[ind_idx]))\n        for (direction, offset) in DirectionDelta\n            if checkbounds(Bool, physical.board, location + offset)\n                if physical.board[location + offset] == 0\n                    push!(allowed, (value[ind_idx], location, direction))\n                end\n            end\n        end\n    end\n    return allowed\nend;","category":"page"},{"location":"mainloop/#Changes-to-the-state-of-the-board","page":"Sample Main Loop","title":"Changes to the state of the board","text":"","category":"section"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"We set up the board with an initializer that places individuals at random. We move one individual at a time, when their next event happens.","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"function initialize!(physical::PhysicalState, individuals::Int, rng)\n    physical.board .= 0\n    dropzeros!(physical.board)\n    locations = zeros(CartesianIndex{2}, individuals)\n    for ind_idx in 1:individuals\n        loc = rand(rng, CartesianIndices(physical.board))\n        while physical.board[loc] != 0\n            loc = rand(rng, CartesianIndices(physical.board))\n        end\n        locations[ind_idx] = loc\n        physical.board[loc] = ind_idx\n    end\nend;\n\n\nfunction move!(physical::PhysicalState, event_id)\n    (individual, previous_location, direction) = event_id\n    next_location = previous_location + DirectionDelta[direction]\n    # This sets the previous board value to zero.\n    SparseArrays.dropstored!(physical.board, previous_location.I...)\n    physical.board[next_location] = individual\nend;","category":"page"},{"location":"mainloop/#How-it-runs","page":"Sample Main Loop","title":"How it runs","text":"","category":"section"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"A run of this simulation produces a sequence of moves, no two happening at the same time because this is a continuous-time simulation.","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"run(10)","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"(when, what) = (0.07319364933011555, (7, CartesianIndex(7, 6), Main.var\"##225\".Right))\n(when, what) = (0.10866577949385807, (3, CartesianIndex(1, 8), Main.var\"##225\".Left))\n(when, what) = (0.15079187330778177, (3, CartesianIndex(1, 7), Main.var\"##225\".Right))\n(when, what) = (0.1682581650543986, (3, CartesianIndex(1, 8), Main.var\"##225\".Left))\n(when, what) = (0.1951607095320235, (4, CartesianIndex(9, 1), Main.var\"##225\".Up))\n(when, what) = (0.20347320994043128, (2, CartesianIndex(5, 10), Main.var\"##225\".Down))\n(when, what) = (0.21529944487579133, (4, CartesianIndex(8, 1), Main.var\"##225\".Right))\n(when, what) = (0.2634608206635203, (9, CartesianIndex(1, 3), Main.var\"##225\".Down))\n(when, what) = (0.26803917104227504, (7, CartesianIndex(7, 7), Main.var\"##225\".Down))\n(when, what) = (0.26949661650175905, (2, CartesianIndex(6, 10), Main.var\"##225\".Up))\n","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"","category":"page"},{"location":"mainloop/","page":"Sample Main Loop","title":"Sample Main Loop","text":"This page was generated using Literate.jl.","category":"page"},{"location":"guide/#Bag-of-Clocks","page":"Bag of Clocks","title":"Bag of Clocks","text":"","category":"section"},{"location":"guide/","page":"Bag of Clocks","title":"Bag of Clocks","text":"We can introduce this style of simulation with a description that has no equations.","category":"page"},{"location":"guide/","page":"Bag of Clocks","title":"Bag of Clocks","text":"We use the term discrete event simulation when code tracks the effects of individual events in time. We classify discrete event simulations by the pace of advances in time. If time advances in steps of the same size, it is a discrete-time simulation. If time advances to the next event, whenever that event might happen, it is continuous-time simulation. This library supports continuous-time discrete-event simulations.","category":"page"},{"location":"guide/","page":"Bag of Clocks","title":"Bag of Clocks","text":"We write discrete event simulations by defining the state of a system and events that can act on that state. The state of a system can be the count of each chemical species for a chemical reaction system. It can be different numbers of chickens at different weights in different chicken coops for a farming simulation. It can be the age of each widget in an engine for a reliability simulation. These states are called the physical state of the system and vary widely in what they represent.","category":"page"},{"location":"guide/","page":"Bag of Clocks","title":"Bag of Clocks","text":"Even though nearly every simulation represents a unique system, it is often possible to find enough in common among systems that we can make libraries to help create, simulate, and observe changes of state. For instance, a large class of physical states are counts of things, whether they are molecules, vehicles, or chickens. These states can be represented in code as vectors of integers, and there is a long history of models represented by vectors of integers. Most of this work focuses on using chemical simulation codes to represent not only chemicals but also other systems like vehicles. An older, more general, form of this simulation is the vector addition system, which a later section of this manual describes. However, states don't need to be vectors of integers.","category":"page"},{"location":"guide/","page":"Bag of Clocks","title":"Bag of Clocks","text":"We usually want to simulate systems that have real-valued observations such as ages, temperatures, and distances. These continuous parts of the state of the system mean that the system rarely returns to exactly the same state. There are now an infinite number of possible states of the system, which changes how we would think of the statistics of the system, but it doesn't much change how we handle simulation, because simulation is still driven by events.","category":"page"},{"location":"guide/","page":"Bag of Clocks","title":"Bag of Clocks","text":"An event is an observable change of state at a time. It is a function where the argument is the current state of the system and the return value is the new state of the system. We say an event occurs, happens, or fires when we apply that function to the state. How that state changes is up to the model and how it defines the state, but what about when that state changes?","category":"page"},{"location":"guide/","page":"Bag of Clocks","title":"Bag of Clocks","text":"Given the current state of the system, there is a set of possible next events which could happen. We call the possible next events enabled. Think of the moment in time just after the simulation has begun or an event has just happened. At this moment, there may be multiple enabled events. Which one is next depends on how often that event happens. If our simulation includes both the radioactive decay of an unstable element and decay of iron, the unstable element will usually decay first. We describe the rates of these events using probability distributions in time. Each event has an associated continuous univariate distribution where the variable is time.","category":"page"},{"location":"guide/","page":"Bag of Clocks","title":"Bag of Clocks","text":"We can think of all event distributions in a model as a bag of clocks. The next one to ring is the next event to occur. When that event occurs, the state changes. When the state changes, it will enable some events and disable others. Enabled events are added to the bag of clocks. Disabled ones are removed. This library holds the bag of clocks.","category":"page"},{"location":"guide/#Sets-of-Clocks","page":"Bag of Clocks","title":"Sets of Clocks","text":"","category":"section"},{"location":"guide/","page":"Bag of Clocks","title":"Bag of Clocks","text":"In Fleck, clocks can be either enabled or disabled. The firing of clocks triggers events, which change the state of the system. This in turn changes the set of clocks that are enabled. This is the basic algorithm to sample models that are phrased as continuous-time discrete-event systems.","category":"page"},{"location":"guide/","page":"Bag of Clocks","title":"Bag of Clocks","text":"It is worth examining what happens at a state update in more detail. Let E^* be the set of clocks (typically, just a single clock) that fires, and whose associated event updates state from S to S^. There are then three basic sets of clocks to consider: E(S), the set of clocks enabled in S, E(S^), the set of clocks enabled in S^, and E^*, the set of clocks that fired.","category":"page"},{"location":"guide/","page":"Bag of Clocks","title":"Bag of Clocks","text":"Newly enabled clocks are those that are enabled in S^ not part of the set that was enabled in S and remains enabled in S^. Newly disabled clocks are those that were enabled in S but are not enabled in S^. Finally old clocks are those that were enabled in S, and remain so in S^.","category":"page"},{"location":"guide/","page":"Bag of Clocks","title":"Bag of Clocks","text":"All these sets are visualized in the figure below, reproduced from \"Stochastic petri nets: Modelling, stability, simulation\" by Peter J. Haas (2002).","category":"page"},{"location":"guide/","page":"Bag of Clocks","title":"Bag of Clocks","text":"(Image: )","category":"page"},{"location":"vas/#Vector-Addition-System","page":"Vector Addition Systems","title":"Vector Addition System","text":"","category":"section"},{"location":"vas/","page":"Vector Addition Systems","title":"Vector Addition Systems","text":"One way to understand how to use Fleck is to look at a very simple simulation. A vector addition system (VAS) is a lot like chemical simulations, but it's free of some of the assumptions about chemical rates. The physical state of the system is a vector of integers. Such a simple physical state can make it easier to understand possible complications in how we define events.","category":"page"},{"location":"vas/","page":"Vector Addition Systems","title":"Vector Addition Systems","text":"There are variations on how to define a vector addition system. Let's begin with one and introduce variations as they become interesting.","category":"page"},{"location":"vas/","page":"Vector Addition Systems","title":"Vector Addition Systems","text":"A vector addition system is","category":"page"},{"location":"vas/","page":"Vector Addition Systems","title":"Vector Addition Systems","text":"a physical state p which is a set of d integers, labeled (p_1 p_2cdots p_d).\na system time, t\na finite set of events E where each event has an enabling rule, a distribution, and a firing rule.\na rule for when the event is enabled, where the rule is an invariant on the physical state, such as r_i(p)ge 0. When the invariant is met, the event is enabled. When the invariant is not met, the event is disabled. For a vector addition system, this rule must be expressible as a matrix multiplication, so Mcdot vecp ge 0, where the ge means we are checking elementwise that every element is non-negative.\na distribution in time, where the distribution is determined at enabling time and is a function of the physical state and system time at enabling. The distribution in time can have shocks, such as a delta function, but it may not have a shock at time zero, must have a measure-zero probability of firing at the same moment it is enabled.\na rule for how the event changes physical state when it happens. The domain and co-domain of the rule are physical states of the system. Let's limit this model to require all events to modify the state, so that we exclude events that don't modify the state. As with enabling, this must be expressible as a matrix operation on the physical states to produce a new physical state.\nFrom the rules, we see that an event's state is either disabled or enabled at an enabling time t_e.","category":"page"},{"location":"vas/","page":"Vector Addition Systems","title":"Vector Addition Systems","text":"How would we implement this system? It's set up so that enabling rules and firing rules can be done with linear algebra. We can write this in Julia code ","category":"page"},{"location":"vas/","page":"Vector Addition Systems","title":"Vector Addition Systems","text":"Simulation using the VAS requires concrete implementation of the interface:","category":"page"},{"location":"vas/","page":"Vector Addition Systems","title":"Vector Addition Systems","text":"zero_state(vas::VectorAdditionSystem)\nvas_delta(vas::VectorAdditionSystem, transition_idx)\nvas_initial(vas::VectorAdditionSystem, initial_state)\nfire!(visitor, vas::VectorAdditionSystem, state, modify_state, rng)\nsimstep!(fsm::VectorAdditionFSM, state_update::Function, rng::AbstractRNG)","category":"page"},{"location":"vas/","page":"Vector Addition Systems","title":"Vector Addition Systems","text":"The method fire! first modifies state, then, for each clock in the system, it checks whether it has been newly enabled or disabled.","category":"page"},{"location":"vas/","page":"Vector Addition Systems","title":"Vector Addition Systems","text":"newly disabled: visitor is called to disable that transition\nnewly enabled: visitor is called to enable that transition and cache its newly calculated intensity\nstill enabled: we check if the new intensity differs from the old and if so use visitor to update the intensity","category":"page"},{"location":"vas/","page":"Vector Addition Systems","title":"Vector Addition Systems","text":"The method simstep! first applies fire!, followed by next.","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"CurrentModule = Fleck","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Interface\nSamplers\nAlgorithms","category":"page"},{"location":"reference/#Interface","page":"Reference","title":"Interface","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"These are methods which are defined for any samplers subtyping <:SSA, the abstract sampler type.","category":"page"},{"location":"reference/#Use-a-Sampler","page":"Reference","title":"Use a Sampler","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"enable!\ndisable!\nnext\nreset!","category":"page"},{"location":"reference/#Fleck.enable!","page":"Reference","title":"Fleck.enable!","text":"enable!(sampler, clock, distribution, enablingtime, currenttime, RNG)\n\nTell the sampler to start a clock.\n\nsampler::SSA{KeyType,TimeType} - The sampler to tell.\nclock::KeyType - The ID of the clock. Can be a string, integer, tuple, etc.\ndistribution::Distributions.UnivariateDistribution\nenablingtime::TimeType - The zero time for the clock's distribution, in absolute time. Usually equal to when.\nwhen::TimeType - The current time of the simulation.\nrng::AbstractRNG - A random number generator.\n\n\n\n\n\nenable!(dc::DirectCall, clock::T, distribution::Exponential, when, rng)\n\nTell the DirectCall sampler to enable this clock. The clock argument is an identifier for the clock. The distribution is a univariate distribution in time. In Julia, distributions are always relative to time t=0, but ours start at some absolute enabling time, t_e, so we provide that here. The when argument is the time at which this clock is enabled, which may be later than when it was first enabled. The rng is a random number generator.\n\nIf a particular clock had one rate before an event and it has another rate after the event, call enable! to update the rate.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Fleck.disable!","page":"Reference","title":"Fleck.disable!","text":"disable!(sampler, clock, when)\n\nTell the sampler to forget a clock. We include the current simulation time because some Next Reaction methods use this to optimize sampling.\n\n\n\n\n\ndisable!(dc::DirectCall, clock::T, when)\n\nTell the DirectCall sampler to disable this clock. The clock argument is an identifier for the clock. The when argument is the time at which this clock is enabled.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Fleck.next","page":"Reference","title":"Fleck.next","text":"next(sampler, when, rng)\n\nAsk the sampler for what happens next, in the form of (when, which)::Tuple{TimeType,KeyType}. rng is a random number generator.\n\n\n\n\n\nnext(dc::DirectCall, when::TimeType, rng::AbstractRNG)\n\nAsk the sampler what clock will be the next to fire and at what time. This does not change the sampler. You can call this multiple times and get multiple answers. Each answer is a tuple of (when, which clock). If there is no clock to fire, then the response will be (Inf, nothing). That's a good sign the simulation is done.\n\n\n\n\n\nnext(multiple_direct, when, rng)\n\nSelects the next transition to fire and when it fires.\n\nThere are two main algorithms for this selection. This implementation handles the case when there are a lot of clocks or when some clocks have much smaller hazards. It first draws a random number to choose which subset of hazards will be used, and then it asks that subset to draw a random number to choose which particular hazard is used. When there are many hazards, it is possible that a random number generator will never choose a particular value because there is no guarantee that a random number generator covers every combination of bits. Using more draws decreases the likelihood of this problem.\n\n\n\n\n\nFor the first reaction sampler, you can call next() multiple times and get different, valid, answers. That isn't the case here. When you call next() on a CombinedNextReaction sampler, it returns the key associated with the clock that fires and marks that clock as fired. Calling next() again would return a nonsensical value.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Fleck.reset!","page":"Reference","title":"Fleck.reset!","text":"reset!(sampler)\n\nAfter a sampler is used for a simulation run, it has internal state. This function resets that internal state to the initial value in preparation for another sample run.\n\n\n\n\n\nreset!(recorder::CommonRandomRecorder)\n\nThe common random recorder records the state of the random number generator for each clock, but the same clock can be enabled multiple times in one simulation, so it records the generator state for each (clock, index of the enabling of that clock). The reset! function says we are starting a new simulation run, so all clocks haven't been seen.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Query-a-Sampler","page":"Reference","title":"Query a Sampler","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"getindex\nkeys\nkeytype\nlength","category":"page"},{"location":"reference/#Base.getindex","page":"Reference","title":"Base.getindex","text":"getindex(sampler, clock::KeyType)\n\nReturn stored state for a particular clock. If the clock does not exist, a KeyError will be thrown.\n\n\n\n\n\ngetindex(sampler::FirstReaction{K,T}, clock::K)\n\nFor the FirstReaction sampler, returns the distribution object associated to the clock.\n\n\n\n\n\ngetindex(sampler::FirstToFire{K,T}, clock::K)\n\nFor the FirstToFire sampler, returns the stored firing time associated to the clock.\n\n\n\n\n\ngetindex(sampler::DirectCall{K,T}, clock::K)\n\nFor the DirectCall sampler, returns the rate parameter associated to the clock.\n\n\n\n\n\ngetindex(sampler::CombinedNextReaction{K,T}, clock::K)\n\nFor the CombinedNextReaction sampler, returns the stored firing time associated to the clock.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.keys","page":"Reference","title":"Base.keys","text":"keys(sampler)\n\nReturn all stored clocks as a vector.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.keytype","page":"Reference","title":"Base.keytype","text":"keytype(sampler)\n\nReturn the type of clock keys.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.length","page":"Reference","title":"Base.length","text":"length(sampler)::Int64\n\nReturn the number of stored clocks.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Samplers","page":"Reference","title":"Samplers","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"The choice of sampler determines specific algorithms that are used to sample, update, and disable clocks. Helpers also exist that are useful for logging, utilizing common random numbers, and hierarchical sampling.","category":"page"},{"location":"reference/#Sampler-Supertype","page":"Reference","title":"Sampler Supertype","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"SSA","category":"page"},{"location":"reference/#Fleck.SSA","page":"Reference","title":"Fleck.SSA","text":"SSA{KeyType,TimeType}\n\nThis abstract type represents a stochastic simulation algorithm (SSA). It is parametrized by the clock ID, or key, and the type used for the time, which is typically a Float64. The type of the key can be anything you would use as a dictionary key. This excludes mutable values but includes a wide range of identifiers useful for simulation. For instance, it could be a String, but it could be a Tuple{Int64,Int64,Int64}, so that it indexes into a complicated simulation state.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Sampler-Types","page":"Reference","title":"Sampler Types","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"FirstReaction\nFirstToFire\nDirectCall\nCombinedNextReaction\nconsume_survival\nsampling_space","category":"page"},{"location":"reference/#Fleck.FirstReaction","page":"Reference","title":"Fleck.FirstReaction","text":"FirstReaction{KeyType,TimeType}()\n\nThis is the classic first reaction method for general distributions.  Every time you sample, this goes to each distribution and asks when it would fire. Then it takes the soonest and throws out the rest of the sampled times until the next sample. It can also be very fast when there are only a few clocks to sample.\n\nOne interesting property of this sampler is that you can call next() multiple times in order to get a distribution of next firing clocks and their times to fire.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Fleck.FirstToFire","page":"Reference","title":"Fleck.FirstToFire","text":"FirstToFire{KeyType,TimeType}()\n\nThis sampler is often the fastest for non-exponential distributions. When a clock is first enabled, this sampler asks the clock when it would fire and saves that time in a sorted heap of future times. Then it works through the heap, one by one. When a clock is disabled, its future firing time is removed from the list. There is no memory of previous firing times.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Fleck.DirectCall","page":"Reference","title":"Fleck.DirectCall","text":"DirectCall{KeyType,TimeType,TreeType}()\n\nDirectCall is responsible for sampling among Exponential distributions. It samples using the Direct method. In this case, there is no optimization to that Direct method, so we call it DirectCall because it recalculates everything every time you call it.\n\nThe algorithm for the Direct Method relies heavily on what data structure it uses to maintain a list of hazard rates, such that it can know the sum of those hazards and index into them using a random value. This struct has a default constructor that chooses a data structure for you, but there are several options.\n\nExample\n\nIf we know that our simulation will only use a small number of different clock keys, then it would make sense to use a data structure that disables clocks by zeroing them out, instead of removing them from the list. This will greatly reduce memory churn. We can do that by changing the underlying data structure.\n\nprefix_tree = BinaryTreePrefixSearch{T}()\nkeyed_prefix_tree = KeyedKeepPrefixSearch{K,typeof(prefix_tree)}(prefix_tree)\nsampler_noremove = DirectCall{K,T,typeof(keyed_prefix_tree)}(keyed_prefix_tree)\n\n\n\n\n\n","category":"type"},{"location":"reference/#Fleck.CombinedNextReaction","page":"Reference","title":"Fleck.CombinedNextReaction","text":"CombinedNextReaction{KeyType,TimeType}()\n\nThis combines Next Reaction Method and Modified Next Reaction Method. The Next Reaction Method is from Gibson and Bruck in their 2000 paper called \"Efficient Exact Stochastic Simulation of Chemical Systems with Many Species and Many Channels\".  The Modified Next Reaction Method is from David F. Anderson's 2007 paper,  \"A modified Next Reaction Method for simulating chemical systems with time dependent propensities and delays\".  Both methods reuse draws of random numbers. The former works by accumulating  survival of a distribution in a linear space and the latter works by accumulating  survival of a distribution in a log space.\n\nEach enabled clock specifies a univariate distribution from the Distributions package. Every distribution is more precise being sampled in the manner of the Next Reaction method (linear space) or the manner of the Modified Next Reaction method (log space). This sampler chooses which space to use depending on the type of the UnivariateDistribution and based on performance timings that are done during package testing. Defaults are set for those distributions included in the Distributions.jl package. If you want to add a distribution, then define:\n\nsampling_space(::MyDistribution) = LogSampling\n\nIf you want to override a choice in the library, then create a sub-type of the given distribution, and specify its sampling space.\n\nstruct LinearGamma <: Distributions.Gamma end\nsampling_space(::LinearGamma) = LinearSampling\n\nIf you want to test a distribution, look at tests/nrmetric.jl to see how distributions are timed.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Fleck.consume_survival","page":"Reference","title":"Fleck.consume_survival","text":"This updates the survival for a transition in the linear space, according to Gibson and Bruck. Transition was enabled between time record t0 and tn. Divide the survival by the conditional survival between t0 and tn. te can be before t0, at t0, between t0 and tn, or at tn, or after t_n.\n\nu=expleft(-int_t_e^t_nlambda_0(s-t_e)dsright)expleft(-int_t_n^taulambda_n(s-t_e)dsright)\n\n\n\n\n\nThis updates the survival for a transition in log space, according to Anderson's method.\n\nln u=-int_t_e^t_nlambda_0(s-t_e)ds - int_t_n^taulambda_n(s-t_e)ds\n\n\n\n\n\n","category":"function"},{"location":"reference/#Fleck.sampling_space","page":"Reference","title":"Fleck.sampling_space","text":"This function decides whether a particular distribution can be sampled faster and more accurately using its cumulative distribution function or using the log of its cumulative distribution function, also called the integrated hazard. The former is used for the Next Reaction method by Gibson and Bruck. The latter is used by the Modified Next Reaction method of Anderson. We are calling the first a linear space and the second a logarithmic space.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Sampling-Helpers","page":"Reference","title":"Sampling Helpers","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"CommonRandomRecorder\nfreeze\nmisscount\nmisses\nMultiSampler\nSingleSampler\nChatReaction\nDebugWatcher\nTrackWatcher","category":"page"},{"location":"reference/#Fleck.CommonRandomRecorder","page":"Reference","title":"Fleck.CommonRandomRecorder","text":"Common random variates, also called common random numbers (CRN), are a technique for reducing variance when repeating runs of simulations with different parameters. The idea is to record the randomness of one simulation and replay the same choices in subsequent runs. This particular implementation does this by saving the state of the random number generator every time it's used by a sampler.\n\nThe Xoshiro sampler has a relatively small state (32 bytes), which is saved every time the sampler uses random numbers. This CRN recorder saves data in memory, but we could save that to a memory-mapped file so that the operating system will optimize transfer of that memory to disk.\n\nWhat happens when replays of simulation runs use more draws than the first, recorded simulation? Those simulations draw from a fresh random number generator. This is not an exact approach.\n\nExample\n\nThe goal is to run the simulation with ten different parameter sets and measure how much different parameters change the mean of some quantity determined by the trajectories.\n\nusing Random: Xoshiro\nusing Fleck\nexample_clock = (3, 7)  # We will use clock IDs that are a tuple of 2 integers.\nsampler = FirstToFire{typeof(example_clock)}()\ncrn_sampler = CommonRandomRecorder(sampler, typeof(example_clock), Xoshiro)\nfor trial_idx in 1:100\n    run_simulation(model, crn_sampler)\n    reset!(crn_sampler)\nend\nfor param_idx in 1:10\n    each_model = modify_model!(model, param_idx)\n    run_simulation(each_model, crn_sampler)\n    reset!(crn_sampler)\nend\n\n\n\n\n\n","category":"type"},{"location":"reference/#Fleck.freeze","page":"Reference","title":"Fleck.freeze","text":"freeze(cr::CommonRandomRecorder)::FrozenCommonRandomRecorder\n\nThe CommonRandomRecorder records every time it sees a clock request random number generation. It continues to do that every time it runs, which is a problem if you run simulations for comparison on multiple threads. If you want to use CRN and to use multiple threads for subsequent simulation runs, then first run the simulation a bunch of times on one thread. Then freeze the simulation, and then the frozen version will stop remembering new threads.\n\nThere is one part of the frozen recorder that will be mutable because it's useful for debugging, the record of missed clocks. Freeze a recorder for each thread, and each thread will track its own misses. They will all work from the same copy of the recorded random number generator states.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Fleck.misscount","page":"Reference","title":"Fleck.misscount","text":"misscount(recorder::CommonRandomRecorder)\n\nThe common random recorder watches a simulation and replays the states of the random number generator on subsequent runs. This counts the number of times during the most recent run that a clock event happened that could not be replayed.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Fleck.misses","page":"Reference","title":"Fleck.misses","text":"misses(recorder::CommonRandomRecorder)\n\nThis iterates over pairs of misses in the common random recorder during the most recent simulation run, where the start of a simulation run was marked by calling reset!.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Fleck.MultiSampler","page":"Reference","title":"Fleck.MultiSampler","text":"MultiSampler{SamplerKey,Key,Time}(which_sampler::Function)\n\nThis makes a sampler that uses multiple stochastic sampling algorithms (SSA) to determine the next transition to fire. It returns the soonest transition of all of the algorithms. The which_sampler function looks at the clock ID, or key, and chooses which sampler should sample this clock. Add algorithms to this sampler like you would add them to a dictionary.\n\nOnce a clock is first enabled, it will always go to the same sampler. This sampler remembers the associations, which could increase memory for simulations with semi-infinite clocks.\n\nExamples\n\nLet's make one sampler for exponential distributions, one for a few clocks we know will be fast and one for slower clocks. We can name them with symbols. The trick is that we need to direct each kind of distribution to the correct sampler. Use a Float64 for time and each clock can be identified with an Int64.\n\nusing Fleck\nusing Distributions: Exponential, UnivariateDistribution\n\nstruct ByDistribution <: SamplerChoice{Int64,Symbol} end\n\nfunction Fleck.choose_sampler(\n    chooser::ByDistribution, clock::Int64, distribution::Exponential\n    )::Symbol\n    return :direct\nend\nfunction Fleck.choose_sampler(\n    chooser::ByDistribution, clock::Int64, distribution::UnivariateDistribution\n    )::Symbol\n    if clock < 100\n        return :fast\n    else\n        return :slow\n    end\nend\nsampler = MultiSampler{Symbol,Int64,Float64}(ByDistribution())\nsampler[:direct] = OptimizedDirect{Int64,Float64}()\nsampler[:fast] = FirstToFire{Int64,Float64}()\nsampler[:slow] = FirstToFire{Int64,Float64}()\n\n\n\n\n\n","category":"type"},{"location":"reference/#Fleck.SingleSampler","page":"Reference","title":"Fleck.SingleSampler","text":"SingleSampler{SSA,Time}(propagator::SSA)\n\nThis makes a sampler from a single stochastic simulation algorithm. It combines the core algorithm with the rest of the state of the system, which is just the time.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Fleck.ChatReaction","page":"Reference","title":"Fleck.ChatReaction","text":"This sampler can help if it's the first time you're trying a model. It checks all of the things and uses Julia's logger to communicate them. It samples using the first reaction algorithm.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Fleck.DebugWatcher","page":"Reference","title":"Fleck.DebugWatcher","text":"DebugWatcher()\n\nFor debugging, it helps to have visibility into the simulation. This Watcher records everything that is enabled or disabled as a list of all enables and all disabled. It's the complete event history, and you can think of it as the filtration for the process going forward.\n\nwatcher = DebugWatcher{String}()\n# enable and disable some things.\n(watcher.enabled[1].clock,\nwatcher.enabled[1].distribution,\nwatcher.enabled[1].te,\nwatcher.enabled[1].when)\n\n\n\n\n\n","category":"type"},{"location":"reference/#Fleck.TrackWatcher","page":"Reference","title":"Fleck.TrackWatcher","text":"TrackWatcher{K,T}()\n\nThis Watcher doesn't sample. It records everything enabled. You can iterate over enabled clocks with a for-loop. If we think of the model as providing changes in which transitions are enabled or disabled, this Watcher accumulates those changes to provide a consistent list of all enabled transitions. Together, a model and this Watcher provide the Semi-Markov core matrix, or the row of it that is currently known.\n\nfor entry in tracker\n    entry.clock\n    entry.distribution\n    entry.te\n    entry.when\nend\n\n\n\n\n\n","category":"type"},{"location":"reference/#Algorithms","page":"Reference","title":"Algorithms","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Many samplers depend on data structures to allow efficient querying of clocks ordered with respect to some value, usually the firing time. These types and methods implement them for Fleck.","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"CumSumPrefixSearch\nBinaryTreePrefixSearch\nKeyedKeepPrefixSearch\nKeyedRemovalPrefixSearch\nchoose\nsetindex!\nrand\nset_multiple!","category":"page"},{"location":"reference/#Fleck.CumSumPrefixSearch","page":"Reference","title":"Fleck.CumSumPrefixSearch","text":"CumSumPrefixSearch{T}()\n\nThis stores hazard rates in order to make it easier for the Direct method to sample them. This version is the dumbest possible, but it can be faster when there are few hazards enabled. It uses a simple array and, each time the Direct method samples, this evaluates the cumulative sum of the array.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Fleck.BinaryTreePrefixSearch","page":"Reference","title":"Fleck.BinaryTreePrefixSearch","text":"BinaryTreePrefixSearch{T}(N=32)\n\nThis stores hazard rates to make them faster for the Direct method to sample. This is a binary tree where the leaves are values and the nodes are sums of those values. It is meant to make it easier to find the leaf such that the sum of it and all previous leaves is greater than a given value.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Fleck.KeyedKeepPrefixSearch","page":"Reference","title":"Fleck.KeyedKeepPrefixSearch","text":"This decorator turns a Prefix Search algorithm into one that works for arbitrary keys. This version only adds entries, so disabling a clock sets its hazard to zero without removing it. If a simulation re-enables the same set of clocks, this is the faster choice.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Fleck.KeyedRemovalPrefixSearch","page":"Reference","title":"Fleck.KeyedRemovalPrefixSearch","text":"This decorator turns a Prefix Search algorithm into one that works for arbitrary keys. This version reuses entries in the prefix search after their clocks have been disabled. If the simulation moves through a large key space, this will use less memory.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Fleck.choose","page":"Reference","title":"Fleck.choose","text":"choose(pst::BinaryTreePrefixSearch, value)\n\nFind the minimum index such that the prefix is greater than the given value.\n\nPrecondition: The value must be strictly less than the total for the tree.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.setindex!","page":"Reference","title":"Base.setindex!","text":"setindex!(A, X, inds...)\n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.rand","page":"Reference","title":"Base.rand","text":"rand(rng, sampler::SamplerTrivial{BinaryTreePrefixSearch})\n\nThis method overload allows the machinery of Random to generate random variates from the BinaryTreePrefixSearch set of values.\n\n\n\n\n\nrand(rng, sampler::SamplerTrivial{CumSumPrefixSearch})\n\nThis method overload allows the machinery of Random to generate random variates from the CumSumPrefixSearch set of values.\n\n\n\n\n\nDrawing a random number from a left-truncated exponential is particularly simple.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Fleck.set_multiple!","page":"Reference","title":"Fleck.set_multiple!","text":"If there are multiple values to enter, then present them at once as pairs of tuples, (index, value).\n\n\n\n\n\n","category":"function"},{"location":"distrib/#Notation-for-Distributions","page":"Notation for Distributions","title":"Notation for Distributions","text":"","category":"section"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"This describes implementation of distributions for sampling of distributions for stochastic simulation in continuous time. This kind of simulation makes specific demands on what calls a distribution must support, and those calls are different from what libraries provide. This is a guide for implementation of new distributions and a way to ensure that those implemented look correct. If something is wrong here, it matters, so file a bug report.","category":"page"},{"location":"distrib/#Notation","page":"Notation for Distributions","title":"Notation","text":"","category":"section"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"First, let's affix notation. The cumulative distribution function of every regular distribution can be written as an integral over its hazard rate, lambda","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"F(t)=1-e^-int_0^t lambda(s)ds","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"All algorithms for stochastic simulation treat distributions as being defined in absolute time, specified as an enabling time, t_e,","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"F(t t_e)=1-e^-int_0^t-t_e lambda(s)ds","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"Working with distributions in absolute time is a simple shift of the time scale and will be ignored in further discussions, although the enabling time, t_e, will certainly appear in code.","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"The density function is the derivative of the cumulative distribution function,","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"f(t)=fracdF(t)dt=lambda(t)e^-int_0^t lambda(s)ds","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"The survival is","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"G(t)=1-F(t)=e^-int_0^t lambda(s)ds","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"Because survival is multiplicative, we further label the survival from time t_0 to t_1 as","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"G(t_0 t_1)=fracG(t_1)G(t_0)=e^-int_t_0^t_1 lambda(s)ds","category":"page"},{"location":"distrib/#Using-Julia's-Distributions","page":"Notation for Distributions","title":"Using Julia's Distributions","text":"","category":"section"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"Julia's continuous univariate distributions support a fixed interface. In this section, we look at how to translate any distribution into the operations above.","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"In this table, d is the distribution.","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"Julia call Notation\ncdf(d,t) F(t)\nquantile(d,q) F^-1(q)\nlogcdf(d,t) ln(F(t))\nccdf(d,t) G(t)\nlogccdf(d,t) -int_0^t lambda(s)ds\nquantile(d,q) F^-1(q)\ncquantile(d,q) F^-1(1-q)=G^-1(q)\ninvlogcdf(d,lp) F^-1(e^l_p)\ninvlogccdf(d,lp) G^-1(e^l_p) or -int_0^t(l_p)lambda(s)ds=l_p\nrandexp(rng) -ln(1-U)","category":"page"},{"location":"distrib/#Requirements-for-a-Continuous-Time-Simulation","page":"Notation for Distributions","title":"Requirements for a Continuous-Time Simulation","text":"","category":"section"},{"location":"distrib/#Shifted-Sample","page":"Notation for Distributions","title":"Shifted Sample","text":"","category":"section"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"The First Reaction method requires that we sample a distribution given that we known it has not yet fired by a time t_0. The statement that it hasn't fired by time t_0 creates a new distribution from which to sample. If the old distribution had the hazard G(t)=G(0 t), it could be written as","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"G(0 t)=G(0 t_0)G(t_0 t)","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"It is this partial survival, since t_0, that we want to sample. Solving for G(t_0 t) and subtracting both sides from 1,","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"1-G(t_0 t)=fracG(0 t_0)-G(0 t)G(0 t_0)","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"Written in terms of the cumulative distribution functions, the cdf of the new distribution, which we'll call F(t t_0), is","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"F(t t_0)=fracF(t)-F(t_0)1-F(t_0)","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"This kind of distribution could be sampled by a rejection method, but the default way to sample it is by inversion, which means generating a uniform random value between 01 and solving U=F(t) for t. For Eq.   gibson-shifted{.interpreted-text role=\"eq\"}, this becomes","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"beginaligned\n U=F(tt_0t_e) \n  =fracF(tt_e)-F(t_0t_e)1-F(t_0t_e) \nU(1-F(t_0t_e))=F(tt_e)-F(t_0t_e) \nF(tt_e)=U(1-F(t_0t_e))+F(t_0t_e) \nF(t-t_e)=U(1-F(t_0-t_e))+F(t_0-t_e) \nt-t_e = F^-1leftU(1-F(t_0-t_e))+F(t_0-t_e)right \nt = t_e+F^-1leftU(1-F(t_0-t_e))+F(t_0-t_e)right\nendaligned","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"We will call this operation SampleShifted.","category":"page"},{"location":"distrib/#Hazard-Rate-for-Next-Reaction","page":"Notation for Distributions","title":"Hazard Rate for Next Reaction","text":"","category":"section"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"The Next Reaction method requires sampling a distribution such that the quantile is saved, so that later adjustments to the distribution can use the same quantile.","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"During a simulation, the hazard rate, lambda, is a function of the state of the system, X(t). The state of the system only changes in jumps, so the hazard rate is effectively a series of distributions in time. For instance, a hazard rate, from enabling time T_0 to firing time T_3, might have three parts.","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"beginaligned\n  lambda(X_0 T_0 t)=h_0(t)  qquad T_0 le t  T_1 \n  lambda(X_0 T_0 X_1 T_1 t)=h_1(t)  qquad T_1 le t  T_2 \n  lambda(X_0 T_0 X_1 T_1 X_2 T_2 t)=h_2(t)  qquad T_2 le t  T_3\nendaligned","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"The algorithm therefore samples for a firing time from h_0(t) as soon as the transition is enabled, but that time will turn out to be wrong (we call it a putative time). Later, the algorithm will resample using h_1(t) using the original sample's quantile and taking time off the clock. If the first sample were by inversion, it would look like solving this equation for t (still ignoring enabling times),","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"U=1-expleft(int_0^th_0(s)dsright)","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"Then a later sample would use the same U, but with knowledge that the distribution now contains a new part, h_1(t),","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"beginequationtagcdf-consume\nU=1-expleft(-int_0^t_1h_0(s)dsright)expleft(-int_t_1^th_1(s)dsright)\nendequation","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"Anderson had the bright idea to write the quantile as an exponential quantile, 1-U=e^ln (1-U), so that the equation requires only addition of integrated hazards,","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"beginaligned\n  ln(1-U)=-int_0^t_1h_0(s)ds-int_t_1^th_1(s)ds \n  int_t_1^th_1(s)ds=-ln(1-U)-int_0^t_1h_0(s)ds\nendaligned","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"As the underlying distribution, h_i(t), changes, the right hand side gets smaller and smaller. Let's call the sum of all consumed hazard gamma,","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"gamma=sum_i int_t_i^t_i+1h_i(s)ds","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"The algorithm therefore needs three operations from the distribution.","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"MeasuredSample---Sample the distribution, returning the  exponential quantile. Calling the random number generator, rng  and the putative time t_p, it's\nleft(rng h_0(t)right) mapsto left(t_p -ln(1-U)right)\nConsumeSample---Consume remaining quantile for the next  sample. If the sum of hazard in the past is called gamma, then\nleft(gamma h_i(t) t_iright) mapsto left(gamma t_i+1right)\nPutative---Generate a new putative time from the exponential  quantile and the consumed hazard,\nleft(-ln(1-U) gamma t_i h_i(t)right) mapsto p_t","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"The nice part about the first step is that there is no need to sample by inversion. Any sampling method will do, as long as the exponential quantile is calculated.","category":"page"},{"location":"distrib/#Cumulative-Distributions-for-Next-Reaction","page":"Notation for Distributions","title":"Cumulative Distributions for Next Reaction","text":"","category":"section"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"The original form of the Next Reaction, by Gibson and Bruck, was written in terms, not of the hazards, but of the cumulative distribution functions. This form remains useful because some distributions are much simpler, or more accurate, to sample as cdfs instead of sampling from their hazard rates.","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"Returning to Eq. cdf-consume above, this can be rewritten as","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"1-U=expleft(-int_0^t_1h_0(s)dsright)expleft(-int_t_1^th_1(s)dsright)","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"In terms of the survival functions, this becomes","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"1-U=G_0(0 t_1)G_1(t_1 t)","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"If we wish to solve this for t, then, in terms of the survival, it looks like","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"G_1(t_1 t)=frac1-UG_0(0 t_1)","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"Writing the left-hand side as a cumulative distribution function requires the transformation","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"G(a b)=fracG(b)G(a)=frac1-F(b)G(a)","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"so we have","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"F_1(t)=1-G_1(t_1) frac1-UG_0(0 t_1)","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"This generalizes to many steps as","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"F_j(t)=1-G_j(t_j) (1-U) prod_i^j fracG_i(t_i)G_i(t_i+1)","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"Let's call the running product on the right delta,","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"delta=prod_i^j fracG_i(t_i)G_i(t_i+1)","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"Then the algorithm requires three operations","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"MeasuredSample---Sample the distribution, returning the  quantile. Calling the random number generator, \"rng,\" and the  putative time t_p, it's\nleft(rng h_0(t)right) mapsto left(t_p 1-Uright)\nConsumeSample---Consume remaining quantile for the next  sample.\nleft(delta_i h_i(t) t_iright) mapsto left(delta_i+1 t_i+1right)\nPutative---Generate a new putative time from the exponential  quantile and the consumed hazard,\nleft(1-U delta_i t_i h_i(t)right) mapsto p_t","category":"page"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"As you can see by comparison with the hazards version, it's simple to write the algorithm to accommodate either method of sampling. Therefore, each distribution can choose which interface to support.","category":"page"},{"location":"distrib/#Acknowledgement","page":"Notation for Distributions","title":"Acknowledgement","text":"","category":"section"},{"location":"distrib/","page":"Notation for Distributions","title":"Notation for Distributions","text":"This section comes was created by the Analytical Framework for Infectious Disease Dynamics (AFIDD) group at Cornell University in conjunction with the USDA Agricultural Research Service. This work was supported by the Science & Technology Directorate, Department of Homeland Security via interagency agreement no. HSHQDC-10-X-00138.","category":"page"},{"location":"objects/#Objects-in-Fleck","page":"Structure","title":"Objects in Fleck","text":"","category":"section"},{"location":"objects/","page":"Structure","title":"Structure","text":"This describes the kinds of objects in Fleck in order to explain how they work together.","category":"page"},{"location":"objects/#Distribution","page":"Structure","title":"Distribution","text":"","category":"section"},{"location":"objects/","page":"Structure","title":"Structure","text":"At the heart of simulations are probability distributions. When this code refers to a distribution, it means a probability distribution function in time. When we sample a distribution, we randomly draw a time at which an event will happen.","category":"page"},{"location":"objects/","page":"Structure","title":"Structure","text":"Let's take a Gamma distribution as an example. For the Gamma distribution, the probability distribution function, as you see it in Wikipedia's description,","category":"page"},{"location":"objects/","page":"Structure","title":"Structure","text":"f(x) = fracbeta^alphaGamma(alpha)x^alpha - 1e^-beta x","category":"page"},{"location":"objects/","page":"Structure","title":"Structure","text":"For a simulation, we think of the distribution as being over time, and it's over the time since it was first possible for the event to happen, called t_e. We can write the Gamma distribution for t-t_e.","category":"page"},{"location":"objects/","page":"Structure","title":"Structure","text":"f(t-t_e) = fracbeta^alphaGamma(alpha)(t-t_e)^alpha - 1e^-beta (t-t_e)","category":"page"},{"location":"objects/","page":"Structure","title":"Structure","text":"In Julia, the univariate distributions don't carry their enabling time as a parameter, so we store it separately.","category":"page"},{"location":"objects/#Competing-Clocks","page":"Structure","title":"Competing Clocks","text":"","category":"section"},{"location":"objects/","page":"Structure","title":"Structure","text":"Let's say you make a simulation of rabbits eating kibble. A rabbit just picked up a piece of kibble, and the simulation decides there is a Gamma-distributed time at which it will be ready to eat the next bit of kibble. Meanwhile, another rabbit eats the last bit of kibble. That makes it impossible for the first rabbit to eat any kibble, so we say that its event is interrupted. That interruption was a result of the rabbits competing, but what the simulation sees is distributions competing to fire first, and we call them competing clocks.","category":"page"},{"location":"objects/","page":"Structure","title":"Structure","text":"We have a small naming problem because, while simulations use distributions in time, they sometimes turn them on or off. This combination of a known distribution (such as an Exponential or Gamma distribution) and the ability to temporarily pause it creates its own probability distribution, which we call a clock.","category":"page"},{"location":"objects/","page":"Structure","title":"Structure","text":"For example, let's make a model of a random walker on a chessboard. Given that the walker is at a grid location, (i j), that walker can move to one of four directions, (i-1 j), (i+1 j), (i j-1), or (i j+1). In order to simulate this, we might choose four Exponential distributions, one for each direction. When the walker reaches the side of the chessboard, it doesn't make sense to let it walk off the chessboard, so, at that moment, the simulation disables the ability to walk left. There is an Exponential distribution associated with walking left, but its hazard rate will be zero while the piece is at the side of the chessboard. The simulation considers \"move left\" a clock with an Exponential distribution whose firing is disabled.","category":"page"},{"location":"objects/#Sampler","page":"Structure","title":"Sampler","text":"","category":"section"},{"location":"objects/","page":"Structure","title":"Structure","text":"The main responsibility of Fleck.jl is to provide samplers of competing clocks. Given a list of enabled distributions, decide which one is next to fire and when it will fire.","category":"page"},{"location":"objects/","page":"Structure","title":"Structure","text":"In order to decide which clock fires next, a sampler needs some information.","category":"page"},{"location":"objects/#Initialization","page":"Structure","title":"Initialization","text":"","category":"section"},{"location":"objects/","page":"Structure","title":"Structure","text":"The sampler may have a constructor to configure its memory usage or other resources.","category":"page"},{"location":"objects/#Update-Clock-State","page":"Structure","title":"Update Clock State","text":"","category":"section"},{"location":"objects/","page":"Structure","title":"Structure","text":"For a continuous-time simulation, each event happens at a distinct time. Right after an event happens, the simulation is changed, and there are three possible ways clocks are affected.","category":"page"},{"location":"objects/","page":"Structure","title":"Structure","text":"A clock may be disabled. For instance, if the event was crashing a car, you can no longer crash a crashed car.\nA clock may be enabled. For instance, once a person is infected, they can now infect all neighboring people.\nThe rate of a clock may change. We discussed moves on a chessboard earlier. Maybe there's now a breeze so that the rate to move right is greater than the rate to move left. The Exponential distributions would change accordingly.","category":"page"},{"location":"background/#Background","page":"Background","title":"Background","text":"","category":"section"},{"location":"background/","page":"Background","title":"Background","text":"This addresses two main points, how to specify a model for the library using distributions defined by hazards and why such a specification, with its initial conditions, is sufficient to define the trajectory for a model.","category":"page"},{"location":"background/#The-Hazard-from-Survival-Analysis","page":"Background","title":"The Hazard from Survival Analysis","text":"","category":"section"},{"location":"background/#Discrete-case","page":"Background","title":"Discrete case","text":"","category":"section"},{"location":"background/","page":"Background","title":"Background","text":"The discrete case is much easier to understand than the continuous case because it can be explained without employing any results from calculus. Throughout this section, bfX will be assumed to real-valued random variable. For example, bfX could represent latent periods for measles.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"It frequently happens that random samples of the real valued variables such as bfX are actually analyzed on a discrete scale. For example Stocks' data on latent periods of measles in latent_period{.interpreted-text role=\"ref\"} is based on daily visits by patients.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"The (cumulative) distribution of bfX is defined as","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"F_X(k) = mathcalPx le k","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"assuming F_X(infty) = 1. The density can be expressed as the difference in adjacent values of the distribution","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"beginaligned\nf_X(k)  =  mathcalPX=k \n          =  mathcalPXle k - mathcalPX le k-1  \n      =  F_X(k) - F_X(k-1)\nendaligned","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"For Stocks' data in latent_period{.interpreted-text role=\"ref\"}, the density at day k should be interpreted as the probability of the appearance of symptoms since the previous visit on day k-1.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"The hazard is defined as the conditional probability that the value of a random selection from bfX equals k given it this value is already known to exceed k-1. Using the usual rules for computing conditional probabilities, the hazard is given by the following ratio","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"beginaligned\nh_X(k)  =  mathcalPX=k  k-1X \n          =  fracf_X(k)1 - F_X(k-1)\nendaligned","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"In the case of Stocks' data, the hazards shown in latent_period_hazard{.interpreted-text role=\"ref\"} would correspond to the probability of symptoms appearing at day k given that the patient had not displayed symptoms at any previous visit. As time goes on, patients who have already developed symptoms effectively reduce the pool of patients in the study who are still in a state where they might first present symptoms on day k. This is the origin of the term in the denominator.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"(Image: Figure 2. Estimated hazards of latent periods for measles in London circa 1931)","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"On any given day, the hazard for latent periods can be interpreted as the rate of appearance of symptoms per asymptomatic (infected but not yet symptomatic) patient per day. For example, the hazard inferred from the Weibull distribution is approximately 015 on day 10. In other words, 15% of the patients that are asymptomatic on day 9 will present symptoms when examined on day 10.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"(Image: Figure 3. Each participant of the Stocks study could either become symptomatic or leave the study. Focusing on the hazard accounts for the effect of those who leave.)","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"This interpretation is extremely important because it connects a hazard with a rate for a specific process, and that rate has well defined units of measurement. In addition, it clarifies how rate parameters should be estimated from observational data. Failure to account for the shrinking pool over time is commonplace. In this case it would lead to a systematic errors in the estimation of process rates, especially at long times when the depletion effect is most pronounced.","category":"page"},{"location":"background/#Continuous-case","page":"Background","title":"Continuous case","text":"","category":"section"},{"location":"background/","page":"Background","title":"Background","text":"The random variable bfX is again assumed to be a real-valued, but the measurements will not be binned as above. The cumulative distribution not an integer k but a continuous time interval, tau.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"F_X(tau)=Pxletau","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"assuming F_X(infty)=1. The density is the derivative of the cumulative distribution. The concept of the hazard is part of survival analysis, where survival is G_X(tau)=1-F_X(tau), and represents the probability the random variable, a time interval, is longer than tau. One expression for the hazard is that the density of the random variable is equal to the probability it survives to a time tau multiplied by the hazard rate for firing at time tau, or, in probabilities,","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"Ptauxletau+dtaudtau=PtauxPtauxletau+dtau+dtautaux","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"Writing this same equation with its almost-sure equivalents defines the continuous hazard, lambda_X(tau),","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"f_X(tau)=G_X(tau)lambda_X(tau)","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"This is a rearrangement away from the definition of the discrete case.","category":"page"},{"location":"background/#Finite-State-Machines-Generate-Trajectories","page":"Background","title":"Finite State Machines Generate Trajectories","text":"","category":"section"},{"location":"background/","page":"Background","title":"Background","text":"This library accepts a specification of a model in terms of hazards, an initial condition, and produces trajectories. This set of high-level steps to simulation (specify, initialize, step) has a well-defined abstraction called a finite state machine. It isn't the finite state machine familiar to programmers but a mathematical model, coming from category theory, for a particularly simple class of computing systems. At a conceptual level, a finite state machine can be considered a black box that receives a sequence of input signal and produces an output signal for each input signal. Internally, the black box maintains a state -- some sort of finite summary representation of the sequence of input signals encountered so far. For each input signal, the box performs two operations. In both cases, the decision depends on the current internal state and the identity of the input signal just received.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"Chose next state\nGenerate output token","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"It is helpful to view the finite state machine layer as a mechanism to simulate a Markov chain or Markov process.","category":"page"},{"location":"background/#Markov-Chain-for-Discrete-Time-Trajectories","page":"Background","title":"Markov Chain for Discrete-Time Trajectories","text":"","category":"section"},{"location":"background/","page":"Background","title":"Background","text":"Roughly speaking, a Markov chain, bfX, is a probabilistic system that makes random jumps among a finite set of distinct states, s_0 s_1 s_2 ldots s_N such that the probability of choosing the next state, X_n+1 depends only on the current state, X_n. In mathematical terms, the conditional probabilities for state transitions must satisfy","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"mathcalPX_n+1 = s_l  X_0=s_i X_1=s_j ldots X_n=s_k =\nmathcalPX_n+1 = s_l  X_n=s_k","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"Since more distant history does not affect future behavior, Markov chains are sometimes characterized as memoryless.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"This relation can be iterated to compute the conditional probabilities for multiple time steps","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"mathcalPX_n+2 = s_m  X_n=s_k = sum_l mathcalPX_n+2 = s_m \nX_n+1=s_l mathcalPX_n+1 = s_l  X_n=s_k","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"Note, the transition probabilities mathcalPX_n+1 = s_l  X_n=s_k may depend on time (through the index n). These so-called time-inhomogeneous Markov chains arise when the system of interest is driven by external entities. Chains with time-independent conditional transition probabilities are called time-homogeneous. The dynamics of a time-homogeneous Markov chain is completely determined by the initial state and the transition probabilities. All processes considered in this document are time-homogeneous.","category":"page"},{"location":"background/#Markov-Process-for-Continuous-Time-Trajectories","page":"Background","title":"Markov Process for Continuous-Time Trajectories","text":"","category":"section"},{"location":"background/","page":"Background","title":"Background","text":"A Markov process is a generalization of the Markov chain such that time is viewed as continuous rather than discrete. As a result, it makes sense to record the times at which the transitions occur as part of the process itself.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"The first step in this generalization is to define a stochastic process bfY that includes the transition times as well as the state, Y_n = (s_jt_n).","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"The second step is to treat time on a truly continuous basis by defining a new stochastic process, bfZ, from bfY by the rule Z_t = s_k in the time interval t_n le t  t_n+1 given Y_n = (s_k t_n) . In other words, bfZ_t is a piecewise constant version of bfY as shown in piecewise_Z{.interpreted-text role=\"ref\"}","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"(Image: Figure 4. **Realization of a continuous time stochastic process and associated Markov chain.**)","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"A realization of the process bfY is defined by the closed diamonds (left end points) alone. Similarly, a realization of the process bfZ_t is illustrated by the closed diamonds and line segments. The closed and open diamonds at the ends of the line segment indicate that the segments include the left but not the right end points.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"The memoryless property for Markov processes is considerably more delicate than in the case of Markov chain because the time variable is continuous rather than discrete. In the case of bfY, the conditional probabilities for state transitions of must satisfy","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"mathcalPY_n+1 = (s_lt_n+1)  Y_0=(s_i t_0) Y_1=(s_j t_1)\nldots Y_n=(s_k t_n) =\nmathcalPY_n+1 = (s_l t_n+1)  Y_n=(s_k t_n)","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"The proper generalization of the requirement of time-homeogeneity stated previously for Markov chains is that joint probability be unchanged by uniform shifts in time","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"mathcalPZ_t+tau  Z_s+tau = mathcalPZ_t  Z_s ","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"for 0st and tau  0. Stochastic processes with shift invariant state transition probabilities are called stationary.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"When we examined hazard rates above, we were examining the rate of transitions for a Markov process. The overall probability of the next state of the Markov process is called the core matrix,","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"mathcalPZ_t  Z_s =Q_ij(t_n+1-t_n)","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"indicating a state change between the states (s_is_j). The derivative of this is a rate,","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"q_ij(t_n+1-t_n)=fracdQ_ij(t_n+1-t_n)dt","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"which is a joint distribution over states and time intervals. Normalization for this quantity sums over possible states and future times,","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"1=int_0^infty sum_j  q_ij(s)ds","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"The survival, in terms of the core matrix, is","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"G_i(tau)=1-int_0^tau sum_k  q_ik(s)ds","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"This means our hazard is","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"lambda_ij(tau)=fracq_ij(tau)1-int_0^tau sum_k  q_ik(s)ds","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"For the measles example, the set of future states j of each individual include symptomatic and all the possible other ways an individual leaves the study, so you can think of j=mboxleft town. In practice, we build a hazard in two steps. First, count the probability over all time for any one eventual state j. This is the same stochastic probability pi_ij that is seen in Markov chains. Second, measure the distribution of times at which intervals enter each new state j, given that they are headed to that state. This is called the holding time, h_ij(tau), and is a conditional probability. Together, these two give us the core matrix,","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"q_ij(tau)=pi_ijh_ij(tau)","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"Note that h_ij(tau) is a density whose integral H_ij(tau) is a cumulative distribution. If we write the same equation in terms of probabilities, we see that it amounts to separating the Markov process into a marginal and conditional distribution.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"beginaligned\nq_ij(tau)=fracddtauPZ_tZ_s \n=fracddtauPs_js_it_nPt_n-1-t_nletaus_is_jt_n \n   =  Ps_js_it_nfracddtauPt_n-1-t_nletaus_is_jt_n \n   =  pi_ijfracddtauH_ij(tau) \n   =  pi_ijh_ij(tau)\nendaligned","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"Choosing the other option for the marginal gives us the waiting time formulation for the core matrix. It corresponds to asking first what is the distribution of times at which the next event happens, no matter which event, and then asking which events are more likely given the time of the event.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"beginaligned\nq_ij(tau)=fracddtauPZ_tZ_s \n=fracddtauPs_js_it_nt_n+1Pt_n-1-t_nletaus_it_n \n   =  fracddtau(Pi_ij(tau)W_i(tau)) \n   =  pi_ij(tau)fracddtauW_i(tau) \n   =  pi_ij(tau)w_i(tau)\nendaligned","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"While the waiting time density w_i(tau), is the derivative of the waiting time, we won't end up needing to relation pi_ij(tau) to Pi_ij(tau) when finding trajectories or computing hazards, so the more complicated relationship won't be a problem.","category":"page"},{"location":"background/#Acknowledgement","page":"Background","title":"Acknowledgement","text":"","category":"section"},{"location":"background/","page":"Background","title":"Background","text":"This section comes was created by the Analytical Framework for Infectious Disease Dynamics (AFIDD) group at Cornell University in conjunction with the USDA Agricultural Research Service. This work was supported by the Science & Technology Directorate, Department of Homeland Security via interagency agreement no. HSHQDC-10-X-00138.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Fleck","category":"page"},{"location":"#Fleck","page":"Home","title":"Fleck","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Fleck is a Julia library that samples distributions for discrete event systems (DES) in continuous time. It supports Exponential and non-Exponential distributions for events.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you want to write a simulation engine that tracks the state of a system, and the next event in that system is determined by which, among competing events, fires first, then this library can track the next firing times. Here are some examples of discrete event systems.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Simulations of chemical reactions.\nQueueing theory models of networks, production, and computation.\nEpidemiological models of disease spread among individuals.\nVector-addition systems.\nGeneralized stochastic Petri nets.\nGeneralized semi-Markov Processes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Many of these mathematical objects provide intricate structure to tell us what events are enabled in any particular state (e.g; Petri nets). Fleck organizes the stochastic firing times (clocks) of enabled events so we can sample from clocks to find out what happens next and update them after the state changes. In statistical terms, this library is a sampler for generalized semi-Markov processes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The background work for this library comes from Continuous-time, discrete-event simulation from counting processes, by Andrew Dolgert, 2016.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The library provides you with samplers. Each sampler has the same interface. Here, a distribution is a Distributions.ContinuousUnivariateDistribution, RNG is a random number generator, the key is some identifier (maybe an integer) for the event, and an enabling time is a zero-time for the given distribution.","category":"page"},{"location":"","page":"Home","title":"Home","text":"enable!(sampler, key, distribution, enabling time, current time, RNG) - to start the clock on when an event will fire next.\ndisable!(sampler, key, current time) - to turn off an event so it can't fire.\nnext(sampler, current time, RNG) - to ask this library who fires next.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Different samplers are specialized for sampling more quickly and accurately for different applications. For instance, some applications have very few events enabled at once, while some have many. Some applications use only exponentially-distributed events, while some have a mix of distribution types. Because continuous-time discrete event systems can be fire many events, the literature has focused on reducing the number of CPU instructions required to sample each event, and this library reflects that focus.","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"#Why-Use-This?","page":"Home","title":"Why Use This?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If I make a quick simulation for myself, I sample distributions the moment an event is enabled and store the firing times in a priority queue. When would I switch to this library?","category":"page"},{"location":"","page":"Home","title":"Home","text":"I want to evaluate the effect of changing simulation parameters by comparing multiple runs with common random numbers.\nI'm looking at rare events, so I want to use splitting techniques and importance sampling.\nPerformance matters (which it often doesn't), so I would like to try different samplers on my problem.\nI want to focus on developing and testing my model not my simulation algorithm; Fleck is designed and tested with care to ensure correctness.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"rules/#Rules-and-Guidelines","page":"Rules and Guidelines","title":"Rules and Guidelines","text":"","category":"section"},{"location":"rules/","page":"Rules and Guidelines","title":"Rules and Guidelines","text":"Even though this library is just handling a bag of event clocks, there are some rules for how to call the interface so that those clocks remain consistent. There are rules that keep the simulation running, and there are rules that guarantee repeatable simulations that have the correct statistical likelihood.","category":"page"},{"location":"rules/","page":"Rules and Guidelines","title":"Rules and Guidelines","text":"Some simulations treat events as maybe changing state, maybe not changing state.\nSome simulations think of an event as probabilistically changing state.\nFor a simulation in continuous time, only one event can happen at any time.","category":"page"},{"location":"samplers/#Understanding-Samplers","page":"Understanding Samplers","title":"Understanding Samplers","text":"","category":"section"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"From the perspective of someone who uses samplers in a simulation the features are important.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"Does this sampler work only for Exponential distributions or also non-Exponential distributions?\nDoes it support using atomic distributions, such as delta functions?\nDoes it take advantage of a GPU?\nDoes it put any restrictions on clock keys, such as requirements that they be sequential integers or that there be few keys?\nDoes it support variance reduction techniques, such as\nCommon random numbers\nantithetic variates\nimportance sampling\ncontrol variates?\nDoes it maintain accuracy for extreme distribution parameters or extreme draws?","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"Answers to these questions come from understanding how samplers are built.","category":"page"},{"location":"samplers/#Series-of-choices","page":"Understanding Samplers","title":"Series of choices","text":"","category":"section"},{"location":"samplers/#Split-into-marginal-and-conditional","page":"Understanding Samplers","title":"Split into marginal and conditional","text":"","category":"section"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"Fleck supports sampling from generalized semi-Markov processes (GSMP). Every sampler of GSMP is sampling a joint space of which clock event is next, E, and which time is next, T. The clock event is a discrete choice, and the time is a continuous choice. The first step to making a GSMP sampler is to split that joint distribution into marginals and conditionals.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"The reason to split the joint distribution is that, to sample any joint distribution, the usual method is to sample from the marginal of one random variable and then, given that value, sample the conditional of the other random variable. There are three ways to split a GSMP's joint distribution.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"beginaligned\nPET  = PEPTE \n = PETPT \n = min(PT_i)quad forall i\nendaligned","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"The first split is rarely, if ever, used because we specify GSMP simulations by the probability in time that each clock will have an event. It takes some work to calculate the marginal over events. If we use notation where lambda is the hazard, S is the survival, and t_0 is the current simulation time, then the equation an integral over a product including all enabled survivals.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"PE = int_t_0^infty lambda_i(t)prod_i S_i(t) dt","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"Instead, the second split is used all of the time for Exponential distributions. It's the choice that leads to the class of Direct methods. That's because the marginal over time is easy to calculate for exponentials.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"PT = 1 - expleft(-sum_i int_t_0^t lambda_i(s)dsright)","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"For exponential distributions, the hazard is constant, which makes the integral trivial. But note that Gillespie's first two papers on exact stochastic simulation included a derivation of this direct method for non-exponential distributions. As with the Exponential distribution, this can be done analytically for the Weibull distribution. For general distributions, the code just has to integrate the right-hand side of the above equation. This is the kind of operation GPUs love.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"The third split is a  way to sample the joint distribution by sampling from the conditional distribution of every enabled clock, which we call competing clocks. Define a random variate that is the minimum of those clocks, which defines the time to fire. This split matches our instinct that clocks are competing to fire next, and the first one wins.","category":"page"},{"location":"samplers/#Sampling-strategy","page":"Understanding Samplers","title":"Sampling strategy","text":"","category":"section"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"Now that we've chosen what random variables to sample, in what order, we choose a sampling strategy. By strategy, I mean one of","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"sampling by inversion, also known as inverse transform sampling\nsampling by rejection, also known as an acceptance-rejection method","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"These are broad methods for sampling, each of which has specific variants for particular distributions or, in the case of GSMP, for random variables defined by sets of competing distributions.","category":"page"},{"location":"samplers/#Specialize-for-the-distribution","page":"Understanding Samplers","title":"Specialize for the distribution","text":"","category":"section"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"Here, we would specialize, for instance, for having all Exponential distributions or all Weibull distributions. Stochastic simulation also introduces another wrinkle in sampling univariate distributions.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"In a simulation, it is often the case that a clock is disabled and enabled again, or that a clock that was enabled with one rate is re-enabled with a different rate because it depends on the state of the system, and that state has changed. As a result, we frequently sample clocks that are shifted left. A clock is shifted left when the traditional zero-time for the distribution is in the past. In this case, we have options for how we modify sampling the distribution.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"We could use a rejection method, where we sample the distribution and reject samples that are times in the past. We could sample by inversion and select random variates that correspond only to future times. We could sample by rejection and choose a known distribution whose hazard always exceeds that of the shifted distribution. There are lots of options, but none are built into the Julia Distributions package as ways to sample shifted distributions. It's a small complication that applies to stochastic simulation, and we handle it in the code.","category":"page"},{"location":"samplers/#Data-structures-and-algorithms","page":"Understanding Samplers","title":"Data structures and algorithms","text":"","category":"section"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"The next concern is how to express these sampling methods in code. Many of the well-known exact stochastic simulation (SSA) algorithms for chemical simulation are variations, not on how to sample the distribution, but on what data structures and algorithms to use for accelerating that sampling method.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"For instance, if we are sampling a simulation using only Exponential distributions, then the Direct method has many named variants. The first step for the Direct method is to sample a time. The time comes from inverting the survival of the system. Here, we denote a random variate between [0,1] by U.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"U = expleft(-sum_i lambda_i tright)","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"The simulation is more effecient if we can maintain sum_i lambda_i as a partial sum, so that we can index into it with log U. Further, every time there is a next event in the simulation, the list of enabled hazards changes, so we want to modify that list after each event, while maintaining the sum. For this purpose, there have been many data structures proposed. The general problem is known, in computer science as the prefix sum or prefix scan. An early attempt was an interesting structure called a Fenwick tree. The state of the art for this class of approaches was the optimized direct method, which is really just one of the prefix scan algorithms applied to the Direct method.","category":"page"},{"location":"samplers/#Examples","page":"Understanding Samplers","title":"Examples","text":"","category":"section"},{"location":"samplers/#First-to-fire","page":"Understanding Samplers","title":"First to fire","text":"","category":"section"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"The simplest way to sample a GSMP is to sample each clock the moment it's enabled. I don't know that there is a common name for this, so I'm calling it \"first to fire.\" This is a competing clocks split of the joint distribution. For each clock, it can ask the Julia library to sample that clock's distribution in whatever way it sees fit. This is helpful for both speed and accuracy because distributions have methods that are specialized for that distribution and, often, for particular ranges of distribution parameters. For example, it seems easy to sample an exponential using inversion. Here, U is a uniform variate between [0,1], and t is the sample time.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"t = (1lambda) log U","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"However, every mathematical library uses the Ziggurat method because it is at least twice as fast. There might be a downside if you want to use automatic differentiation on the code.","category":"page"},{"location":"samplers/#Next-reaction-method","page":"Understanding Samplers","title":"Next reaction method","text":"","category":"section"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"The next reaction method also samples each clock, but it samples in such a way that it reduces usage of random number generation. Random number generation used to be slow, but it is now no longer a concern. (There's a funny paper about this that I'm having trouble finding.) Nevertheless, there are some reasons to use this method.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"When a clock is first enabled, the next reaction method samples a uniform variate in [0,1], and then it finds a putative next event time for that clock using inversion. The original random variate is considered the total survival for this clock. The interesting move is that, if that same clock is disabled, this method saves some measure of how far the clock has gotten. That is, it measures the survival of the clock and subtracts that survival from the total survival. If the clock is ever enabled again, its new firing time is determined by the remaining survival.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"Is that allowed? The authors of the Next Reaction sort of prove it in \"Efficient Exact Stochastic Simulation of Chemical Systems with Many Species and Many Channels\", but they can fortunately can rely on the work of Kurtz [1], which I don't quite see in their references. Nevertheless, Anderson and Kurtz amended this work with \"Continuous time markov chain models for chemical reaction methods\".","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"In Anderson and Kurtz, they take the same approach as the next reaction method. It's still split by the conditional firing times. It's still sampling by inversion, but they change to a log-space for the sampling of individual distributions. That's the whole change. Instead of storing the total survival, U, they store the log of that quantity, which turns out to be much more efficient for exponentials and Weibulls, which are used most frequently.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"In Fleck, you'll see a single sampler that uses a combination of the next reaction method (Gibson and Bruck) and the modified next reaction method (Anderson and Kurtz). Based on the particular univariate distribution, the code uses a lookup into a performance table to choose either a linear space or log space. It's the best of both worlds, and it's just a matter of changing data structures a little bit.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"Why do people like the next reaction method when the first to fire is much less fussy and will use the appropriate sampler for the distribution, every time? It's about features. The next reaction method stores data that helps calculate importance samples. It also makes it easy to implement common random numbers. Finally, the next reaction method always samples from U=01 or from an exponential distribution, and then it transforms that value into the sample of the particular clock's distribution. This is called pathwise sampling, and it enables a simple method for taking derivatives of distributions.","category":"page"},{"location":"samplers/#Direct-method-for-exponentials","page":"Understanding Samplers","title":"Direct method for exponentials","text":"","category":"section"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"The Direct method is really quite solved, as described above. However, there is one complication that has to do with clock keys. Literature about prefix scans assumes that there are integer indices into an ordered, fixed list of integers. That is, you will use the integers 1-100 for the whole simulation. It seems so useful to have clock keys that can be strings, tuples, or other immutable types, so Fleck uses a prefix scan that maintains a dictionary of keys.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"If the prefix scan has a dictionary of keys, then it could remember the keys forever or it could forget them. If you have a long-running simulation that uses an ever-growing number of event keys, then it's important to remove keys that are no longer in use. If you have a simulation that uses a fixed set of keys, it's easier to keep them in the dictionary.","category":"page"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"It would be interesting to ask whether we could create a data structure that is a keyed prefix sum, instead of using a dictionary that indexes into a prefix sum.","category":"page"},{"location":"samplers/#References","page":"Understanding Samplers","title":"References","text":"","category":"section"},{"location":"samplers/","page":"Understanding Samplers","title":"Understanding Samplers","text":"[1] Kurtz, Thomas G. \"Solutions of ordinary differential equations as limits of pure jump Markov processes.\" Journal of applied Probability 7.1 (1970): 49-58.","category":"page"}]
}
